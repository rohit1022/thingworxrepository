<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <Things>
        <Thing
         aspect.isExtension="true"
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2020-03-19T18:15:04.647+05:30"
         name="RemoteAccessPermissionServices"
         projectName=""
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GrantPermissions">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="organization"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="THINGTEMPLATENAME"
                             description=""
                             name="templateName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="THINGNAME"
                             description=""
                             name="thingName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="GROUPNAME"
                             description=""
                             name="userGroup"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GrantPermissionsThingworxInternal">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="organization"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="THINGTEMPLATENAME"
                             description=""
                             name="templateName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="THINGNAME"
                             description=""
                             name="thingName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="GROUPNAME"
                             description=""
                             name="userGroup"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GrantPermissionsThingworxInternalForTemplate">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="organization"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="THINGTEMPLATENAME"
                             description=""
                             name="templateName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="GROUPNAME"
                             description=""
                             name="userGroup"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GrantPermissionsThingworxInternalForThing">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="organization"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             aspect.thingShape="RemoteAccessible"
                             baseType="THINGNAME"
                             description=""
                             name="thingName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="GROUPNAME"
                             description=""
                             name="userGroup"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GrantPermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (organization === null || organization === undefined || organization.trim().length === 0) {
                                            throw new Error('organization parameter is required');
                                        }
                                        if (userGroup === null || userGroup === undefined || userGroup.trim().length === 0) {
                                            throw new Error('userGroup parameter is required');
                                        }
                                        if(thingName === undefined || thingName.trim().length === 0) {
                                            thingName = null;
                                        }
                                        if(templateName === undefined) {
                                            templateName = null;
                                        }
                                        if (thingName === null && templateName === null) {
                                            throw new Error('thingName or templateName parameter is required');
                                        }
                                        if (thingName !== null && templateName !== null) {
                                            throw new Error('Both thingName and templateName parameters were provided. Provide only one of these parameters.');
                                        }
                                        
                                        if(thingName !== null) {
                                            var implementsShape = Things[thingName].ImplementsShape({ 
                                                thingShapeName: "RemoteAccessible" 
                                            });
                                            if(!implementsShape) {
                                                throw new Error('The Thing ' + thingName + ' must implement the RemoteAccessible ThingShape');
                                            }
                                        }
                                        
                                        if(templateName !== null) {
                                            var implementsShape = Subsystems["RemoteAccessSubsystem"].DoesTemplateImplementShape({
                                                thingTemplate: templateName,
                                                thingShape: "RemoteAccessible"
                                            });
                                            if(!implementsShape) {
                                                throw new Error('The ThingTemplate ' + templateName + ' must implement the RemoteAccessible ThingShape');
                                            }
                                        }
                                        
                                        // parameters used when setting entity visibility
                                        var visibilityParams = {
                                            principal: organization,
                                            principalType: 'Organization'
                                        };
                                         
                                        // visibility permissions
                                        DataShapes["RemoteSessionParameters"].AddVisibilityPermission(visibilityParams);
                                        ThingShapes["RemoteAccessProvider"].AddVisibilityPermission(visibilityParams);
                                        ThingShapes["RemoteAccessServer"].AddVisibilityPermission(visibilityParams);
                                        Resources["SearchFunctions"].AddVisibilityPermission(visibilityParams);
                                        Resources["TimezoneServices"].AddVisibilityPermission(visibilityParams);
                                        Resources["CurrentSessionInfo"].AddVisibilityPermission(visibilityParams);
                                        Resources["InfoTableFunctions"].AddVisibilityPermission(visibilityParams);
                                        Subsystems["RemoteAccessSubsystem"].AddVisibilityPermission(visibilityParams);
                                        ThingTemplates["RemoteAccessClient"].AddInstanceVisibilityPermission(visibilityParams);
                                        ThingTemplates["RemoteViewerManagerTemplate"].AddInstanceVisibilityPermission(visibilityParams);
                                        
                                        
                                        if (thingName !== null) {
                                            Things[thingName].AddVisibilityPermission(visibilityParams);
                                        } else {
                                            ThingTemplates[templateName].AddInstanceVisibilityPermission(visibilityParams);
                                        }
                                        
                                        // runtime permissions
                                        var serviceParams = {
                                            principal: 'System',
                                            principalType: 'User',
                                            allow: true,
                                            type: 'ServiceInvoke'
                                        };
                                           
                                        serviceParams.resource = "StartSession";
                                        ThingShapes["RemoteAccessProvider"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSessions";
                                        ThingShapes["RemoteAccessProvider"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSession";
                                        ThingShapes["RemoteAccessProvider"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "EndSession";
                                        ThingShapes["RemoteAccessProvider"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetRemoteAccessibleEndpoints";
                                        ThingShapes["RemoteAccessProvider"].AddInstanceRunTimePermission(serviceParams);
                                            
                                        serviceParams.resource = "GetSessionsByRemoteAccessible";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSessionByRemoteAccessible";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "UpdateSession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetRemoteAccessibleEndpoints";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "CheckPermissions";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "CheckPermissionsBySession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        
                                        serviceParams.resource = "SearchThingsByTemplate";
                                        Resources["SearchFunctions"].AddRunTimePermission(serviceParams);
                                        
                                        serviceParams.resource = "CreateInfoTableFromDataShape";
                                        Resources["InfoTableFunctions"].AddRunTimePermission(serviceParams);
                                        
                                        serviceParams = {
                                            principal: userGroup,
                                            principalType: 'Group',
                                            allow: true,
                                            type: 'ServiceInvoke'
                                        };
                                        
                                        var services = ["GetPropertyTime", "GetBooleanPropertyValue", "GetNamedPropertyValues", "StartSession", "GetSessions", "GetSession", "EndSession", "ImplementsShape" ];
                                        for (index in services) {
                                            serviceParams.resource = services[index];
                                            if (thingName !== null) {
                                                Things[thingName].AddRunTimePermission(serviceParams);
                                            } else {
                                                ThingTemplates[templateName].AddInstanceRunTimePermission(serviceParams);
                                            }
                                        }
                                        
                                        serviceParams.resource = "EnableThing";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "RestartThing";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSession";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "EndSession";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetRemoteAccessibleEndpoints";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetNamedPropertyValuesForThing";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetConfigurationTableForThing";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetTunnelStatusForThing";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "UpdateSession";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetEndpointViewerConfiguration";
                                        ThingTemplates["RemoteAccessClient"].AddInstanceRunTimePermission(serviceParams);
                                        
                                        serviceParams.resource = "ProvidesViewersForEndpoint";
                                        ThingTemplates["RemoteViewerManagerTemplate"].AddInstanceRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetEndpointViewerConfiguration";
                                        ThingTemplates["RemoteViewerManagerTemplate"].AddInstanceRunTimePermission(serviceParams);
                                        
                                        // runtime permissions
                                        var readParams = {
                                            principal: userGroup,
                                            principalType: 'Group',
                                            allow: true,
                                            type: 'Read'
                                        };
                                        if (thingName !== null) {
                                            Things[thingName].AddDesignTimePermission(readParams);
                                        } else {
                                            ThingTemplates[templateName].AddInstanceDesignTimePermission(readParams);
                                        };
                                        
                                        var propertyParams = {
                                            principal: userGroup,
                                            principalType: 'Group',
                                            allow: true,
                                            type: 'PropertyRead'
                                        };
                                        
                                        var properties = ["isConnected", "name", "providerName"];
                                        for (index in properties) {
                                            propertyParams.resource = properties[index];
                                            if (thingName !== null) {
                                                Things[thingName].AddRunTimePermission(propertyParams);
                                            } else {
                                                ThingTemplates[templateName].AddInstanceRunTimePermission(propertyParams);
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GrantPermissionsThingworxInternal">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.GrantPermissions({
                                            organization: organization /* STRING */,
                                            userGroup: userGroup /* GROUPNAME */,
                                            thingName: thingName /* THINGNAME */,
                                            templateName: templateName /* THINGTEMPLATENAME */,
                                        });
                                        
                                        if(thingName === undefined || thingName.trim().length === 0) {
                                            thingName = null;
                                        }
                                        if(templateName === undefined) {
                                            templateName = null;
                                        }
                                         
                                        // parameters used when setting entity visibility
                                        var visibilityParams = {
                                            principal: organization,
                                            principalType: 'Organization'
                                        };
                                         
                                        // visibility permissions
                                        Things["ThingworxInternalRemoteAccessProvider"].AddVisibilityPermission(visibilityParams);
                                        Things["ThingworxInternalRemoteAccessServer"].AddVisibilityPermission(visibilityParams);
                                        Subsystems["TunnelSubsystem"].AddVisibilityPermission(visibilityParams);
                                        
                                        // runtime permissions
                                        var serviceParams= {
                                            principal: 'System',
                                            principalType: 'User',
                                            allow: true,
                                            type: 'ServiceInvoke'
                                        };
                                        serviceParams.resource = "StartTunnel";
                                        Subsystems["TunnelSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetActiveTunnels";
                                        Subsystems["TunnelSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetActiveTunnel";
                                        Subsystems["TunnelSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "CancelTunnel";
                                        Subsystems["TunnelSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetConfigurationTable";
                                        Subsystems["TunnelSubsystem"].AddRunTimePermission(serviceParams);
                                        
                                        serviceParams.resource = "ConvertTunnelSessionToRemoteSession";
                                        Things["ThingworxInternalRemoteAccessProvider"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "EndpointInfoTableToJson";
                                        Things["ThingworxInternalRemoteAccessProvider"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "SessionParametersInfoTableToJson";
                                        Things["ThingworxInternalRemoteAccessProvider"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetRemoteServerConfiguration";
                                        Things["ThingworxInternalRemoteAccessProvider"].AddRunTimePermission(serviceParams);
                                        
                                        
                                        serviceParams.resource = "GetNamedPropertyValues";
                                        Things["ThingworxInternalRemoteAccessServer"].AddRunTimePermission(serviceParams);
                                        
                                        serviceParams.resource = "CreateSession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetSession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "DeleteSession";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        serviceParams.resource = "GetEndpointViewerConfiguration";
                                        Subsystems["RemoteAccessSubsystem"].AddRunTimePermission(serviceParams);
                                        
                                        var services = ["GetTunnels", "GetConfigurationTable", "GetTunnelStatus"];
                                        for (index in services) {
                                            serviceParams.resource = services[index];
                                            if (thingName !== null) {
                                                Things[thingName].AddRunTimePermission(serviceParams);
                                            } else {
                                                ThingTemplates[templateName].AddInstanceRunTimePermission(serviceParams);
                                            }
                                        }
                                        
                                        serviceParams= {
                                            principal: userGroup,
                                            principalType: 'Group',
                                            allow: true,
                                            type: 'ServiceInvoke'
                                        };
                                        
                                        services = ["EndSession", "CompleteTunnel", "StartTunnel", "TunnelCommandToEdge"];
                                        for (index in services) {
                                            serviceParams.resource = services[index];
                                            if (thingName !== null) {
                                                Things[thingName].AddRunTimePermission(serviceParams);
                                            } else {
                                                ThingTemplates[templateName].AddInstanceRunTimePermission(serviceParams);
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GrantPermissionsThingworxInternalForTemplate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.GrantPermissionsThingworxInternal({
                                            organization: organization /* STRING */,
                                            userGroup: userGroup /* GROUPNAME */,
                                            templateName: templateName /* THINGTEMPLATENAME */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GrantPermissionsThingworxInternalForThing">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.GrantPermissionsThingworxInternal({
                                            organization: organization /* STRING */,
                                            userGroup: userGroup /* GROUPNAME */,
                                            thingName: thingName /* THINGNAME */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
