<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingTemplates>
        <ThingTemplate
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         aspect.isSystemObject="false"
         baseThingTemplate="Scheduler"
         description="Defines a scheduler that trigger a service regularly to calculate value of property &quot;serverStatus&quot; on all KepServer remote connections"
         documentationContent=""
         effectiveThingPackage="SchedulerThing"
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:40.749+05:30"
         name="PTC.SCA.SCO.KEPServerExStatusCalculationSchedulerThingTemplate"
         projectName="PTC.SCA.SCO.KEPServerEX Monitor"
         tags="PTC:sca-sco-kepserverexmonitor;PTC:sca-sco"
         thingPackage=""
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables>
                <ConfigurationTable
                 description="General Settings"
                 isMultiRow="false"
                 name="Settings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="true"
                             baseType="BOOLEAN"
                             description="Automatically enable scheduler on startup"
                             name="enabled"
                             ordinal="0"></FieldDefinition>
                            <FieldDefinition
                             baseType="USERNAME"
                             description="User context in which to run event handlers"
                             name="runAsUser"
                             ordinal="0"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="0 0/1 * * * ?"
                             baseType="SCHEDULE"
                             description="Execution Schedule (Cron String)"
                             name="schedule"
                             ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <enabled>true</enabled>
                            <runAsUser>
                            <![CDATA[
                            Administrator
                            ]]>
                            </runAsUser>
                            <schedule>
                            <![CDATA[
                            0/15 * * * * ? *
                            ]]>
                            </schedule>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions></ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations></ServiceImplementations>
                <Subscriptions>
                    <Subscription
                     description=""
                     enabled="true"
                     eventName="ScheduledEvent"
                     name="Event.ScheduledEvent"
                     source=""
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Event.ScheduledEvent">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            /*
                                            * Get all the rows from configuration table LaunchPointConfigurationThing#RemoteConnectionSetting
                                            */
                                            var params = {
                                            	tableName: 'RemoteConnectionSettings'
                                            }
                                            var allConnectionTypeDefinitions = Things[Things["PTC.Factory.LaunchPointConfigurationThing"]
                                            	.GetLaunchPointConfigurationName()].GetConfigurationTable(params);
                                            /*
                                            * For each connection type
                                            */
                                            for (var i = 0; i < allConnectionTypeDefinitions.getRowCount(); i++) {
                                            
                                            	var oneRowFromConnectionTypeDefinitions = allConnectionTypeDefinitions.getRow(i);
                                            
                                            	var resourceProviderThing = Things[oneRowFromConnectionTypeDefinitions.ResourceProviderName];
                                            	if (oneRowFromConnectionTypeDefinitions.ResourceProviderName == "PTC.Factory.KepServerResourceProvider") {
                                            		// If it is of type KepServerEX, then just call service CalculateStatusForAllKepServers on KepServerResourceProvider
                                            		resourceProviderThing.CalculateStatusForAllKepServers();
                                            	} else {
                                            		/*
                                            		* Retrieve all connections per thing template
                                            		*/
                                            		var params = {
                                            			thingTemplates: {"items":[oneRowFromConnectionTypeDefinitions.RemoteConnectionThingTemplateName]},
                                            			thingShapes: {"items":["PTC.SCA.SCO.RemoteConnectionThingShape"]},
                                            		};
                                            		var foundServers = Resources["SearchFunctions"].SearchThings(params).thingResults;
                                            		/*
                                            		* For each of these found connections, call service CalculateStatus on them
                                            		*/
                                            		for (var j = 0; j < foundServers.getRowCount(); j++) {
                                            			var connectionThing = foundServers.getRow(j);
                                            			var params = {
                                            				thingName: connectionThing.name
                                            			};
                                            			resourceProviderThing.CalculateServerStatus(params);
                                            		}
                                            	}
                                            }
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                </Subscriptions>
            </ThingShape>
            <ImplementedShapes></ImplementedShapes>
            <SharedConfigurationTables></SharedConfigurationTables>
            <InstanceDesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility></Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
