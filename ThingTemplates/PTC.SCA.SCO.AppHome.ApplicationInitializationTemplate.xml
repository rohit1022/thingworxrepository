<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingTemplates>
        <ThingTemplate
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         baseThingTemplate="GenericThing"
         description="ThingTemplate for application initialization. {PTC.SCA.SCO.AppHome.ApplicationInitializationTemplate}"
         documentationContent=""
         effectiveThingPackage="PTC.SCA.SCO.AppHome.ApplicationInitializationPackage"
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:35.096+05:30"
         name="PTC.SCA.SCO.AppHome.ApplicationInitializationTemplate"
         projectName="PTC.SCA.SCO.Application Home Page"
         tags="PTC:sca-sco-applicationhomepage;PTC:sca-common;PTC:ThingTemplate"
         thingPackage="PTC.SCA.SCO.AppHome.ApplicationInitializationPackage"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="customerCompany"></AlertDefinitions>
                <AlertDefinitions
                 name="customerEmail"></AlertDefinitions>
                <AlertDefinitions
                 name="customerName"></AlertDefinitions>
                <AlertDefinitions
                 name="installationType"></AlertDefinitions>
                <AlertDefinitions
                 name="isFarasanGaviUpgrade"></AlertDefinitions>
            </AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isLogged="false"
                     aspect.isPersistent="true"
                     aspect.isReadOnly="false"
                     baseType="STRING"
                     category=""
                     description="Company of the customer entered during installation"
                     isLocalOnly="false"
                     name="customerCompany"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isLogged="false"
                     aspect.isPersistent="true"
                     aspect.isReadOnly="false"
                     baseType="STRING"
                     category=""
                     description="Email of the customer entered during installation"
                     isLocalOnly="false"
                     name="customerEmail"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isLogged="false"
                     aspect.isPersistent="true"
                     aspect.isReadOnly="false"
                     baseType="STRING"
                     category=""
                     description="Name of the customer entered during installation"
                     isLocalOnly="false"
                     name="customerName"
                     ordinal="2"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.defaultValue="manufacturing"
                     aspect.isLogged="false"
                     aspect.isPersistent="true"
                     aspect.isReadOnly="false"
                     baseType="STRING"
                     category=""
                     description="The property is used as a flag to remember the type of installation (ex. manufacturing or service)"
                     isLocalOnly="false"
                     name="installationType"
                     ordinal="5"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.defaultValue="true"
                     aspect.isLogged="false"
                     aspect.isPersistent="true"
                     aspect.isReadOnly="false"
                     baseType="BOOLEAN"
                     category=""
                     description="The property uses as a flag to control the execution of updateRelatedLinesAndSitesForAllAssetsAndLines service after upgrade."
                     isLocalOnly="false"
                     name="isFarasanGaviUpgrade"
                     ordinal="1"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Sets the default provider name value on all assets which implement the remote accessible thing shape."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetupRemoteAccessProviderName">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Upgrade existing status expressions and orders of execution to current syntax and ordering, as needed."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="UpgradeStatusExpressions">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetupRemoteAccessProviderName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var REMOTE_ACCESSIBLE = "RemoteAccessible";
                                        var REMOTE_THING_WITH_TUNNELS_AND_FILE_TRANSFER = "RemoteThingWithTunnelsAndFileTransfer";
                                        var THINGWORX_INTERNAL_REMOTE_ACCESS_PROVIDER = "ThingworxInternalRemoteAccessProvider";
                                        
                                        var allThings = Resources["SearchFunctions"].SearchThingsByShape({thingShape: REMOTE_ACCESSIBLE});
                                        if (allThings) {
                                            try {
                                                for (var i = 0; i < allThings.length; i++) {
                                                    var thingId = allThings.rows[i].name;
                                                    var thing = Things[thingId];
                                                    if (thing) {
                                                        //only set asset with tunnels configured
                                                        if (isTunnelingConfigured(thing) === true) {
                                                            if (thing.providerName === null || thing.providerName === undefined || thing.providerName === "" ) {
                                                                thing.providerName = THINGWORX_INTERNAL_REMOTE_ACCESS_PROVIDER;  
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (err) {
                                                logger.error(err);
                                            }
                                        }
                                        
                                        function isTunnelingConfigured(thing) {
                                            if (thing.IsDerivedFromTemplate({thingTemplateName: REMOTE_THING_WITH_TUNNELS_AND_FILE_TRANSFER})) {
                                                var tunnels = thing.GetTunnels();  
                                                if (tunnels && tunnels.length > 0) {
                                                    var tunnelStatus = thing.GetTunnelStatus();         
                                                    if (tunnelStatus && tunnelStatus.length > 0) {
                                                        return tunnelStatus[0].enabled;
                                                    }
                                                }
                                            }
                                            return false;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="UpgradeStatusExpressions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var EXPECTED_EXPRESSIONS_BLANK = {
                                            '0': {expression: 'true', orderOfExecution: 0},
                                            '3': {expression: 'NOT "IS_SCHEDULED" OR ("IS_DATA_OK" AND (E_EXP))', orderOfExecution: 1},
                                            '1': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 2},
                                            '2': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 3},
                                            '4': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 4},
                                            '5': {expression: 'true', orderOfExecution: 5}
                                        };
                                            
                                        var EXPECTED_EXPRESSIONS_NOT_BLANK = {
                                            '0': {expression: 'false', orderOfExecution: 0},
                                            '3': {expression: 'NOT "IS_SCHEDULED" OR ("IS_DATA_OK" AND NOT (P_EXP) AND (E_EXP))', orderOfExecution: 1},
                                            '1': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 2},
                                            '2': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 3},
                                            '4': {expression: '"IS_DATA_OK" AND (E_EXP)', orderOfExecution: 4},
                                            '5': {expression: 'true', orderOfExecution: 5}
                                        };
                                        
                                        // update things with thing shape of "PTC.SCA.SCO.StatusThingShape"
                                        var allThings = Resources["SearchFunctions"].SearchThingsByShape({thingShape: "PTC.SCA.SCO.StatusThingShape"});
                                        
                                        if (allThings) {
                                             for (var thingCount = 0; thingCount < allThings.length; thingCount++) {
                                                 var thingId = allThings.rows[thingCount].name;
                                                 var thing = Things[thingId];
                                                 if (thing) {
                                                     upgradeStatusExpressions(thingId);
                                                 }
                                             }
                                        }
                                        
                                        function upgradeStatusExpressions(thingId) {
                                            
                                            var resultStatusExpresions = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({dataShapeName:"PTC.Factory.EquipmentStatusDataShape"});
                                            try {
                                                var thing = Things[thingId];        
                                                var statusValue = thing.status;
                                        
                                                var statusExpressions = thing.GetStatusExpressions();
                                                if (statusExpressions) {
                                                    for (var i = 0; i < statusExpressions.length; i++) {
                                                        var id = statusExpressions[i].id;
                                                        var orderOfExecution = statusExpressions[i].orderOfExecution;
                                                        var expression = statusExpressions[i].expression.trim();
                                                        var upgradeExpression = ""; 
                                                        var precedingExpression = "";
                                                        if (!isUpgraded(id, expression)) {
                                                            var expectedOrderIndex = EXPECTED_EXPRESSIONS_BLANK[3].orderOfExecution;
                                                            if (id === '3' && expectedOrderIndex > 0 && expectedOrderIndex < i) {
                                                                precedingExpression = getPrecedingExpressions(statusExpressions, expectedOrderIndex, i - 1, thingId); 
                                                            }
                                                            upgradeExpression = getUpgradeExpression(id, statusValue, expression, precedingExpression, thingId);
                                                        }
                                                        addExpressionRow(resultStatusExpresions, id, orderOfExecution, expression, upgradeExpression);
                                                    } 
                                                    updateOrdersForPlannedDowntime(resultStatusExpresions);
                                                }        
                                                Things["PTC.Factory.StatusExpressionUtils"].SaveStatus({statusTable: resultStatusExpresions, thingId: thingId});
                                        
                                                // Set value of isConfigured property with the actual value of property EXP_E_NotConfigured
                                                // Then set value of property EXP_E_NotConfigured as NOT "<thingId>:isConfigured"
                                                if (thing.EXP_E_NotConfigured.toLowerCase() == 'true' || thing.EXP_E_NotConfigured.toLowerCase() == 'false') {
                                                	thing.isConfigured = (thing.EXP_E_NotConfigured.toLowerCase() == 'false');
                                                	thing.EXP_E_NotConfigured = 'NOT "' + thing.name + ':isConfigured"';
                                                }
                                        
                                                // Add a first entry in the StatusValue table
                                                var statusManagerThingName = Things["PTC.Factory.LaunchPointConfigurationThing"].GetStatusManagerThingName();
                                                Things[statusManagerThingName].CreateStateValueForThing({
                                                	"thingName": thingId
                                                });
                                            } catch (err) {
                                                logger.error(err);
                                            }
                                        }
                                        
                                        function addExpressionRow(tableExpresions, id, orderOfExecution, expression, upgradeExpression) {
                                            var newExpressionEntry = new Object();
                                            newExpressionEntry.stateIndex = parseInt(id) + 1;
                                            newExpressionEntry.order = orderOfExecution;
                                            newExpressionEntry.expression = upgradeExpression.length > 0? upgradeExpression: expression;
                                            tableExpresions.AddRow(newExpressionEntry);
                                        }
                                        
                                        function isUpgraded(id, expression) {
                                            var result = false;
                                            if (id != '0' && id != '5') {
                                                var expressionBlankFormat = formatToRegex(EXPECTED_EXPRESSIONS_BLANK[id].expression);
                                                var expressionNotBlankFormat = formatToRegex(EXPECTED_EXPRESSIONS_NOT_BLANK[id].expression);
                                                result = expression.match(expressionBlankFormat) || expression.match(expressionNotBlankFormat);
                                            }
                                            return result;
                                        }
                                        
                                        function formatToRegex(expression) {
                                        	return new RegExp(expression.replace(/\(/g, '\\(').replace(/\)/g, '\\)').replace(/E_EXP|P_EXP/g, '.+'));
                                        }
                                        
                                        function getPrecedingExpressions(statusExpressions, startIndex, endIndex, thingId) {
                                            var precedingExpressions = "";
                                            if (startIndex === endIndex) {
                                                precedingExpressions = statusExpressions[startIndex].expression.trim();
                                            } else if (startIndex < endIndex) {
                                                for (var i = startIndex; i <= endIndex; i++) { 
                                                    var expression = statusExpressions[i].expression.trim();
                                                    if (expression.length > 0) {
                                                        var id = statusExpressions[i].id;
                                                        if (precedingExpressions.length === 0) {
                                                            precedingExpressions = '(' + expression + ')';
                                                        } else {
                                                            precedingExpressions = precedingExpressions + ' OR (' + expression + ')';
                                                        }
                                                    }
                                                }
                                            }
                                            return precedingExpressions;
                                        }
                                        
                                        function getUpgradeExpression(id, statusValue, expression, precedingExpression, thingId) {
                                            var upgradeExpression = "";
                                            var isBlankExpression = expression.length > 0? false: true;
                                            switch (id) {
                                                case '0':
                                                case '5':
                                                    if (isBlankExpression) {
                                                        upgradeExpression = EXPECTED_EXPRESSIONS_BLANK[id].expression;
                                                    }
                                                    break;
                                                case '1':
                                                case '2':
                                                case '3':
                                                case '4':
                                                    if (isBlankExpression) {
                                                        upgradeExpression = EXPECTED_EXPRESSIONS_BLANK[id].expression.replace('E_EXP', 'false');
                                                    } else {
                                                        if (id === '3' && precedingExpression.length > 0) {
                                                            upgradeExpression = EXPECTED_EXPRESSIONS_NOT_BLANK[id].expression.replace('P_EXP', precedingExpression).replace('E_EXP', expression);
                                                        } else {
                                                            upgradeExpression = EXPECTED_EXPRESSIONS_BLANK[id].expression.replace('E_EXP', expression);
                                                        }
                                                    }
                                                    break;
                                            } 
                                            return upgradeExpression;   
                                        }
                                        
                                        function updateOrdersForPlannedDowntime(tableExpresions) {
                                            var currentOrderIndex = -1;
                                            for (var i = 0; i < tableExpresions.length; i++) {
                                                var id = tableExpresions[i].stateIndex - 1;
                                                if (id == '3') {
                                                    currentOrderIndex = i;
                                                }
                                            }   
                                            var expectedOrderIndex = EXPECTED_EXPRESSIONS_BLANK[3].orderOfExecution; 
                                            var needChangeOrder = (expectedOrderIndex > 0 && expectedOrderIndex < currentOrderIndex) ? true: false;  
                                            if (needChangeOrder) {
                                                for (i = 0; i < tableExpresions.length; i++) {
                                                    var orderOfExecution = tableExpresions[i].order;
                                                    //update the order of planned down time
                                                    if (i == expectedOrderIndex) { 
                                                        tableExpresions[currentOrderIndex].order = orderOfExecution;
                                                    }
                                                    //move down the orders of the rest of statuses
                                                    if (i >= expectedOrderIndex && i < currentOrderIndex) {
                                                        tableExpresions[i].order = orderOfExecution + 1;
                                                    } 
                                                }
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <ImplementedShapes></ImplementedShapes>
            <SharedConfigurationTables></SharedConfigurationTables>
            <InstanceDesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility></Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
