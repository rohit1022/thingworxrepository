<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingTemplates>
        <ThingTemplate
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         baseThingTemplate="Scheduler"
         description="Template for the scheduler that triggers the CalculateKPIs and CalculateKPIElement services. Not editable. {PTC.SCA.SCO.KPISchedulerTemplate}"
         documentationContent=""
         effectiveThingPackage="SchedulerThing"
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:21.841+05:30"
         name="PTC.SCA.SCO.KPISchedulerTemplate"
         projectName="PTC.SCA.SCO.KPI"
         tags="PTC:sca-sco-kpi"
         thingPackage=""
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions>
                <ConfigurationTableDefinition
                 category="KPIs"
                 dataShapeName="PTC.SCA.SCO.KPISchedulerSettings"
                 description=""
                 isHidden="false"
                 isMultiRow="false"
                 name="CalculationSettings"
                 ordinal="0"
                 source="IMPORT"></ConfigurationTableDefinition>
            </ConfigurationTableDefinitions>
            <ConfigurationTables>
                <ConfigurationTable
                 description=""
                 isMultiRow="false"
                 name="CalculationSettings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="5"
                             aspect.friendlyName="PTC.SCA.SCO.KPIScheduler.KPICalculationRate"
                             aspect.isPrimaryKey="true"
                             baseType="INTEGER"
                             description="KPI Calculation Rate in minutes"
                             name="kpiCalculationRate"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="5"
                             aspect.friendlyName="PTC.SCA.SCO.KPIScheduler.KPIElementsCalculationRate"
                             aspect.isPrimaryKey="false"
                             baseType="INTEGER"
                             description="KPI Elements Calculation Rate in minutes"
                             name="kpiElementsCalculationRate"
                             ordinal="2"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <kpiCalculationRate>5</kpiCalculationRate>
                            <kpiElementsCalculationRate>5</kpiElementsCalculationRate>
                        </Row>
                    </Rows>
                </ConfigurationTable>
                <ConfigurationTable
                 description="General Settings"
                 isMultiRow="false"
                 name="Settings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="true"
                             baseType="BOOLEAN"
                             description="Automatically enable scheduler on startup"
                             name="enabled"
                             ordinal="0"></FieldDefinition>
                            <FieldDefinition
                             baseType="USERNAME"
                             description="User context in which to run event handlers"
                             name="runAsUser"
                             ordinal="0"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="0 0/1 * * * ?"
                             baseType="SCHEDULE"
                             description="Execution Schedule (Cron String)"
                             name="schedule"
                             ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <enabled>true</enabled>
                            <runAsUser>
                            <![CDATA[
                            Administrator
                            ]]>
                            </runAsUser>
                            <schedule>
                            <![CDATA[
                            0 0/1 * * * ?
                            ]]>
                            </schedule>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="lastKPIElementsCalculationTime"></AlertDefinitions>
                <AlertDefinitions
                 name="lastKPIsCalculationTime"></AlertDefinitions>
            </AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="PTC.SCA.SCO.DateMap"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category="KPIs"
                     description="Last KPI Elements calculation time"
                     isLocalOnly="false"
                     name="lastKPIElementsCalculationTime"
                     ordinal="4"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="PTC.SCA.SCO.DateMap"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category="KPIs"
                     description="Last KPI calculation time"
                     isLocalOnly="false"
                     name="lastKPIsCalculationTime"
                     ordinal="3"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Calculates all KPIs."
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CalculateKPIs">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Calculate all KPIs for Things with the specified time info."
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CalculateKPIsForTimeInfo">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTC.SCA.SCO.TimeInfo"
                             aspect.isRequired="false"
                             baseType="INFOTABLE"
                             description=""
                             name="TimeInfo"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Retrieves the KPI calculation rate."
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetKPICalculationRate">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Retrieves the KPIElement calculation rate."
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetKPIElementsCalculationRate">
                        <ResultType
                         baseType="NUMBER"
                         description="Retrieves the KPI elements calculation rate."
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Returns the KPIManager Thing configured in the application."
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetKPIManager">
                        <ResultType
                         baseType="THINGNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Retrieve all time information necessary for calculation, by default retrieve all related shift."
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTimeInfos">
                        <ResultType
                         aspect.dataShape="PTC.SCA.SCO.TimeInfo"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="KPIs"
                     description="Records the last calculation time for KPI elements or KPIs, for the specified shift. "
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetLastCalculationTime">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="calculationTime"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="GeneratedID"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CalculateKPIs">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var keys = [];
                                        var customLogger = logger.getLoggerContext().getLogger(logger.getName() + ".com.ptc.sca.sco.KPIScheduler.CalculateKPIs");
                                        var shiftManager = Things[Things["PTC.Factory.LaunchPointConfigurationThing"].GetShiftManagerThingName()];
                                        
                                        customLogger.debug("### Starting CalculateKPIs");
                                        
                                        var timeInfos = me.GetTimeInfos();
                                        
                                        if (timeInfos && timeInfos.getRowCount() > 0) {
                                            var tableLength = timeInfos.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                            	var timeInfo = timeInfos.rows[x];
                                             	var generatedID = timeInfo.GeneratedID;
                                               	calculate(generatedID, timeInfo);
                                        	}
                                        }
                                        
                                        cleanInfoTables();
                                        
                                        customLogger.debug("### End of CalculateKPIs ");
                                        
                                        function calculate(generatedID, currentTimeInfo) {
                                            keys.push(generatedID);
                                            customLogger.debug("	Calculation KPIs for  generatedID:" + generatedID);
                                        
                                            var params = {infoTableName : "InfoTable",dataShapeName : "PTC.SCA.SCO.TimeInfo"};
                                        		// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTC.SCA.SCO.TimeInfo)
                                            var singleTimeInfo = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            singleTimeInfo.AddRow(timeInfo);
                                        
                                        
                                            me.CalculateKPIsForTimeInfo({TimeInfo:singleTimeInfo});
                                        }
                                        
                                        function cleanupMap(scheduleIds, infoTable) {
                                            for (var x = 0; x < infoTable.rows.length; x++) {
                                                var row = infoTable.rows[x];
                                                var key = row.key;
                                                //Removing schedule ids that are not present anymore
                                                customLogger.debug("cleanupMap scheduleIds:" + scheduleIds + " key:" + key);
                                                if (scheduleIds.indexOf(key) < 0) {
                                                    customLogger.debug("removing scheduleIds:" + scheduleIds + " key:" + key);
                                                    infoTable.RemoveRow(x);
                                                    x--;
                                        	    }
                                            }
                                            return infoTable;
                                        }
                                        
                                        function cleanInfoTables() {
                                            me.lastKPIElementsCalculationTime = cleanupMap(keys, me.lastKPIElementsCalculationTime);
                                            me.lastKPIsCalculationTime = cleanupMap(keys, me.lastKPIsCalculationTime);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CalculateKPIsForTimeInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var customLogger = logger.getLoggerContext().getLogger(logger.getName() + ".com.ptc.sca.sco.KPIScheduler.CalculateKPIs");
                                        var lastKPIElementsCalculationTimeKey = "lastKPIElementsCalculationTime";
                                        var lastKPIsCalculationTimeKey = "lastKPIsCalculationTime";
                                        
                                        customLogger.trace("#####CalculateKPIsForTimeInfo Start");
                                        
                                        var shiftCollection = TimeInfo.getRow(0);
                                        var kpiManager = Things[me.GetKPIManager()];
                                        var startTime = shiftCollection.StartTimeDate;
                                        var endTime = shiftCollection.EndTimeDate;
                                        var generatedID = shiftCollection.GeneratedID;
                                        
                                        var lastKPIsCalculationTime = getDateFromMap(me.lastKPIsCalculationTime, generatedID);
                                        var lastKPIElementsCalculationTime = getDateFromMap(me.lastKPIElementsCalculationTime, generatedID);
                                        
                                        
                                        customLogger.debug("		lastKPIsCalculationTime[" + generatedID + "]       :" + lastKPIsCalculationTime);
                                        customLogger.debug("		lastKPIElementsCalculationTime[" + generatedID + "]:" + lastKPIElementsCalculationTime);
                                        
                                        
                                        customLogger.trace("KPIScheduler calculate kpi for : " + generatedID + " " + startTime + "  " + endTime);
                                        
                                        //Check if shift is ending if diff is less than a minute means shift is ending time to calculate
                                        var now = new Date();
                                        var shiftEnding = false;
                                        if ( endTime ){
                                        	shiftEnding = dateDifference(endTime, now) < (60*1000);
                                        }
                                        customLogger.trace("KPIScheduler calculate shiftEnding: " + shiftEnding);
                                        
                                        CalculateKPIElementsIfApplicable();
                                        CalculateKPIsIfApplicable();
                                        
                                        function CalculateKPIElementsIfApplicable() {
                                            var calculationRate = me.GetKPIElementsCalculationRate();
                                            var calculationRateInMillis = calculationRate * 60 * 1000;
                                            var needToTrigger = true;
                                            customLogger.trace("lastKPIElementsCalculationTime:" + lastKPIElementsCalculationTime);
                                            
                                            if (dateGreaterThan(lastKPIElementsCalculationTime, now, calculationRateInMillis) ||
                                                	shiftEnding) {
                                                customLogger.trace("Calculating KPIElement for Time" + startTime + " - " + endTime);
                                                var start = new Date().getTime();
                                                kpiManager.CalculateKPIElements({"TimeInfo":TimeInfo});
                                            
                                                var end = new Date().getTime();
                                                var time = end - start;
                                                customLogger.trace("CalculateKPIElements SetLastCalculationTime key[" + lastKPIElementsCalculationTimeKey + "]GeneratedID(" + generatedID + "): " + now + " ms");
                                                me.SetLastCalculationTime({
                                                    GeneratedID: generatedID /* STRING */,
                                                    propertyName: lastKPIElementsCalculationTimeKey /* STRING */,
                                                    calculationTime: now /* DATETIME */
                                                });
                                            } else {
                                                customLogger.trace("CalculateKPIElements Not in range skipping lastKPIElementsCalculationTime: " + lastKPIElementsCalculationTime + " calculationRateInMillis: " + calculationRateInMillis);
                                            }
                                        }
                                        
                                        function CalculateKPIsIfApplicable() {
                                            var calculationRate = me.GetKPICalculationRate();
                                            var calculationRateInMillis = calculationRate * 60 * 1000;
                                            var difference = null;
                                            
                                            if (lastKPIElementsCalculationTime == null) {
                                              customLogger.trace(" Skipping KPIs Calculation because its the begining of the shift for Time :" + startTime + " - " + endTime);
                                            } else {
                                                if (lastKPIElementsCalculationTime != null &&
                                                        (dateGreaterThan(lastKPIsCalculationTime, now, calculationRateInMillis) ||
                                                         shiftEnding)) {
                                                    var start = new Date().getTime();
                                                    customLogger.trace(" Calculating KPIs for Time :" + startTime + " - " + endTime);
                                                    kpiManager.CalculateKPIs({"TimeInfo":TimeInfo});
                                        
                                                    var end = new Date().getTime();
                                                    var time = end - start;
                                        
                                                    customLogger.trace("CalculateKPIs :" + time + " ms");
                                                    customLogger.trace("CalculateKPIElements SetLastCalculationTime key[" + lastKPIsCalculationTimeKey + "]GeneratedID(" + generatedID + "):" + now + " ms");
                                        
                                                    me.SetLastCalculationTime({
                                                        GeneratedID: generatedID /* STRING */,
                                                        propertyName: lastKPIsCalculationTimeKey /* STRING */,
                                                        calculationTime: now /* DATETIME */
                                                    });
                                                } else {
                                                        customLogger.trace("CalculateKPIs Not in range skipping lastKPIsCalculationTime: " + lastKPIsCalculationTime + " calculationRateInMillis:" + calculationRateInMillis);
                                                }
                                            }
                                        }
                                        
                                        
                                        function dateGreaterThan(calculatedDate,dateToCompare,calculationRateInMillis){
                                            var greaterThan = true;
                                            if (calculatedDate != null) {
                                                var lastCalculatedDate = new Date(calculatedDate.getTime());
                                                lastCalculatedDate.setMilliseconds(0);
                                                lastCalculatedDate.setSeconds(0);
                                        
                                                var dateNow = new Date(dateToCompare.getTime());
                                                dateNow.setMilliseconds(0);
                                                dateNow.setSeconds(0);
                                                difference = dateDifference(dateNow, lastCalculatedDate);
                                                greaterThan = difference >= calculationRateInMillis;
                                            }
                                            return greaterThan;
                                        }
                                        
                                        function getDateFromMap(infoTable, key) {
                                        	var output = null;
                                            if (infoTable) {
                                                var tmp =  infoTable.Find({"key":key});
                                                if (tmp && tmp.date) {
                                                	output = tmp.date;
                                                }
                                            }
                                            return output;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetKPICalculationRate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var settings = me.GetConfigurationTable({
                                            tableName: "CalculationSettings"
                                        });
                                        
                                        result = settings.rows[0].kpiCalculationRate;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetKPIElementsCalculationRate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var settings = me.GetConfigurationTable({
                                            tableName: "CalculationSettings"
                                        });
                                        
                                        result = settings.rows[0].kpiElementsCalculationRate;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetKPIManager">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = Things["PTC.Factory.LaunchPointConfigurationThing"].GetKPIManagerThingName();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTimeInfos">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var shiftManager = Things[Things["PTC.Factory.LaunchPointConfigurationThing"].GetShiftManagerThingName()];
                                        var DEFAULT_SCHEDULE_UID = "";
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "PTC.SCA.SCO.TimeInfo"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTC.SCA.SCO.TimeInfo)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        addTimeInfoForSchedule(DEFAULT_SCHEDULE_UID,result);
                                        addTimeInfoForNonDefaultSchedule(result);
                                        
                                        function addTimeInfoForNonDefaultSchedule(timeInfos) {
                                            //Retrieve All schedules
                                            var schedules =  shiftManager.GetShiftSchedules({
                                                filter: undefined /* JSON */,
                                                offset: undefined /* INTEGER */,
                                                limit: undefined /* INTEGER */
                                            });
                                        
                                            logger.debug("Number of schedules found excluding default: " + schedules.getRowCount());
                                            //Loop for each schedules
                                            var tableLength = schedules.rows.length;
                                            for (var x = 0; x < tableLength; x++) {
                                                var row = schedules.rows[x];
                                                var uid = row.UID;
                                                addTimeInfoForSchedule(uid,timeInfos);
                                            }
                                        }
                                        
                                        function addTimeInfoForSchedule(scheduleUID,timeInfos) {
                                            var currentTimeInfo = shiftManager.GetCurrentShiftInfoFromShiftSchedule({
                                                ShiftScheduleUID: scheduleUID /* STRING */
                                            });
                                        
                                            if (currentTimeInfo && currentTimeInfo.getRowCount() > 0) {
                                                var row = currentTimeInfo.rows[0];
                                                timeInfos.AddRow(row);
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetLastCalculationTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Add values or override if not present
                                        var valueFound = false;
                                        var infoTable = me[propertyName];
                                        if (infoTable) {
                                        	var values = infoTable.Find({"key":GeneratedID}); 
                                            if (values) {
                                            	values.date = calculationTime;
                                                valueFound = true;
                                            } else {
                                                var newEntry = new Object();
                                                newEntry.date = calculationTime; // DATETIME
                                                newEntry.key = GeneratedID; // STRING [Primary Key]
                                                infoTable.AddRow(newEntry);
                                            }
                                        } else {
                                                var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "PTC.SCA.SCO.DateMap"
                                            };
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTC.SCA.SCO.DateMap)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                            // PTC.SCA.SCO.DateMap entry object
                                            var newITEntry = new Object();
                                            newITEntry.date = calculationTime; // DATETIME
                                            newITEntry.key = GeneratedID; // STRING [Primary Key]
                                        	infoTable.AddRow(newITEntry);
                                        }
                                        me[propertyName] = infoTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions>
                    <Subscription
                     description=""
                     enabled="true"
                     eventName="ScheduledEvent"
                     name="RunScheduler"
                     source=""
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="RunScheduler">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            logger.debug("PTC.SCA.SCO.KPIScheduler:CalculateKPIs");
                                            me.CalculateKPIs();
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                </Subscriptions>
            </ThingShape>
            <ImplementedShapes></ImplementedShapes>
            <SharedConfigurationTables></SharedConfigurationTables>
            <InstanceDesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="GetKPICalculationRate">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetConfigurationTable">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="PTC.Factory.MachineVisibility"
                     type="Organization"></Principal>
                </Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
