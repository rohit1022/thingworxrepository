<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className=""
         description="Thing Shape that holds all necessary properties and services for reading the configuration table for pre-action and post-action handling {ActionServiceCallerThingShape}"
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-03-26T23:56:00.336+05:30"
         name="PTC.SCA.SCO.ActionServiceCallerThingShape"
         projectName=""
         tags="PTC:OA;PTC:sco-common-layer">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CallServices">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTC.SCA.SCO.DataChange"
                         aspect.isRequired="true"
                         baseType="INFOTABLE"
                         description=""
                         name="DataChanges"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CallServices">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    if(logger.debugEnabled){
                                    	logger.debug("CallServices: "+ JSON.stringify(getJSON(DataChanges)));
                                    }
                                    
                                    var map = getMap(DataChanges);
                                    callServices(map);
                                    
                                    function getMap(datas) {
                                        var map = {};
                                        var tableLength = datas.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = datas.rows[x];
                                            var actionType = row.ActionType;
                                            if(!map.hasOwnProperty(actionType)){
                                                map[actionType] = {};
                                            }
                                            var actionMap = map[actionType];
                                            if(!actionMap.hasOwnProperty(row.DataShapeName)){
                                                actionMap[row.DataShapeName] = row.Values;
                                            }else{
                                                var valuesTableLength = row.Values.rows.length;
                                                for (var y=0; y < valuesTableLength; y++) {
                                                    var value = row.Values.rows[y];
                                                    actionMap[row.DataShapeName].AddRow(value);
                                                }
                                            }
                                        }
                                        return map;
                                    }
                                    
                                    function callServices(map){
                                        for (var action in map) {
                                            if (map.hasOwnProperty(action)) {
                                                var actionTypeMap = map[action];
                                                for (var dataShapeName in actionTypeMap) {
                                                    if (actionTypeMap.hasOwnProperty(dataShapeName)) {
                                                        var thingAndServiceNames = getThingAndServiceNames(dataShapeName, action);
                                                        for (var x=0; x < thingAndServiceNames.length; x++) {
                                                            var thingName = thingAndServiceNames[x].ThingName;
                                                            var serviceName = thingAndServiceNames[x].ServiceName;
                                                            var thing = Things[thingName];
                                                            if (thing && typeof thing[serviceName] === "function") {
                                                                var row = {};
                                                                row.ActionType = action;
                                                                row.DataShapeName = dataShapeName;
                                                                row.Values = actionTypeMap[dataShapeName];
                                                                var infoTableParams = {
                                                                    infoTableName : "InfoTable",
                                                                    dataShapeName : "PTC.SCA.SCO.DataChange"
                                                                };
                                                                var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(infoTableParams);
                                                                infoTable.AddRow(row);
                                                                if(logger.debugEnabled){
                                                                    logger.debug("Call service:"+ thing.name + "." + serviceName + " params:" + JSON.stringify(getJSON(infoTable)));
                                                                }
                                                                thing[serviceName]({DataChanges:infoTable});
                                                            }else{
                                                                logger.warn("Service:"+ thing.name + "." + serviceName + " does not exist");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    function getThingAndServiceNames(dataShapeName, action) {
                                        var thingAndServices = [];
                                        var config = getConfigRows(dataShapeName, action);
                                        if(config !== null){
                                            var tableLength = config.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = config.rows[x];
                                                var thingAndService = {};
                                                var thingName = row.ThingName;
                                                var serviceName = row.ServiceName;
                                                logger.debug("getThingAndServiceName - Service name: " + serviceName);
                                                logger.debug("getThingAndServiceName - Thing name: " + thingName);
                                                if (thingName === undefined || thingName === null || thingName === "" || thingName.length === 0){
                                                    thingName = me.name;
                                                    logger.debug("getThingAndServiceName - Thing Name - use me: " + thingName);
                                                }
                                                thingAndService.ServiceName = serviceName;
                                                thingAndService.ThingName = thingName;
                                                thingAndServices[x] = thingAndService;
                                            }
                                    
                                        }
                                        return thingAndServices;
                                    }
                                    
                                    function getConfigRows(dataShapeName, action){
                                        var configTable = me.GetConfigurationTable({tableName: "ActionConfigurationSettings"});
                                        if(logger.debugEnabled){
                                            logger.debug("getConfigRows - config table: " + JSON.stringify(getJSON(configTable)));
                                        }
                                        var newInfoTable = cloneInfoTable(configTable);
                                        newInfoTable.Filter({DataShapeName:dataShapeName,Action:action});
                                        if(logger.debugEnabled){
                                            logger.debug("getConfigRows - filtered config table: " + JSON.stringify(getJSON(newInfoTable)));
                                        }
                                        return newInfoTable;
                                    }
                                    
                                    function cloneInfoTable(infoTable){
                                        var params = {
                                            t1 : infoTable
                                        };
                                        return Resources["InfoTableFunctions"].Clone(params);
                                    }
                                    
                                    function getJSON(infoTable){
                                        var params = {
                                            table: infoTable
                                        };
                                        return Resources["InfoTableFunctions"].ToJSON(params);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="PTC.Factory.MachineVisibility"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
