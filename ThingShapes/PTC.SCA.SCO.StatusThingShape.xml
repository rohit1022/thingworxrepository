<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className="com.ptc.sca.sco.status.StatusThingShape"
         description="Defines attributes used to track the operational status of an asset. {PTC.SCA.SCO.StatusThingShape}"
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-03-26T23:56:00.299+05:30"
         name="PTC.SCA.SCO.StatusThingShape"
         projectName="PTC.SCA.SCO.Status"
         tags="PTC:sca-sco-common;PTC:sca-common;PTC:ThingShape;PTC:sca-sco-status">
            <PropertyDefinitions>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="status display name in english localization"
                 isLocalOnly="false"
                 name="actualStatusDisplayName"
                 ordinal="19"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 6"
                 isLocalOnly="false"
                 name="EXP_E_Custom1"
                 ordinal="16"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 7"
                 isLocalOnly="false"
                 name="EXP_E_Custom2"
                 ordinal="17"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 8"
                 isLocalOnly="false"
                 name="EXP_E_Custom3"
                 ordinal="18"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 0"
                 isLocalOnly="false"
                 name="EXP_E_NotConfigured"
                 ordinal="14"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 3"
                 isLocalOnly="false"
                 name="EXP_E_PlannedDowntime"
                 ordinal="112"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 2"
                 isLocalOnly="false"
                 name="EXP_E_Running"
                 ordinal="113"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 5"
                 isLocalOnly="false"
                 name="EXP_E_Unavailable"
                 ordinal="15"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 4"
                 isLocalOnly="false"
                 name="EXP_E_UnplannedDowntime"
                 ordinal="115"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="For status 1"
                 isLocalOnly="false"
                 name="EXP_E_Warning"
                 ordinal="116"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="false"
                 aspect.isPersistent="true"
                 baseType="BOOLEAN"
                 category=""
                 description="To specify if expressions are configured"
                 isLocalOnly="false"
                 name="isConfigured"
                 ordinal="15"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeThreshold="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="-1"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 aspect.maximumValue="8"
                 aspect.minimumValue="-1"
                 baseType="INTEGER"
                 category=""
                 description="0 = Not Configured, 1 = Warning, 2 = Running, 3 = Planned Downtime, 4 = Unplanned Downtime, 5 = Unavailable, 6 = Custom1, 7 = Custom2, 8 = Custom3"
                 isLocalOnly="false"
                 name="status"
                 ordinal="120"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeThreshold="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="10"
                 aspect.isLogged="true"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 aspect.maximumValue="90"
                 aspect.minimumValue="0"
                 baseType="INTEGER"
                 category=""
                 description="How critical the status is, for sorting purposes."
                 isLocalOnly="false"
                 name="statusCriticality"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="0,1,2,3,4,5"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description="Order of the status, for sorting purposes"
                 isLocalOnly="false"
                 name="statusOrder"
                 ordinal="121"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="DATETIME"
                 category=""
                 description="The time stamp when the the current status was entered."
                 isLocalOnly="false"
                 name="statusTimestamp"
                 ordinal="2"></PropertyDefinition>
            </PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="This service returns the status id after an evaluation has been done."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CalculateStatus">
                    <ResultType
                     baseType="INTEGER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Here is where the customization of the status expressions and ordering should be implemented"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDefaultStatusExpressionsConfiguration">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.Status.ExpressionsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="This service will return the status configuration. Joins the content of Status Definitions and Status Expressions."
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatusConfiguration">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.Status.ConfigurationDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="This service will return the Status Definitions from the Launch Point Configuration."
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatusDefinitions">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.Status.DefinitionsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="This service will return the content of the thing property [statusExpressions] and the localization of statuses 'NOT CONFIGURED' and 'UNAVAILABLE'."
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatusExpressions">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.Status.ExpressionsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the Status Manager Thing configured in the application."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatusManager">
                    <ResultType
                     baseType="THINGNAME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Serviced used to implement the customization of the default status expressions and its ordering."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="IsConfigured">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CalculateStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = Things["PTC.Factory.StatusExpressionUtils"].CalculateStatus({thingId:me.name});
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDefaultStatusExpressionsConfiguration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Implementing this service is a two-step process.
                                    
                                    // The first step creates an empty infotable of the correct datashape:
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({dataShapeName : "PTC.SCA.SCO.Status.ExpressionsDataShape"});
                                    
                                    // The second step populates that infotable with state expressions in the desired order:
                                    // Status IDs, do not edit.
                                    var NOT_CONFIGURED = 0; var WARNING = 1; var RUNNING = 2; var PLANNED_DOWNTIME = 3; var UNPLANNED_DOWNTIME = 4;
                                    var CUSTOM1 = 6; var CUSTOM2 = 7; var CUSTOM3 = 8;
                                    // Status Expressions with corresponding IDs.
                                    
                                    addStatus(NOT_CONFIGURED, 'NOT "' + me.name + ':isConfigured"');
                                    addStatus(PLANNED_DOWNTIME, 'NOT "IS_SCHEDULED" OR ("IS_DATA_OK" AND (false))');
                                    addStatus(WARNING, '"IS_DATA_OK" AND ("HAS_ALERTS")');
                                    addStatus(RUNNING, '"IS_DATA_OK" AND (' + getExpressionForStatusRunning() + ')');
                                    addStatus(UNPLANNED_DOWNTIME, '"IS_DATA_OK" AND (false)');
                                    // addStatus(CUSTOM1, '"IS_DATA_OK" AND (false)');
                                    // addStatus(CUSTOM2, '"IS_DATA_OK" AND (false)');
                                    // addStatus(CUSTOM3, '"IS_DATA_OK" AND (false)');
                                    
                                    // The following helper functions are not essential, but aid in this particular implementation.
                                    
                                    // This function simplifies the syntax for adding an expression to the result.
                                    function addStatus(id, expression) {
                                        result.AddRow({"id":String(id), "expression": expression});
                                    }
                                    
                                    // This function returns the default expression for the Running status of an Asset or Line.
                                    function getExpressionForStatusRunning() {
                                        var isLine = Resources["PTC.Factory.CommonUtilities"].IsLine({thingId: me.name});
                                        var expressionForRunning = (isLine) ? '"ARE_ALL_CHILDREN_RUNNING"' : 'false';
                                        return expressionForRunning;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatusConfiguration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var statusDefinitions = me.GetStatusDefinitions();
                                    var statusExpressions = me.GetStatusExpressions();
                                    var statusConfiguration = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(
                                        {dataShapeName: "PTC.SCA.SCO.Status.ConfigurationDataShape" /* DATASHAPENAME */}
                                    );
                                    
                                    // joining the 2 tables (status definition and status expression)
                                    for (var i = 0; i < statusDefinitions.length; i++){
                                        var definitionRow = statusDefinitions.getRow(i);
                                        var expressionRow = statusExpressions.Find({id:definitionRow.id});
                                    
                                        if (expressionRow == null) {
                                            logger.error("Could not find status expressions for statusIndex : " + definitionRow.id);
                                            expressionRow = [];
                                            expressionRow["expression"] = "";
                                            expressionRow["orderOfExecution"] = 1;
                                        }
                                    
                                        statusConfiguration.AddRow({
                                            id:definitionRow.id,
                                            name:definitionRow.name,
                                            localizationToken:definitionRow.localizationToken,
                                            icon:definitionRow.icon,
                                            color:definitionRow.color,
                                            expression:expressionRow.expression,
                                            orderOfExecution:expressionRow.orderOfExecution,
                                            orderOfCriticality:definitionRow.orderOfCriticality,
                                            editableExpression:definitionRow.editableExpression
                                        });
                                    }
                                    
                                    statusConfiguration.Sort({name: "orderOfExecution", ascending: true});
                                    result = statusConfiguration;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatusDefinitions">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var table;
                                    
                                    var definitions = Things["PTC.SCA.SCO.StatusUtils"].GetStatusDefinitions({
                                        "thingName": me.name /* THINGNAME */,
                                        "actualStatusOnly": false /* BOOLEAN */,
                                        "enabledOnly": true /* BOOLEAN */
                                    });
                                    
                                    if (definitions != null && definitions.getRowCount() > 0) {
                                        table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName : "InfoTable",
                                            dataShapeName : "PTC.SCA.SCO.Status.DefinitionsDataShape"
                                        });
                                    
                                        for (var i = 0; i < definitions.getRowCount(); i++) {
                                            var definition = definitions.getRow(i);
                                            var row = {
                                                "color" : definition.color, // STRING
                                                "orderOfCriticality" : definition.criticalityOrder, // INTEGER
                                                "evaluationOrder" : definition.evaluationOrder, // INTEGER
                                                "icon" : definition.icon, // IMAGELINK
                                                "name" : definition.internalName, // STRING
                                                "id" : definition.statusIndex, // STRING [Primary Key]
                                                "localizationToken" : definition.localizationToken, // STRING
                                                "editableExpression" : definition.editableExpression // BOOLEAN
                                            };
                                            table.AddRow(row);
                                        }
                                        table.Sort({name: "orderOfExecution", ascending: true});
                                    } else {
                                        table = {
                                            "dataShape": {
                                                "fieldDefinitions": {
                                                    "color": {
                                                        "name": "color",
                                                        "description": "Color used for graphs",
                                                        "baseType": "STRING",
                                                        "ordinal": 5,
                                                        "aspects": {
                                                            "isPrimaryKey": false
                                                        }
                                                    },
                                                    "icon": {
                                                        "name": "icon",
                                                        "description": "Media Icon entity for the status",
                                                        "baseType": "IMAGELINK",
                                                        "ordinal": 4,
                                                        "aspects": {
                                                            "isPrimaryKey": false
                                                        }
                                                    },
                                                    "id": {
                                                        "name": "id",
                                                        "description": "Unique identifier of the status definition",
                                                        "baseType": "STRING",
                                                        "ordinal": 1,
                                                        "aspects": {
                                                            "isPrimaryKey": true
                                                        }
                                                    },
                                                    "localizationToken": {
                                                        "name": "localizationToken",
                                                        "description": "Localization token used to display the name of the status",
                                                        "baseType": "STRING",
                                                        "ordinal": 3,
                                                        "aspects": {
                                                            "isPrimaryKey": false
                                                        }
                                                    },
                                                    "name": {
                                                        "name": "name",
                                                        "description": "Unique name of the status definition",
                                                        "baseType": "STRING",
                                                        "ordinal": 2,
                                                        "aspects": {
                                                            "isPrimaryKey": false
                                                        }
                                                    },
                                                    "orderOfCriticality": {
                                                        "name": "orderOfCriticality",
                                                        "description": "Order used for sorting a status",
                                                        "baseType": "INTEGER",
                                                        "ordinal": 6,
                                                        "aspects": {}
                                                    },
                                                    "evaluationOrder": {
                                                        "name": "evaluationOrder",
                                                        "description": "Order used for sorting a status",
                                                        "baseType": "INTEGER",
                                                        "ordinal": 7,
                                                        "aspects": {}
                                                    },
                                                    "editableExpression": {
                                                        "name": "editableExpression",
                                                        "description": "BOOLEAN (default value is true) to specify if the status expression is editable in the configuration page",
                                                        "baseType": "BOOLEAN",
                                                        "ordinal": 8,
                                                        "aspects": {"defaultValue": true, "isPrimaryKey": false}
                                                    }
                                                }
                                            },
                                            "rows": [{
                                                    "color": "#a2a2a2",
                                                    "icon": "PTC.Factory.Status.NotConfigured",
                                                    "id": "0",
                                                    "localizationToken": "PTC.SCA.SCO.NotConfiguredStatus",
                                                    "name": "NotConfigured",
                                                    "orderOfCriticality": "10",
                                                    "evaluationOrder": "0",
                                                    "editableExpression": "false"
                                                }, {
                                                    "color": "#f2b927",
                                                    "icon": "PTC.Factory.Status.Warning",
                                                    "id": "1",
                                                    "localizationToken": "PTC.SCA.SCO.WarningStatus",
                                                    "name": "Warning",
                                                    "orderOfCriticality": "50",
                                                    "evaluationOrder": "2",
                                                    "editableExpression": "true"
                                                }, {
                                                    "color": "#3ec556",
                                                    "icon": "PTC.Factory.Status.Running",
                                                    "id": "2",
                                                    "localizationToken": "PTC.SCA.SCO.RunningStatus",
                                                    "name": "Running",
                                                    "orderOfCriticality": "20",
                                                    "evaluationOrder": "3",
                                                    "editableExpression": "true"
                                                }, {
                                                    "color": "#09aec6",
                                                    "icon": "PTC.Factory.Status.PlannedDowntime",
                                                    "id": "3",
                                                    "localizationToken": "PTC.SCA.SCO.PlannedDowntimeStatus",
                                                    "name": "PlannedDowntime",
                                                    "orderOfCriticality": "30",
                                                    "evaluationOrder": "1",
                                                    "editableExpression": "true"
                                                }, {
                                                    "color": "#ed684a",
                                                    "icon": "PTC.Factory.Status.UnplannedDowntime",
                                                    "id": "4",
                                                    "localizationToken": "PTC.SCA.SCO.UnplannedDowntimeStatus",
                                                    "name": "UnplannedDowntime",
                                                    "orderOfCriticality": "60",
                                                    "evaluationOrder": "4",
                                                    "editableExpression": "true"
                                                }, {
                                                    "color": "#a2a2a2",
                                                    "icon": "PTC.Factory.Status.Unavailable",
                                                    "id": "5",
                                                    "localizationToken": "PTC.SCA.SCO.UnavailableStatus",
                                                    "name": "Unavailable",
                                                    "orderOfCriticality": "40",
                                                    "evaluationOrder": "5",
                                                    "editableExpression": "false"
                                                }
                                            ]
                                        };
                                    }
                                    
                                    result = table;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatusExpressions">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /* START  LOGIC */
                                    
                                    var defaultStatusDefinitions = me.GetStatusDefinitions();
                                    defaultStatusDefinitions.Sort({name: "id", ascending: true});
                                    
                                    var defaultStatusExpressions = {};
                                    for (var x = 0; x < defaultStatusDefinitions.getRowCount(); x++) {
                                        var statusDefinition = defaultStatusDefinitions.getRow(x);
                                        defaultStatusExpressions[statusDefinition.id] = {
                                            id: statusDefinition.id,
                                            name: statusDefinition.name,
                                            expression: (statusDefinition.id.match(/^5$/))?true:'',
                                            orderOfExecution: statusDefinition.evaluationOrder
                                        };
                                    }
                                    
                                    var MAP_PROP_STATUS = {
                                        "0": me.EXP_E_NotConfigured,
                                        "1": me.EXP_E_Warning,
                                        "2": me.EXP_E_Running,
                                        "3": me.EXP_E_PlannedDowntime,
                                        "4": me.EXP_E_UnplannedDowntime,
                                        "5": true,
                                        "6": me.EXP_E_Custom1,
                                        "7": me.EXP_E_Custom2,
                                        "8": me.EXP_E_Custom3
                                    };
                                    
                                    var tableExpressions = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.SCA.SCO.Status.ExpressionsDataShape"
                                    });
                                    
                                    if (isStatusExpressionInitialized()) {
                                        setCurrentStatusExpressions(tableExpressions);
                                    } else {
                                        setDefaultExpressions(tableExpressions);
                                    }
                                    
                                    // make sure that ordering is correct for NOT CONFIGURED and UNAVAILABLE
                                    tableExpressions.Sort({name: "orderOfExecution", ascending: true});
                                    result = tableExpressions;
                                    /* END  LOGIC */
                                    
                                    
                                    
                                    /* START HELPER FUNCTONS */
                                    function setDefaultExpressions(tableExpressions) {
                                        var customizedStatusExpressions = me.GetDefaultStatusExpressionsConfiguration();
                                    
                                        validateCustomizedStatuses(customizedStatusExpressions);
                                    
                                        var UNAVAILABLE = 5;
                                        for (var statusIndex in defaultStatusExpressions) {
                                            var statusObject = defaultStatusExpressions[statusIndex];
                                            var customizedStatus = customizedStatusExpressions.Find({"id":statusIndex});
                                    
                                            if (!isEmpty(statusObject) && statusIndex != UNAVAILABLE) {
                                                var expression = isEmpty(customizedStatus) ? '' : customizedStatus.expression;
                                                statusObject.expression = isEmpty(expression) ? '' : expression;
                                                tableExpressions.AddRow(statusObject);
                                            }
                                        }
                                        tableExpressions.AddRow(defaultStatusExpressions[UNAVAILABLE]);
                                    
                                        // if no exception was fired then set default values for each status
                                        var statusOrder = [];
                                        tableExpressions.Sort({name: "orderOfExecution", ascending: true});
                                        for (var j = 0; j < tableExpressions.getRowCount(); j++) {
                                            var status = tableExpressions.getRow(j);
                                            me["EXP_E_" + status.name] = status.expression;
                                            statusOrder.push(status.id);
                                            status.orderOfExecution = j;
                                        }
                                        me.statusOrder = statusOrder.join(",");
                                    }
                                    
                                    function validateCustomizedStatuses(customizedStatusExpressions){
                                        var customizedStatusExpressionsSize = customizedStatusExpressions.getRowCount();
                                    
                                        if (customizedStatusExpressionsSize < 4) {
                                            throw "Please implement customization for a minimum of 4 statuses.";
                                        }
                                    
                                        if (customizedStatusExpressionsSize > 8) {
                                            throw "You can only customize 8 status expressions.";
                                        }
                                    
                                        var statusIndexList = [];
                                        for (var i = 0; i < customizedStatusExpressions.getRowCount(); i++) {
                                            var status = customizedStatusExpressions.getRow(i);
                                            var statusIndex = status.id;
                                            if (statusIndexList.indexOf(statusIndex) === -1) {
                                                statusIndexList.push(statusIndex);
                                            } else {
                                                throw "Duplicate status id [" + statusIndex + "] detected on status name ["+ status.name + "]";
                                            }
                                    
                                            if (!String(statusIndex).match(/^[0-4|6-8]$/)) {
                                                throw "Customization of status id [" + id + "] is not allowed.";
                                            }
                                        }
                                    }
                                    
                                    function isStatusExpressionInitialized() {
                                        return Boolean(me.EXP_E_NotConfigured || me.EXP_E_Warning || me.EXP_E_Running || me.EXP_E_PlannedDowntime ||
                                                 me.EXP_E_UnplannedDowntime || me.EXP_E_Unavailable || me.EXP_E_Custom1 || me.EXP_E_Custom2 ||
                                                 me.EXP_E_Custom3 || me.status !== -1 || me.isConfigured);
                                    }
                                    
                                    function setCurrentStatusExpressions(tableExpressions) {
                                        if (!me.statusOrder) {
                                            me.statusOrder = getDefaultEvaluationOrder();
                                        }
                                    
                                        if (!me.statusOrder.match(/5/)) {
                                            me.statusOrder = me.statusOrder + ",5";
                                        }
                                    
                                        var statuses = me.statusOrder.split(",");
                                        var allowedStatuses = getAllowedStatuses();
                                        if (!haveSameStatuses(statuses, allowedStatuses)) {
                                            statuses = synchronizeStatuses(statuses, allowedStatuses);
                                        }
                                    
                                        for (var i = 0; i < statuses.length; i++) {
                                           var id = statuses[i];
                                           var statusObject = defaultStatusExpressions[id];
                                           statusObject.expression = MAP_PROP_STATUS[id];
                                           statusObject.orderOfExecution = i;
                                           tableExpressions.AddRow(statusObject);
                                        }
                                    }
                                    
                                    function isEmpty(value) {
                                        return (value === null || value === undefined || value === '');
                                    }
                                    
                                    function getDefaultEvaluationOrder () {
                                        defaultStatusDefinitions.Sort({name: "evaluationOrder", ascending: true});
                                        var statusOrder = [];
                                        for (var x = 0; x < defaultStatusDefinitions.getRowCount(); x++) {
                                            var statusDefinition = defaultStatusDefinitions.getRow(x);
                                            var evaluationOrder = statusDefinition["evaluationOrder"];
                                            statusOrder.push(evaluationOrder);
                                        }
                                        return statusOrder.join(",");
                                    }
                                    
                                    function synchronizeStatuses(currentStatuses, allowedStatuses) {
                                        currentStatuses = removeExtraStatuses(currentStatuses, allowedStatuses);
                                        currentStatuses = appendMissingStatuses(currentStatuses, allowedStatuses);
                                        return currentStatuses;
                                    }
                                    
                                    function haveSameStatuses(arr1 , arr2) {
                                        if (arr1.length !== arr2.length) {
                                            return false;
                                        }
                                    
                                        for (var i = 0; i < arr1.length; i++) {
                                            if (arr2.indexOf(arr1[i]) === -1){
                                                return false;
                                            }
                                        }
                                        return true;
                                    }
                                    
                                    function getAllowedStatuses() {
                                        var allowedStatuses = [];
                                        for (var i = 0; i < defaultStatusDefinitions.getRowCount(); i++) {
                                            var statusId = defaultStatusDefinitions.getRow(i).id;
                                            allowedStatuses.push(statusId);
                                        }
                                        return allowedStatuses;
                                    }
                                    
                                    function removeExtraStatuses(currentStatuses, allowedStatuses) {
                                        return currentStatuses.filter(function (i) {
                                            return allowedStatuses.indexOf(i) !== -1;
                                        });
                                    }
                                    
                                    function appendMissingStatuses(currentStatuses, allowedStatuses) {
                                    
                                        for (var i = 0; i < allowedStatuses.length; i++) {
                                            var statusId = allowedStatuses[i];
                                            if(currentStatuses.indexOf(statusId) === -1) {
                                                var lastStatus = currentStatuses.pop();
                                                currentStatuses.push(statusId);
                                                currentStatuses.push(lastStatus);
                                            }
                                        }
                                        return currentStatuses;
                                    }
                                    /* END HELPER FUNCTONS */
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatusManager">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: THINGNAME
                                    var result = Things["PTC.Factory.LaunchPointConfigurationThing"].GetStatusManagerThingName();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="IsConfigured">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.isConfigured;
                                    
                                    // If marked as not configured, check if configured now
                                    if (!result) {
                                        // Since the expected OOTB expressions are not yet defined in the configuration, defining them here
                                        var EXPECTED_CONFIGURATION = getExpectedConfiguration();
                                    
                                        result = isConfigured();
                                    
                                        // If now configured, set isConfigured to true
                                        if (result) {
                                        	try {
                                        		me.isConfigured = true;
                                        	} catch (err) {
                                        		logger.error(err);
                                        	}
                                        	triggerKpiCalculations();
                                        }
                                    }
                                    
                                    /** START HELPER FUNCTIONS **/
                                    function isConfigured() {
                                        if (me.status > 0) {
                                            return true;
                                        }
                                    
                                        var tableStatus = me.GetStatusExpressions();
                                    
                                        if (tableStatus == null || tableStatus.length === 0) {
                                            return false;
                                        }
                                    
                                        for (var i = 0; i < tableStatus.length; i++) {
                                            var id = tableStatus[i].id;
                                            var expression = tableStatus[i].expression;
                                            expression = (expression == null) ? "" : expression.toString();
                                            var orderOfExecution = tableStatus[i].orderOfExecution.toString();
                                            var expectedExpression = new RegExp(EXPECTED_CONFIGURATION[id].expression, 'g');
                                            var expectedOrderOfExecution = new RegExp(EXPECTED_CONFIGURATION[id].evaluationOrder, 'g');
                                    
                                            if (!expression.match(expectedExpression) || !orderOfExecution.match(expectedOrderOfExecution)) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    }
                                    
                                    function getExpressionForStatusRunning() {
                                        var isLine = Resources["PTC.Factory.CommonUtilities"].IsLine({"thingId": me.name});
                                        var expressionForRunning = (isLine) ? '"ARE_ALL_CHILDREN_RUNNING(:' + getEscapedThingName() + ')?"' : false;
                                        return expressionForRunning;
                                    }
                                    
                                    function getExpectedConfiguration() {
                                        var escapedName = getEscapedThingName();
                                    
                                        // Get actual status expressions and execution orders for that thing
                                        var defaultConfiguration = {
                                            "0": {expression: '^NOT "' + escapedName + ':isConfigured"$'},
                                            "3": {expression: '^NOT "IS_SCHEDULED" OR \\("IS_DATA_OK" AND \\(false\\)\\)$'},
                                            "1": {expression: '^"IS_DATA_OK" AND \\("HAS_ALERTS(:' + escapedName + ')?"\\)$'},
                                            "2": {expression: '^"IS_DATA_OK" AND \\(' + getExpressionForStatusRunning() + '\\)$'},
                                            "4": {expression: '^"IS_DATA_OK" AND \\(false\\)$'},
                                            "5": {expression: '^true$'},
                                            "6": {expression: '^$'},
                                            "7": {expression: '^$'},
                                            "8": {expression: '^$'}
                                        };
                                    
                                        // Get enabled status definitions from the configuration
                                        var defaultStatusDefinitions = Things["PTC.SCA.SCO.StatusUtils"].GetStatusDefinitions({
                                            "thingName": me.name /* THINGNAME */ ,
                                            "actualStatusOnly": false /* BOOLEAN */ ,
                                            "enabledOnly": true /* BOOLEAN */
                                        });
                                    
                                        // Sort enabled status definitions by evaluationOrder
                                        defaultStatusDefinitions.Sort({name: "evaluationOrder", ascending: true});
                                    
                                        // Compute the order of execution for these definitions
                                        for (var x = 0; x < defaultStatusDefinitions.getRowCount(); x++) {
                                            var statusDefinition = defaultStatusDefinitions.getRow(x);
                                            var statusIndex = statusDefinition.statusIndex;
                                            var evaluationOrder = statusDefinition.evaluationOrder;
                                            defaultConfiguration[statusIndex].evaluationOrder = x;
                                        }
                                    
                                        return defaultConfiguration;
                                    }
                                    
                                    //Escapes RegEx characters found in me.name
                                    function getEscapedThingName() {
                                        return me.name.replace(/[.+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
                                    }
                                    
                                    function triggerKpiCalculations() {
                                        // Calculate KPIs and KPI element values
                                        var isKpiShapeImplemented = me.ImplementsShape({
                                            thingShapeName: "PTC.SCA.SCO.KPIElementThingShape" /* THINGSHAPENAME */
                                        });
                                        if (isKpiShapeImplemented) {
                                            var kpiManagerThingName = Things["PTC.Factory.LaunchPointConfigurationThing"].GetKPIManagerThingName();
                                            me.CalculateKPIs({
                                                kpiManager: kpiManagerThingName
                                            });
                                            me.CalculateKPIElementValues({
                                                kpiManager: kpiManagerThingName
                                            });
                                        }
                                    }
                                    /** END HELPER FUNCTIONS **/
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="PTC.Factory.MachineVisibility"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="FactoryUsers"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
