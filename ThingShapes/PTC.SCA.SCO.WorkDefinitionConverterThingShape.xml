<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className=""
         description="Thing Shape that holds all necessary properties and services that converts processing resource information from MPMLink {PTC.SCA.SCO.WorkDefinitionConverterThingShape}"
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:15.914+05:30"
         name="PTC.SCA.SCO.WorkDefinitionConverterThingShape"
         projectName=""
         tags="PTC:OA">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="BatchConvertFromProcessPlanID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="BatchConvertFromProcessPlanIDContinuation">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="continuation"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ConvertFromProcessPlanId">
                    <ResultType
                     baseType="LONG"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ConvertFromProcessPlanID">
                    <ResultType
                     baseType="LONG"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DownloadAndStoreContent">
                    <ResultType
                     baseType="NOTHING"
                     description="result"
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="wdJson"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ExtractConsumedPartIdsFromWDJson">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="wdJson"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Gets the MaterialUse value based on the material use type."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMaterialUseValue">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="materialUse"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="IterativeConvertFromProcessPlanID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="IterativeConvertFromProcessPlanIDContinuation">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="continuation"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="MergeWDJsons">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="sourceWDJson"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="targetWDJson"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="StoreMDJson">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="mdJson"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="StoreWDJson">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="wdJson"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="TranslateODataBOMsToMDJsons">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="boms"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="TranslateODataBOPToWDJson">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="bop"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions>
                <EventDefinition
                 category=""
                 dataShape="PTC.SCA.SCO.WorkDefinition"
                 description=""
                 name="ConvertFromProcessPlanIDStatus"></EventDefinition>
            </EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="BatchConvertFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    };
                                    
                                    var getExecutionStatusUID = function(executionStatus) {
                                        if (logger.traceEnabled) {
                                            logger.trace("BatchConvertFromProcessPlanID::getExecutionStatusUID( " + executionStatus +")");
                                        }
                                    
                                        var wd_exec_status_enums = Things[getProductionOrderUtilsThingName()].GetWorkDefinitionExecutionStatuses();
                                        var wd_exec_status_row = wd_exec_status_enums.Find({"Name" : executionStatus});
                                        return wd_exec_status_row["UID"];
                                    };
                                    
                                    var storeProcessPlanInDB = function(processPlan, executionStatus) {
                                        if (logger.traceEnabled) {
                                            logger.trace("BatchConvertFromProcessPlanID::storeProcessPlanInDB(" + processPlan + ")");
                                        }
                                    
                                        var work_def = {};
                                        var oid = processPlan["ID"];
                                        var number = processPlan["Number"];
                                    
                                        work_def["ID"] = number;
                                        work_def["Name"] = processPlan["Name"];
                                        work_def["SequenceNumber"] = undefined;
                                    
                                        var category = processPlan["Category"];
                                        var numeric_category;
                                        switch (category) {
                                            case "production":
                                                numeric_category = 1;
                                                break;
                                            case "maintenance":
                                                numeric_category = 2;
                                                break;
                                            case "quality":
                                                numeric_category = 3;
                                                break;
                                            case "inventory":
                                                numeric_category = 4;
                                                break;
                                            case "mixed":
                                                numeric_category = 4;
                                                break;
                                            default:
                                                numeric_category = 1;
                                        }
                                        work_def["WorkType"] = numeric_category;
                                        work_def["Description"] = processPlan["Description"];
                                        work_def["LongDescription"] = processPlan["LongDescription"];
                                        work_def["Version"] = processPlan["Version"];
                                    
                                        if (!(executionStatus === undefined)) {
                                            work_def["ExecutionStatus"] = executionStatus;
                                        }
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinition"});
                                        infotable.AddRow(work_def);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitions({"WorkDefinitions": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var main = function(processPlanOID, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria) {
                                        logger.trace("BatchConvertFromProcessPlanID::main(" + processPlanOID + ")");
                                    
                                        /////////////
                                        // Phase I //
                                        /////////////
                                        var process_plan = me.GetProcessPlanByID({
                                            "processPlanId": processPlanOID,
                                            "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                            "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria});
                                    
                                        if (isNull(process_plan)) {
                                            return null;
                                        }
                                    
                                        var execution_status = getExecutionStatusUID("Building");
                                        var wd_uid = storeProcessPlanInDB(process_plan, execution_status);
                                    
                                        try {
                                            ///////////////
                                            // Phase IIa //
                                            ///////////////
                                            var simple_bop = me.FetchBOPStructureFromProcessPlanID({
                                                "processPlanId": processPlanOID,
                                                "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                                "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria});
                                            var simple_wd_json = me.TranslateODataBOPToWDJson({"bop": simple_bop});
                                            simple_wd_json["UID"] = wd_uid;
                                            var stored_simple_wd_json = me.StoreWDJson({"wdJson": simple_wd_json});
                                    
                                            var continuation = {
                                                "processPlanOID": processPlanOID,
                                                "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                                "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                                "wd_uid": wd_uid,
                                                "stored_simple_wd_json": stored_simple_wd_json
                                            };
                                    
                                            return continuation;
                                        } catch (e) {
                                            var wd_exec_status_uid = getExecutionStatusUID("BuildingFailure");
                                            var work_def = {
                                                "UID" : wd_uid,
                                                "ExecutionStatus" : wd_exec_status_uid
                                            };
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinition"});
                                            infotable.AddRow(work_def);
                                            Things[getProductionOrderUtilsThingName()].UpdateWorkDefinitions({
                                                "WorkDefinitions": infotable
                                            });
                                            logger.error(e);
                                            throw e;
                                        }
                                    };
                                    
                                    var result = main(processPlanId, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="BatchConvertFromProcessPlanIDContinuation">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    };
                                    
                                    var updateExecutionStatus = function(workDefinitionUID, executionStatus) {
                                        logger.trace("BatchConvertFromProcessPlanIDContinuation::updateExecutionStatus(" + workDefinitionUID + ", " + executionStatus + ")");
                                    
                                        var wd_exec_status_enums = Things[getProductionOrderUtilsThingName()].GetWorkDefinitionExecutionStatuses();
                                        var wd_exec_status_row = wd_exec_status_enums.Find({"Name" : executionStatus});
                                        if (wd_exec_status_row) {
                                            var wd_exec_status_uid = wd_exec_status_row["UID"];
                                            var work_def = {
                                                "UID" : workDefinitionUID,
                                                "ExecutionStatus" : wd_exec_status_uid
                                            };
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({dataShapeName : "PTC.SCA.SCO.WorkDefinition"});
                                    
                                            infotable.AddRow(work_def);
                                    
                                            Things[getProductionOrderUtilsThingName()].UpdateWorkDefinitions({
                                                "WorkDefinitions": infotable
                                            });
                                    
                                            me.ConvertFromProcessPlanIDStatus(work_def);
                                        }
                                    };
                                    
                                    var main = function(continuation) {
                                        logger.trace("BatchConvertFromProcessPlanIDContinuation::main()");
                                    
                                        var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    
                                        var processPlanOID = continuation["processPlanOID"];
                                        var processPlanNavigationCriteria = continuation["processPlanNavigationCriteria"];
                                        var relatedAssemblyNavigationCriteria = continuation["relatedAssemblyNavigationCriteria"];
                                        var wd_uid = continuation["wd_uid"];
                                        var stored_simple_wd_json = continuation["stored_simple_wd_json"];
                                    
                                    
                                        ///////////////
                                        // Phase IIb //
                                        ///////////////
                                        var full_bop = me.BatchFetchBOPFromProcessPlanID({
                                            "processPlanId": processPlanOID,
                                            "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                            "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria});
                                        var full_wd_json = me.TranslateODataBOPToWDJson({"bop": full_bop});
                                        var merged_full_wd_json = me.MergeWDJsons({"targetWDJson": full_wd_json, "sourceWDJson": stored_simple_wd_json});
                                        var stored_merged_full_wd_json = me.StoreWDJson({"wdJson": merged_full_wd_json});
                                    
                                        ///////////////
                                        // Phase III //
                                        ///////////////
                                        /*
                                         * FACTORY-23849
                                         * Commenting out retrieval of BOMs (GetBOMs) -- will enable it via configuration after OA 8.5
                                         *
                                        var consumed_part_ids = me.ExtractConsumedPartIdsFromWDJson({"wdJson": stored_merged_full_wd_json});
                                    
                                        var part_ids = [];
                                        for (var part_id in consumed_part_ids) {
                                            part_ids.push(part_id);
                                        }
                                    
                                        var boms = me.BatchFetchBOMsFromPartIds({
                                            "partIds": { "value": part_ids },
                                            "navigationCriteria": relatedAssemblyNavigationCriteria
                                        });
                                    
                                        var md_jsons = me.TranslateODataBOMsToMDJsons({"boms": boms});
                                    
                                        for (var part_oid in md_jsons) {
                                            var uid = consumed_part_ids[part_oid];
                                            var md_json = md_jsons[part_oid];
                                            md_json["UID"] = uid;
                                            me.StoreMDJson({"mdJson": md_json});
                                        }
                                         */
                                    
                                        ///////////////
                                        // Phase IV ///
                                        ///////////////
                                        me.DownloadAndStoreContent({
                                            "wdJson": stored_merged_full_wd_json
                                        });
                                    
                                        return wd_uid;
                                    };
                                    
                                    var wd_uid = continuation["wd_uid"];
                                    try {
                                        main(continuation);
                                        updateExecutionStatus(wd_uid, "BuildingSuccess");
                                    } catch (e) {
                                        updateExecutionStatus(wd_uid, "BuildingFailure");
                                        logger.error(e);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ConvertFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var continuation = me.BatchConvertFromProcessPlanID({
                                        "processPlanId": processPlanId,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria
                                    });
                                    me.BatchConvertFromProcessPlanIDContinuation({ "continuation": continuation });
                                    var result = continuation["wd_uid"];
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ConvertFromProcessPlanId">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var pp_nc;
                                    if (!isNullOrEmpty(processPlanNavigationCriteriaId)) {
                                        pp_nc = { "ID": processPlanNavigationCriteriaId };
                                    }
                                    var ra_nc;
                                    if (!isNullOrEmpty(relatedAssemblyNavigationCriteriaId)) {
                                        ra_nc = { "ID": relatedAssemblyNavigationCriteriaId };
                                    }
                                    
                                    var result = me.ConvertFromProcessPlanID({
                                        "processPlanId": processPlanId,
                                        "processPlanNavigationCriteria": pp_nc,
                                        "relatedAssemblyNavigationCriteria": ra_nc
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DownloadAndStoreContent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    };
                                    
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var getNumbericFromWindchillOID = function(oid) {
                                        var oidElements = oid.split(":");
                                        return oidElements[oidElements.length - 1];
                                    };
                                    
                                    var cloneObjectStrippingTransientProperties = function(obj) {
                                        var cloned = {};
                                        for (var key in obj) {
                                            if (key.lastIndexOf("__", 0) === -1) {
                                                cloned[key] = obj[key];
                                            }
                                        }
                                        return cloned;
                                    };
                                    
                                    var downloadContent = function(rootWDUID, documentOID, url, filename) {
                                        var dest_path = "WorkDefinition/" + rootWDUID + "/" + getNumbericFromWindchillOID(documentOID);
                                        var config_table = me.GetConfigurationTable({
                                            tableName: "ConverterConfiguration"
                                        }).getFirstRow();
                                        var file_repository_thing_name = config_table.get("FileRepository");
                                        var downloaded_docs_infotable = Things[file_repository_thing_name].DownloadFromURL({
                                            "destPath": dest_path,
                                            "url": url,
                                            "filename": filename,
                                            "workDefinitionConverterThing": me.name
                                        });
                                    
                                        // Update content json with new downloaded URL
                                        var downloaded_docs = Resources["InfoTableFunctions"].ToJSON({
                                            "table": downloaded_docs_infotable
                                        });
                                        var downloaded_docs_rows = downloaded_docs["rows"];
                                        return downloaded_docs_rows[0];
                                    };
                                    
                                    var downloadDocs = function(rootWDUID, workDefinitionRelatedDocument, downloadedURLs) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::downloadDocs(" + workDefinitionRelatedDocument + ")");
                                        }
                                    
                                        var url_to_download = workDefinitionRelatedDocument["DocumentURL"];
                                        if (downloadedURLs.hasOwnProperty(url_to_download)) {
                                            var local_url = downloadedURLs[url_to_download];
                                            workDefinitionRelatedDocument["DocumentURL"] = local_url;
                                            return workDefinitionRelatedDocument;
                                        } else {
                                            var downloaded_content = downloadContent(rootWDUID, workDefinitionRelatedDocument["__OID"], url_to_download, workDefinitionRelatedDocument["DocumentName"]);
                                            if (downloaded_content) {
                                                var local_url = downloaded_content["downloadLink"];
                                                workDefinitionRelatedDocument["DocumentURL"] = local_url;
                                                downloadedURLs[url_to_download] = local_url;
                                                return workDefinitionRelatedDocument;
                                            } else {
                                                return undefined;
                                            }
                                        }
                                    };
                                    
                                    var downloadIllustrations = function(rootWDUID, illustrationsToDownload, downloadedURLs) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::downloadIllustrations(" + illustrationsToDownload + ")");
                                        }
                                    
                                        var url_to_download = illustrationsToDownload["IllustrationURL"];
                                        if (downloadedURLs.hasOwnProperty(url_to_download)) {
                                            var local_url = downloadedURLs[url_to_download];
                                            illustrationsToDownload["IllustrationURL"] = local_url;
                                            return illustrationsToDownload;
                                        } else {
                                            var downloadedIllustrationRow = downloadContent(rootWDUID, illustrationsToDownload["__OID"], url_to_download, illustrationsToDownload["IllustrationName"]);
                                            if (downloadedIllustrationRow) {
                                                var local_url = downloadedIllustrationRow["downloadLink"];
                                                illustrationsToDownload["IllustrationURL"] = local_url;
                                                downloadedURLs[url_to_download] = local_url;
                                                return illustrationsToDownload;
                                            } else {
                                                return undefined;
                                            }
                                        }
                                    };
                                    
                                    var storeDocsInDB = function(wdUID, workDefinitionRelatedDocument) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::storeDocsInDB(" + wdUID + ", " + workDefinitionRelatedDocument + ")");
                                        }
                                    
                                        workDefinitionRelatedDocument["WorkDefinitionUID"] = wdUID;
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({
                                            "dataShapeName": "PTC.SCA.SCO.WorkDefinitionRelatedDocument"
                                        });
                                    
                                        infotable.AddRow(workDefinitionRelatedDocument);
                                        Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionRelatedDocuments({
                                            "WorkDefinitionRelatedDocuments": infotable
                                        });
                                    };
                                    
                                    var storeIllustrationInDB = function(wdUID, illustration) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::storeIllustrationInDB(" + wdUID + ", " + illustration + ")");
                                        }
                                    
                                        illustration["WorkDefinitionUID"] = wdUID;
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({
                                            "dataShapeName": "PTC.SCA.SCO.WorkDefinitionIllustration"
                                        });
                                    
                                        infotable.AddRow(illustration);
                                        Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionIllustrations({
                                            "WorkDefinitionIllustrations": infotable
                                        });
                                    };
                                    
                                    var processWorkDefinitionIllustration = function(rootWDUID, downloadedURLs, wdUID, workDefinitionIllustration) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::processWorkDefinitionIllustration(" + rootWDUID + ", " + downloadedURLs + ", " + wdUID + ", " + workDefinitionIllustration + ")");
                                        }
                                    
                                        if (isNullOrEmpty(workDefinitionIllustration)) {
                                            return;
                                        }
                                    
                                        if (workDefinitionIllustration["__ShouldDownload"]) {
                                            var downloaded_illustration = downloadIllustrations(rootWDUID, workDefinitionIllustration, downloadedURLs);
                                            if (downloaded_illustration) {
                                                // Remove the transient properties (starts with "__") and store content to WorkDefinitionIllustrations table
                                                var to_be_stored_illustration = cloneObjectStrippingTransientProperties(downloaded_illustration);
                                                storeIllustrationInDB(wdUID, to_be_stored_illustration);
                                            }
                                        }
                                    };
                                    
                                    var processWorkDefinitionRelatedDocument = function(rootWDUID, downloadedURLs, wdUID, workDefinitionRelatedDocument) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::processWorkDefinitionRelatedDocument(" + rootWDUID + ", " + downloadedURLs + ", " + wdUID + ", " + workDefinitionRelatedDocument + ")");
                                        }
                                    
                                        if (isNullOrEmpty(workDefinitionRelatedDocument)) {
                                            return;
                                        }
                                    
                                        if (workDefinitionRelatedDocument["__ShouldDownload"]) {
                                            var downloaded_related_document = downloadDocs(rootWDUID, workDefinitionRelatedDocument, downloadedURLs);
                                            if (downloaded_related_document) {
                                                // Remove the transient properties (starts with "__") and store content to WorkDefinitionRelatedDocuments table
                                                var to_be_stored_document = cloneObjectStrippingTransientProperties(downloaded_related_document);
                                                storeDocsInDB(wdUID, to_be_stored_document);
                                            }
                                        }
                                    };
                                    
                                    var processWorkDefinitionLink = function(rootWDUID, downloadedURLs, workDefinitionLink) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::processWorkDefinitionLink(" + rootWDUID + ", " + downloadedURLs + ", " + workDefinitionLink + ")");
                                        }
                                    
                                        if (isNullOrEmpty(workDefinitionLink)) {
                                            return;
                                        }
                                    
                                        var wd = workDefinitionLink["__WorkDefinition"];
                                        processWorkDefinition(rootWDUID, downloadedURLs, wd);
                                    };
                                    
                                    var processWorkDefinition = function(rootWDUID, downloadedURLs, workDefinition) {
                                        if (logger.traceEnabled) {
                                            logger.trace("DownloadAndStoreContent::processWorkDefinition(" + rootWDUID + ", " + workDefinition + ")");
                                        }
                                    
                                        var wd_uid = workDefinition["UID"];
                                    
                                        var related_documents = workDefinition["__WorkDefinitionRelatedDocuments"];
                                        if (!isNullOrEmpty(related_documents)) {
                                            for (var i = 0; i < related_documents.length; i++) {
                                                processWorkDefinitionRelatedDocument(rootWDUID, downloadedURLs, wd_uid, related_documents[i]);
                                            }
                                        }
                                    
                                        var illustrations = workDefinition["__WorkDefinitionIllustrations"];
                                        if (!isNullOrEmpty(illustrations)) {
                                            for (var j = 0; j < illustrations.length; j++) {
                                                processWorkDefinitionIllustration(rootWDUID, downloadedURLs, wd_uid, illustrations[j]);
                                            }
                                        }
                                    
                                        var wd_links = workDefinition["__WorkDefinitionLinks"];
                                        if (!isNullOrEmpty(wd_links)) {
                                            for (var k = 0; k < wd_links.length; k++) {
                                                processWorkDefinitionLink(rootWDUID, downloadedURLs, wd_links[k]);
                                            }
                                        }
                                    };
                                    
                                    var main = function(wdJSON) {
                                        var downloaded_urls = {};
                                        var root_wd_uid = wdJson["UID"];
                                    
                                        processWorkDefinition(root_wd_uid, downloaded_urls, wdJson);
                                    };
                                    
                                    main(wdJson);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ExtractConsumedPartIdsFromWDJson">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var extractConsumedPartIdsFromMaterialDefinition = function(materialDefinition, partIdsToUIDs) {
                                        if (isNullOrEmpty(materialDefinition)) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromMaterialDefinition(undefined)");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromMaterialDefinition(" + materialDefinition + ")");
                                        }
                                    
                                        var part_id = materialDefinition["__OID"];
                                        if (isNullOrEmpty(part_id)) {
                                            return;
                                        }
                                    
                                        var uid = materialDefinition["UID"];
                                        if (isNullOrEmpty(uid)) {
                                            return;
                                        }
                                    
                                        partIdsToUIDs[part_id] = uid;
                                    };
                                    
                                    var extractConsumedPartIdsFromWorkDefinitionMaterialSpecifications = function(wdMatSpecs, partIdsToUIDs) {
                                        if (isNullOrEmpty(wdMatSpecs)) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinitionMaterialSpecifications(undefined)");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinitionMaterialSpecifications(" + wdMatSpecs + ")");
                                        }
                                    
                                        for (var i = 0; i < wdMatSpecs.length; ++i) {
                                            var wd_mat_spec = wdMatSpecs[i];
                                            var mat_def = wd_mat_spec["__MaterialDefinition"];
                                            extractConsumedPartIdsFromMaterialDefinition(mat_def, partIdsToUIDs);
                                        }
                                    };
                                    
                                    var extractConsumedPartIdsFromWorkDefinitionLinks = function(wdLinks, partIdsToUIDs) {
                                        if (isNullOrEmpty(wdLinks)) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinitionLinks(undefined)");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinitionLinks(" + wdLinks + ")");
                                        }
                                    
                                        for (var i = 0; i < wdLinks.length; ++i) {
                                            var wd_link = wdLinks[i];
                                            var wd = wd_link["__WorkDefinition"];
                                            if (isNullOrEmpty(wd)) {
                                                continue;
                                            }
                                    
                                            extractConsumedPartIdsFromWorkDefinition(wd, partIdsToUIDs);
                                        }
                                    };
                                    
                                    var extractConsumedPartIdsFromWorkDefinition = function(wdJson, partIdsToUIDs) {
                                        if (isNullOrEmpty(wdJson)) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinition(undefined)");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("ExtractConsumedPartIdsFromWDJson::extractConsumedPartIdsFromWorkDefinition(" + wdJson + ")");
                                        }
                                    
                                        var wd_mat_specs = wdJson["__WorkDefinitionMaterialSpecifications"];
                                        extractConsumedPartIdsFromWorkDefinitionMaterialSpecifications(wd_mat_specs, partIdsToUIDs);
                                    
                                        var wd_links = wdJson["__WorkDefinitionLinks"];
                                        extractConsumedPartIdsFromWorkDefinitionLinks(wd_links, partIdsToUIDs);
                                    };
                                    
                                    
                                    var result = {};
                                    extractConsumedPartIdsFromWorkDefinition(wdJson, result);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMaterialUseValue">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result;
                                        if (materialUse === "consumed") {
                                        	result = "1";
                                        } else if (materialUse === "produced") {
                                        	result = "2";
                                        } else if (materialUse === "destroyed") {
                                        	result = "4";
                                        } else if (materialUse === "disassembled") {
                                        	result = "5";
                                        } else if (materialUse === "operatedOn") {
                                        	result = "6";
                                        }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="IterativeConvertFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    };
                                    
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var storeIterationInDB = function(iteration, entityIds, executionStatus) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::storeIterationInDB(" + iteration + ")");
                                        }
                                    
                                        var work_def = {};
                                        var oid = iteration["ID"];
                                        var number = iteration["Number"];
                                    
                                        work_def["ID"] = number;
                                        work_def["Name"] = iteration["Name"];
                                        if (!(executionStatus === undefined)) {
                                            work_def["ExecutionStatus"] = executionStatus;
                                        }
                                    
                                        var op_label = iteration["OperationLabel"];
                                        if (op_label !== undefined && op_label !== null) {
                                            var seq_num = parseInt(op_label, 10);
                                            if (!isNaN(seq_num)) {
                                                work_def["SequenceNumber"] = seq_num;
                                            }
                                        }
                                    
                                        var category = iteration["Category"];
                                        var numeric_category;
                                        switch (category) {
                                            case "production":
                                                numeric_category = 1;
                                                break;
                                            case "maintenance":
                                                numeric_category = 2;
                                                break;
                                            case "quality":
                                                numeric_category = 3;
                                                break;
                                            case "inventory":
                                                numeric_category = 4;
                                                break;
                                            case "mixed":
                                                numeric_category = 4;
                                                break;
                                            default:
                                                numeric_category = 1;
                                        }
                                        work_def["WorkType"] = numeric_category;
                                        work_def["Description"] = iteration["Description"];
                                        work_def["LongDescription"] = iteration["LongDescription"];
                                        work_def["Version"] = iteration["Version"];
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinition"});
                                        infotable.AddRow(work_def);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitions({"WorkDefinitions": infotable});
                                        var uid = created.rows[0]["UID"];
                                    
                                        entityIds.push({"oid": oid, "wd_uid": uid, "number": number});
                                        return uid;
                                    };
                                    
                                    var storeLinkInDB = function(parentUID, childUID) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::storeLinkInDB(" + parentUID + ", " + childUID + ")");
                                        }
                                    
                                        var work_def_link = {
                                            "ParentUID": parentUID,
                                            "ChildUID": childUID
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionLink"});
                                        infotable.AddRow(work_def_link);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionLinks({"WorkDefinitionLinks": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var storeChildrenBOPInDB = function(parentUID, simpleBOP, entityIds) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::storeChildrenBOPInDB(" + parentUID + ", " + simpleBOP + ", " + entityIds + ")");
                                        }
                                    
                                        var simple_bop_children = simpleBOP["children"];
                                        for (var i = 0; i < simple_bop_children.length; ++i) {
                                            var simple_bop_child = simple_bop_children[i];
                                            var child_uid = storeIterationInDB(simple_bop_child["iteration"], entityIds);
                                    
                                            storeLinkInDB(parentUID, child_uid);
                                            storeChildrenBOPInDB(child_uid, simple_bop_child, entityIds);
                                        }
                                    };
                                    
                                    var getNumbericFromWindchillOID = function(oid) {
                                        var start = oid.lastIndexOf(":") + 1;
                                        var end = oid.length;
                                        return oid.substring(start, end);
                                    };
                                    
                                    var getExecutionStatusUID = function(executionStatus) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::getExecutionStatusUID( " + executionStatus +")");
                                        }
                                        var wd_exec_status_enums = Things[getProductionOrderUtilsThingName()].GetWorkDefinitionExecutionStatuses();
                                        var wd_exec_status_row = wd_exec_status_enums.Find({"Name" : executionStatus});
                                        return wd_exec_status_row["UID"];
                                    };
                                    
                                    var main = function(processPlanOID, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::main(" + processPlanOID + ", " + processPlanNavigationCriteria + ", " + relatedAssemblyNavigationCriteria + ")");
                                        }
                                    
                                        var simple_bop = me.FetchBOPFromProcessPlanID({
                                            "processPlanId": processPlanOID,
                                            "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                            "relatedAssemblyNavigationCriteria" : relatedAssemblyNavigationCriteria
                                        });
                                    
                                        if (simple_bop === undefined || simple_bop === null) {
                                            logger.warn("[ConvertFromProcessPlanOID] Could not find BOP for Process Plan: " + processPlanOID);
                                            return;
                                        }
                                    
                                        // keep track of entities to process/download the underlying components
                                        var entity_ids = [];
                                    
                                        // Store that root/parent iteration with execution status "Building"
                                        var execution_status = getExecutionStatusUID("Building");
                                        var wd_uid = storeIterationInDB(simple_bop["iteration"], entity_ids, execution_status);
                                    
                                        try {
                                            storeChildrenBOPInDB(wd_uid, simple_bop, entity_ids);
                                    
                                            var continuation = {
                                                "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                                "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                                "wd_uid": wd_uid,
                                                "entity_ids": entity_ids
                                            };
                                    
                                            return continuation;
                                        } catch (e) {
                                            var wd_exec_status_uid = getExecutionStatusUID("BuildingFailure");
                                            var work_def = {
                                                "UID" : wd_uid,
                                                "ExecutionStatus" : wd_exec_status_uid
                                            };
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinition"});
                                            infotable.AddRow(work_def);
                                            Things[getProductionOrderUtilsThingName()].UpdateWorkDefinitions({
                                                "WorkDefinitions": infotable
                                            });
                                            logger.error(e);
                                            throw e;
                                        }
                                    };
                                    
                                    var result = main(processPlanId, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="IterativeConvertFromProcessPlanIDContinuation">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    };
                                    
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var getNumbericFromWindchillOID = function(oid) {
                                        var start = oid.lastIndexOf(":") + 1;
                                        var end = oid.length;
                                        return oid.substring(start, end);
                                    };
                                    
                                    /**
                                    parameters
                                        docs:
                                            { "docs" : [
                                                {
                                                    "oid": "<Operation OID>",
                                                    "should_download" : true/false
                                                    "content": [
                                                        { "Label": "<filename-1>",  "URL": "<content-download-url-1>" },
                                                        { "Label": "<filename-2>",  "URL": "<content-download-url-2>" },
                                                        ...
                                                    }]
                                                },
                                                ...
                                            ]}
                                    
                                        oidToWdIds: { "<OID 1>": [ "<WorkDefinition UID 1>", ... ], "<OID 2>" : [ "<WorkDefinition UID 1>", ... ], ...  }
                                    
                                    result:
                                        [
                                            {
                                                "doc_oid": "<Operation OID>",
                                                "wd_uid": "<WorkDefinitionUID>",
                                                "filename": "<filename>",
                                                "url": "<download-url>"
                                            },
                                            ...
                                        ]
                                    **/
                                    var processDocuments = function(rootWdId, docs, oidToWDIds, downloadedURLs) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::processDocuments(" + rootWdId + ", " + docs + ", " + oidToWDIds+ ", " + downloadedURLs + ")");
                                        }
                                    
                                        var all_docs = [];
                                    
                                        for (var i = 0; i < docs.length; ++i) {
                                            var doc = docs[i];
                                            var entity_oid = doc["entity_oid"];
                                            var doc_oid = doc["doc_oid"];
                                            var content = doc["content"];
                                    
                                            var should_download = doc["should_download"];
                                            if (should_download) {
                                                var url_to_download = content["URL"];
                                                if (downloadedURLs.hasOwnProperty(url_to_download)) {
                                                    // FACTORY-23324: do not attempt to download twice from the same URL, instead reuse already downloaded files
                                                    var local_url = downloadedURLs[url_to_download];
                                    
                                                    var wd_uids = oidToWDIds[entity_oid];
                                                    for (var j = 0; j < wd_uids.length; ++j) {
                                                        var wd_uid = wd_uids[j];
                                                        all_docs.push({
                                                            "entity_oid": entity_oid,
                                                            "doc_oid": doc_oid,
                                                            "doc_number": doc["doc_number"],
                                                            "wd_uid": wd_uid,
                                                            "filename": getFileName(doc),
                                                            "url": local_url,
                                                            "type": doc["type"]
                                                        });
                                                    }
                                                } else {
                                                    // download content and store locally in File Repository
                                                    // dest_path is designed to be unique for a (root) WorkDefinition, and if many operations point to the same
                                                    // document instance, then we store it only once (2nd, 3rd, ... nth attempts to store the same document contents
                                                    // will just override the same location)
                                                    // in the case of missing 'doc_oid' (when dealing with Operation's representations), we will use the 'entity_oid'
                                                    var path_discriminator = doc_oid;
                                                    if (path_discriminator === undefined) {
                                                        path_discriminator = entity_oid;
                                                    }
                                    
                                                    var dest_path = "WorkDefinition/" + rootWdId + "/" + getNumbericFromWindchillOID(path_discriminator);
                                    
                                                    var config_table = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow();
                                                    var file_repository_thing_name = config_table.get("FileRepository");
                                                    var downloaded_docs_infotable = Things[file_repository_thing_name].DownloadFromURL({
                                                        "destPath": dest_path,
                                                        "url": content["URL"],
                                                        "filename": getFileName(doc),
                                                        "workDefinitionConverterThing": me.name
                                                    });
                                                    var downloaded_docs = Resources["InfoTableFunctions"].ToJSON({
                                                        "table": downloaded_docs_infotable
                                                    });
                                    
                                                    var downloaded_docs_rows = downloaded_docs["rows"];
                                                    if (downloaded_docs_rows.length > 0) {
                                                        var row = downloaded_docs_rows[0];
                                    
                                                        var local_url = row["downloadLink"];
                                                        downloadedURLs[url_to_download] = local_url;
                                    
                                                        var wd_uids = oidToWDIds[entity_oid];
                                                        for (var j = 0; j < wd_uids.length; ++j) {
                                                            var wd_uid = wd_uids[j];
                                                            all_docs.push({
                                                                "entity_oid": entity_oid,
                                                                "doc_oid": doc_oid,
                                                                "doc_number": doc["doc_number"],
                                                                "wd_uid": wd_uid,
                                                                "filename": getFileName(doc),
                                                                "url": local_url,
                                                                "type": doc["type"]
                                                            });
                                                        }
                                                    }
                                                }
                                            } else {
                                                // FACTORY-17923: we will not attempt to download, instead storing URL and Label as-is
                                                var row = { "name" : content["Label"], "downloadLink": content["URL"] };
                                                var wd_uids = oidToWDIds[entity_oid];
                                                for (var j = 0; j < wd_uids.length; ++j) {
                                                    var wd_uid = wd_uids[j];
                                                    all_docs.push({
                                                        "entity_oid": entity_oid,
                                                        "doc_oid": doc_oid,
                                                        "doc_number": doc["doc_number"],
                                                        "wd_uid": wd_uid,
                                                        "filename": row["name"],
                                                        "url": row["downloadLink"],
                                                        "type": doc["type"]
                                                    });
                                                }
                                            }
                                        }
                                    
                                        return all_docs;
                                    };
                                    
                                    var getFileName = function(doc) {
                                        if (doc["type"] === "THUMBNAIL") {
                                           return doc["name"];
                                        } else {
                                          var content = doc["content"];
                                          return content["Label"];
                                        }
                                    };
                                    /**
                                    docs:
                                        [
                                            {
                                                "doc_oid": "<Operation OID>",
                                                "wd_uid": "<WorkDefinitionUID>",
                                                "filename": "<filename>",
                                                "url": "<download-url>",
                                                "type": "THUMBNAIL/2D.."
                                            },
                                            ...
                                        ]
                                    **/
                                    var storeDocsInDB = function(docs) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeDocsInDB(" + docs + ")");
                                        }
                                    
                                        for (var i = 0; i < docs.length; ++i) {
                                            var doc = docs[i];
                                            var type = getDocumentType(doc["filename"]);
                                    
                                            var related_doc = {
                                                "ID": doc["doc_number"],
                                                "WorkDefinitionUID": doc["wd_uid"],
                                                "DocumentName": doc["filename"],
                                                "DocumentURL": doc["url"],
                                                "Type": type
                                            };
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionRelatedDocument"});
                                            infotable.AddRow(related_doc);
                                    
                                            Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionRelatedDocuments({"WorkDefinitionRelatedDocuments": infotable});
                                        }
                                    };
                                    
                                    var getDocumentType = function(filename){
                                        var type = Things[getProductionOrderUtilsThingName()].GetFileType({
                                            "FileName": filename
                                        });
                                    
                                        return type;
                                    };
                                    
                                    /**
                                    docs:
                                        [
                                            {
                                                "doc_oid": "<Operation OID>",
                                                "wd_uid": "<WorkDefinitionUID>",
                                                "filename": "<filename>",
                                                "url": "<download-url>",
                                                "type": <2D for image files, 3D for zip or pvz files>
                                            },
                                            ...
                                        ]
                                    **/
                                    var storeIllustrationsInDB = function(docs) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeIllustrationsInDB(" + docs + ")");
                                        }
                                    
                                        for (var i = 0; i < docs.length; ++i) {
                                            var doc = docs[i];
                                    
                                            var type = doc["type"];
                                            if(type === undefined || type === null) {
                                                type = getIllustrationType(doc["filename"]);
                                            }
                                    
                                            var related_illustration = {
                                                "ID": doc["doc_oid"],
                                                "WorkDefinitionUID": doc["wd_uid"],
                                                "IllustrationName": doc["filename"],
                                                "IllustrationURL": doc["url"],
                                                "Type": type
                                            };
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionIllustration"});
                                            infotable.AddRow(related_illustration);
                                    
                                            Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionIllustrations({"WorkDefinitionIllustrations": infotable});
                                        }
                                    };
                                    
                                    var getIllustrationType = function(filename){
                                        var type = Things[getProductionOrderUtilsThingName()].GetFileType({
                                            "FileName": filename
                                        });
                                    
                                        return type;
                                    };
                                    
                                    var isString = function(s) {
                                        return typeof s === 'string' || s instanceof String;
                                    };
                                    
                                    var getStandardCCsCategory = function(oDataStandardCC) {
                                        var category = oDataStandardCC["Category"];
                                        if (category) {
                                            if (isString(category)) {
                                                return category; // WRS 1.4
                                            } else {
                                                var category_display = category["Display"];
                                                return category_display; // post (and incl.) WRS 1.5
                                            }
                                        }
                                        return undefined; // pre WRS 1.4
                                    };
                                    
                                    var storeStandardCCsInDB = function(consumedStandardCCs, oidToWDIds) {
                                        if (consumedStandardCCs === undefined || consumedStandardCCs === null) {
                                            logger.warn("IterativeConvertFromProcessPlanIDContinuation::storeStandardCCsInDB: consumedStandardCCs is null. Neither standardCC or link was added in the DB");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeStandardCCsInDB(" + consumedStandardCCs + ", " + oidToWDIds + ")");
                                        }
                                    
                                        for (var i = 0; i < consumedStandardCCs.length; ++i) {
                                            var consumed_std_cc = consumedStandardCCs[i];
                                            var oid = consumed_std_cc["operationOid"];
                                    
                                            var wd_uids = oidToWDIds[oid];
                                            for (var j = 0; j < wd_uids.length; ++j) {
                                                var wd_uid = wd_uids[j];
                                    
                                                var consumed_std_cc_and_links = consumed_std_cc["ConsumedResourcesAndLinks"];
                                                if (consumed_std_cc_and_links === undefined || consumed_std_cc_and_links === null) {
                                                    logger.warn("[storeStandardCCsInDB] consumed_std_cc_and_links is null. Neither standardCC or link was added in the DB");
                                                    continue;
                                                }
                                    
                                                for (var k = 0; k < consumed_std_cc_and_links.length; ++k) {
                                                    var consumed_std_cc_and_link = consumed_std_cc_and_links[k];
                                                    var standard_cc = consumed_std_cc_and_link["StandardCC"];
                                    
                                                    var wd_cc = {
                                                        "ID": standard_cc["Number"],
                                                        "WorkDefinitionUID": wd_uid,
                                                        "Name": standard_cc["Name"],
                                                        "NominalValue": standard_cc["NominalValue"],
                                                        "LowLimit": standard_cc["LowerValue"],
                                                        "UpLimit": standard_cc["UpperValue"],
                                                        "Category": getStandardCCsCategory(standard_cc),
                                                        "Description": standard_cc["Description"]
                                                    };
                                    
                                                    var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionControlCharacteristic"});
                                                    infotable.AddRow(wd_cc);
                                    
                                                    Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionControlCharacteristics({"WorkDefinitionControlCharacteristics": infotable});
                                                }
                                            }
                                        }
                                    };
                                    
                                    var storeSkillInDB = function(consumedSkill) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeSkillInDB(" + consumedSkill + ")");
                                        }
                                    
                                        var personnel_class = {
                                            "ID": consumedSkill["Number"],
                                            "Name": consumedSkill["Name"],
                                            "Description": consumedSkill["Description"]
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.PersonnelClass"});
                                        infotable.AddRow(personnel_class);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreatePersonnelClasses({"PersonnelClasses": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var storeSkillLinkInDB = function(personnelClassUID, wdUID, operationToConsumableLink) {
                                        if (operationToConsumableLink === undefined || operationToConsumableLink === null) {
                                            logger.warn("IterativeConvertFromProcessPlanIDContinuation:storeSkillLinkInDB: operationToConsumableLink is null");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeSkillLinkInDB(" + personnelClassUID + ", " + wdUID + ", " + operationToConsumableLink + ")");
                                        }
                                    
                                        var wd_personnel_spec = {
                                            "PersonnelClassUID": personnelClassUID,
                                            "WorkDefinitionUID": wdUID,
                                            "Quantity": operationToConsumableLink["Quantity"],
                                            "Description": operationToConsumableLink["Description"],
                                            "QuantityUnitOfMeasure": operationToConsumableLink["Unit"]["Value"]
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionPersonnelSpecification"});
                                        infotable.AddRow(wd_personnel_spec);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionPersonnelSpecifications({"WorkDefinitionPersonnelSpecifications": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var storeSkillAndConsumableLinkInDB = function(consumedSkills, oidToWDIds) {
                                        if (consumedSkills === undefined || consumedSkills === null) {
                                            logger.warn("IterativeConvertFromProcessPlanIDContinuation::storeSkillAndConsumableLinkInDB: consumedSkills is null. Neither skill or link was added in the DB");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeSkillAndConsumableLinkInDB(" + consumedSkills + ", " + oidToWDIds + ")");
                                        }
                                    
                                        for (var i = 0; i < consumedSkills.length; ++i) {
                                            var consumed_skill = consumedSkills[i];
                                            var oid = consumed_skill["operationOid"];
                                    
                                            var wd_uids = oidToWDIds[oid];
                                            for (var j = 0; j < wd_uids.length; ++j) {
                                                var wd_uid = wd_uids[j];
                                    
                                                var consumed_skill_and_links = consumed_skill["ConsumedResourcesAndLinks"];
                                                if (consumed_skill_and_links === undefined || consumed_skill_and_links === null) {
                                                    logger.warn("[storeSkillAndConsumableLinkInDB] consumed_skill_and_links is null. Neither skill or link was added in the DB");
                                                    return;
                                                }
                                    
                                                for (var k = 0; k < consumed_skill_and_links.length; ++k){
                                                    var consumed_skill_and_link = consumed_skill_and_links[k];
                                                    var personnel_class_UID = storeSkillInDB(consumed_skill_and_link["Skill"]);
                                                    storeSkillLinkInDB(personnel_class_UID, wd_uid, consumed_skill_and_link["OperationToConsumableLink"]);
                                                }
                                            }
                                        }
                                    };
                                    
                                    var storeProcessingResourceInDB = function(consumedResource) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeProcessingResourceInDB(" + consumedResource + ")");
                                        }
                                    
                                        var resource_class = {
                                            "ID": consumedResource["Number"],
                                            "Name": consumedResource["Name"],
                                            "Description": consumedResource["Description"]
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.ProcessingResourceClass"});
                                        infotable.AddRow(resource_class);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateProcessingResourceClasses({"ProcessingResourceClasses": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var storeConsumableLinkInDB = function(resourceClassUID, wdUID, operationToConsumableLink) {
                                        if (operationToConsumableLink === undefined || operationToConsumableLink === null) {
                                            logger.warn("IterativeConvertFromProcessPlanIDContinuation::storeConsumableLinkInDB: operationToConsumableLink is null");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeConsumableLinkInDB(" + resourceClassUID + ", " + wdUID + ", " + operationToConsumableLink + ")");
                                        }
                                    
                                        var wd_processing_resource_spec = {
                                            "ProcessingResourceClassUID": resourceClassUID,
                                            "WorkDefinitionUID": wdUID,
                                            "Quantity": operationToConsumableLink["Quantity"],
                                            "Description": operationToConsumableLink["Description"]
                                        };
                                        var unit = operationToConsumableLink["Unit"];
                                        if (unit !== undefined && unit !== null) {
                                            wd_processing_resource_spec["QuantityUnitOfMeasure"] = unit["Value"];
                                        }
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinitionProcessingResourceSpecification"});
                                        infotable.AddRow(wd_processing_resource_spec);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionProcessingResourceSpecifications({"WorkDefinitionProcessingResourceSpecifications": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var storeProcessingResourceAndLinkInDB = function(consumedResources, oidToWDIds, resourceType, linkType) {
                                        if (consumedResources === undefined || consumedResources === null) {
                                            logger.warn("IterativeConvertFromProcessPlanIDContinuation::storeProcessingResourceAndLinkInDB: consumedResources is null. Neither resource or link was added in the DB");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeProcessingResourceAndLinkInDB(" + consumedResources + ", " + oidToWDIds + ", " + resourceType + ", " + linkType + ")");
                                        }
                                    
                                        for (var i = 0; i < consumedResources.length; ++i) {
                                            var consumed_resource = consumedResources[i];
                                            var oid = consumed_resource["operationOid"];
                                    
                                            var wd_uids = oidToWDIds[oid];
                                            for (var j = 0; j < wd_uids.length; ++j) {
                                                var wd_uid = wd_uids[j];
                                    
                                                // Store Resources and Links per opOID
                                                var consumed_resource_and_links = consumed_resource["ConsumedResourcesAndLinks"];
                                                if (consumed_resource_and_links === undefined || consumed_resource_and_links === null) {
                                                    logger.warn("[storeProcessingResourceAndLinkInDB] consumed_resource_and_links is null. Neither resource or link was added in the DB");
                                                    return;
                                                }
                                    
                                                for (var k = 0; k < consumed_resource_and_links.length; ++k) {
                                                    var consumed_resource_and_link = consumed_resource_and_links[k];
                                                    var resourceClassUID = storeProcessingResourceInDB(consumed_resource_and_link[resourceType]);
                                                    storeConsumableLinkInDB(resourceClassUID, wd_uid, consumed_resource_and_link[linkType]);
                                                }
                                            }
                                        }
                                    };
                                    
                                    
                                    var storeMaterialDefinitionInDB = function(consumedMaterial) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeMaterialDefinitionInDB(" + consumedMaterial + ")");
                                        }
                                    
                                        var material = {
                                            "ID": consumedMaterial["part_number"],
                                            "Name": consumedMaterial["part_name"],
                                            "DefaultUnit": consumedMaterial["part_defaultUnit"],
                                            "Version": consumedMaterial["part_version"],
                                            "Source": consumedMaterial["part_source"]
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.MaterialDefinition"});
                                        infotable.AddRow(material);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateMaterialDefinitions({"MaterialDefinitions": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var getInternalMaterialUse = function(materialUse) {
                                        var materialUseNumber;
                                        switch (materialUse) {
                                            case "consumed":
                                                materialUseNumber = 1;
                                                break;
                                            case "destroyed":
                                                materialUseNumber = 2;
                                                break;
                                            case "produced":
                                                materialUseNumber = 3;
                                                break;
                                            case "disassembled":
                                                materialUseNumber = 4;
                                                break;
                                        }
                                        return materialUseNumber;
                                    }
                                    
                                    var storeWDMaterialSpecInDB = function(consumedMaterial, wdUID, materialDefinitionUID) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeWDMaterialSpecInDB(" + consumedMaterial + ", " + wdUID + ", " + materialDefinitionUID + ")");
                                        }
                                    
                                        var wd_mat_spec = {
                                            "WorkDefinitionUID": wdUID,
                                            "MaterialDefinitionUID": materialDefinitionUID,
                                            "Description": consumedMaterial["description"],
                                            "MaterialUse": getInternalMaterialUse(consumedMaterial["materialUse"]),
                                            "Quantity": consumedMaterial["quantity"],
                                            "QuantityUnitOfMeasure": consumedMaterial["quantityUnitOfMeasure"],
                                            "ComponentPath": consumedMaterial["componentPath"],
                                            "OccurrencePath": consumedMaterial["occurrencePath"]
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName: "PTC.SCA.SCO.WorkDefinitionMaterialSpecification"});
                                        infotable.AddRow(wd_mat_spec);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionMaterialSpecifications({"WorkDefinitionMaterialSpecifications": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    }
                                    
                                    var storeMaterialsInDB = function(consumedMaterials, oidToWDIds, relatedAssemblyNavigationCriteria) {
                                        if (consumedMaterials === undefined) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeMaterialsInDB: consumedMaterials === undefined");
                                            return;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanIDContinuation::storeMaterialsInDB(" + consumedMaterials + ", " + oidToWDIds + ", " + relatedAssemblyNavigationCriteria + ")");
                                        }
                                    
                                        for (var i = 0; i < consumedMaterials.length; ++i) {
                                            var consumed_material = consumedMaterials[i];
                                            if (consumed_material === undefined || consumed_material === null) {
                                                continue;
                                            }
                                            var oid = consumed_material["entity_oid"];
                                    
                                            var wd_uids = oidToWDIds[oid];
                                            for (var j = 0; j < wd_uids.length; ++j) {
                                                var wd_uid = wd_uids[j];
                                    
                                                var material_def_uid = storeMaterialDefinitionInDB(consumed_material);
                                                storeWDMaterialSpecInDB(consumed_material, wd_uid, material_def_uid);
                                    
                                                /*
                                                 * FACTORY-23849
                                                 * Commenting out retrieval of BOMs (GetBOMs) -- will enable it via configuration after OA 8.5
                                                 *
                                                var allocated_material_bom = me.FetchBOMFromPartID({
                                                    "partId": consumed_material["part_oid"],
                                                    "navigationCriteria": relatedAssemblyNavigationCriteria
                                                });
                                    
                                                if (allocated_material_bom["Components"] === undefined || allocated_material_bom["Components"].length <= 0) {
                                                    continue;
                                                }
                                    
                                                var components = allocated_material_bom["Components"];
                                                for (var k = 0; k < components.length; ++k) {
                                                    var child_bom = components[k];
                                                    createMaterialDefinitionLinks(material_def_uid, child_bom);
                                                }
                                                 */
                                            }
                                        }
                                    };
                                    
                                    /*
                                     * bom === { "PartId": <String>,
                                                 "PartUseId": <String>,
                                                 "PartName": <String>
                                                 "PartNumber": <String>
                                                 "Part": <Part-Object>,
                                                 "PartUse": <Part-Use-Object>,
                                                 "Occurrences": [ <Occurrence-Object>, <Occurrence-Object>, ... ],
                                                 "Components": [ <BOM>, <BOM>, ... ] }
                                     */
                                    var createMaterialDefinitionLinks = function(parentMaterialUID, bom) {
                                        if (logger.traceEnabled) {
                                            logger.trace("IterativeConvertFromProcessPlanID::createMaterialDefinitionLinks(" + parentMaterialUID + ", " + bom + ")");
                                        }
                                    
                                        if (bom === undefined) {
                                            logger.trace("IterativeConvertFromProcessPlanID::createMaterialDefinitionLinks: bom === undefined");
                                            return;
                                        }
                                    
                                        if (bom["Part"] === undefined) {
                                            logger.trace("IterativeConvertFromProcessPlanID::createMaterialDefinitionLinks: bom['Part'] === undefined");
                                            return;
                                        }
                                    
                                        var material = bom["Part"];
                                        var material_uid = storeMaterialDefinitionInDB(material);
                                        storeMaterialDefLinkInDB(parentMaterialUID, material_uid);
                                    
                                        var components = bom["Components"];
                                        if (components === undefined || components.length === 0) {
                                            return;
                                        }
                                    
                                        for (var i = 0; i < components.length; ++i) {
                                            var child_bom = components[i];
                                            createMaterialDefinitionLinks(material_uid, child_bom);
                                        }
                                    };
                                    
                                    var storeMaterialDefLinkInDB = function(parentUID, childUID) {
                                        logger.trace("IterativeConvertFromProcessPlanID::storeMaterialDefLinkInDB(" + parentUID + ", " + childUID + ")");
                                    
                                        var mat_def_link = {
                                            "ChildUID": childUID,
                                            "ParentUID": parentUID
                                        };
                                    
                                        var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.MaterialDefinitionLink"});
                                        infotable.AddRow(mat_def_link);
                                    
                                        var created = Things[getProductionOrderUtilsThingName()].CreateMaterialDefinitionLinks({"MaterialDefinitionLinks": infotable});
                                        var uid = created.rows[0]["UID"];
                                        return uid;
                                    };
                                    
                                    var extractDownloadableContent = function(illustrationsList){
                                        var downloadable_illustrations = [];
                                        for(var i = 0; i < illustrationsList.length; ++i){
                                        var illustration = illustrationsList[i];
                                        var illustration_content = illustration["content"];
                                        var type = getIllustrationType(illustration_content["Label"]);
                                        if(type == undefined || type == null) {
                                            continue;
                                        }
                                            downloadable_illustrations.push(illustration);
                                        }
                                        return downloadable_illustrations;
                                    };
                                    
                                    var main = function(continuation) {
                                        logger.trace("IterativeConvertFromProcessPlanIDContinuation::main()");
                                    
                                        var pp_nc = continuation["processPlanNavigationCriteria"];
                                        var ra_nc = continuation["relatedAssemblyNavigationCriteria"];
                                        var root_wd_uid = continuation["wd_uid"];
                                        var entity_ids = continuation["entity_ids"];
                                    
                                        var pp_oids = [];
                                        var pp_to_wd_uids = {};
                                        var op_oids = [];
                                        var op_to_wd_uids = {};
                                    
                                        for (var i = 0; i < entity_ids.length; i++) {
                                            var entity_id = entity_ids[i];
                                            var oid = entity_id["oid"];
                                            var wd_uid = entity_id["wd_uid"];
                                            if (oid.indexOf("com.ptc.windchill.mpml.processplan.MPMProcessPlan") !== -1) {
                                                if (pp_to_wd_uids.hasOwnProperty(oid)) {
                                                    pp_to_wd_uids[oid].push(wd_uid);
                                                } else {
                                                    pp_to_wd_uids[oid] = [ wd_uid ];
                                                }
                                            } else {
                                                if (op_to_wd_uids.hasOwnProperty(oid)) {
                                                    op_to_wd_uids[oid].push(wd_uid);
                                                } else {
                                                    op_to_wd_uids[oid] = [ wd_uid ];
                                                }
                                            }
                                        }
                                    
                                        for (var oid in pp_to_wd_uids) {
                                            pp_oids.push(oid);
                                        }
                                    
                                        for (var oid in op_to_wd_uids) {
                                            op_oids.push(oid);
                                        }
                                    
                                        var downloaded_urls = {};
                                    
                                        var op_descdocs = me.FetchDescribedByDocumentsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "navigationCriteria": pp_nc
                                        });
                                        var downloaded_op_descdocs = processDocuments(root_wd_uid, op_descdocs["docs"], op_to_wd_uids, downloaded_urls);
                                        storeDocsInDB(downloaded_op_descdocs);
                                    
                                        var op_refdocs = me.FetchReferenceDocumentsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "navigationCriteria": pp_nc
                                        });
                                        var downloaded_op_refdocs = processDocuments(root_wd_uid, op_refdocs["docs"], op_to_wd_uids, downloaded_urls);
                                        storeDocsInDB(downloaded_op_refdocs);
                                    
                                        var pp_descdocs = me.FetchDescribedByDocumentsFromProcessPlanIDs({
                                            "ppIds" : { "value" : pp_oids },
                                            "navigationCriteria": pp_nc
                                        });
                                        var pp_downloaded_descdocs = processDocuments(root_wd_uid, pp_descdocs["docs"], pp_to_wd_uids, downloaded_urls);
                                        storeDocsInDB(pp_downloaded_descdocs);
                                    
                                        var pp_refdocs = me.FetchReferenceDocumentsFromProcessPlanIDs({
                                            "ppIds" : { "value" : pp_oids },
                                            "navigationCriteria": pp_nc
                                        });
                                        var downloaded_pp_refdocs = processDocuments(root_wd_uid, pp_refdocs["docs"], pp_to_wd_uids, downloaded_urls);
                                        storeDocsInDB(downloaded_pp_refdocs);
                                    
                                        var op_illustrations = me.FetchIllustrationsFromOperationIds({ "operationIds" : { "value" : op_oids } });
                                        // fix for bug FACTORY-22554, Download illustrations with required type
                                        var downloadable_op_illustrations = extractDownloadableContent(op_illustrations["docs"]);
                                        var downloaded_op_illustrations = processDocuments(root_wd_uid, downloadable_op_illustrations, op_to_wd_uids, downloaded_urls);
                                        storeIllustrationsInDB(downloaded_op_illustrations);
                                    
                                        var op_thumbnails = me.Fetch2DThumbnailsFromOperationIds({ "operationIds" : { "value" : op_oids } });
                                        var downloaded_op_thumbnails = processDocuments(root_wd_uid, op_thumbnails["docs"], op_to_wd_uids, downloaded_urls);
                                        storeIllustrationsInDB(downloaded_op_thumbnails);
                                    
                                        var op_std_ccs = me.FetchStandardCCsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeStandardCCsInDB(op_std_ccs["ConsumedStandardCCs"], op_to_wd_uids);
                                    
                                        var op_skills = me.FetchSkillsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeSkillAndConsumableLinkInDB(op_skills["ConsumedSkills"], op_to_wd_uids);
                                    
                                        var op_proc_materials = me.FetchProcessMaterialsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeProcessingResourceAndLinkInDB(op_proc_materials["ConsumedProcessMaterials"], op_to_wd_uids, "ProcessMaterial", "OperationToConsumableLink");
                                    
                                        var op_toolings = me.FetchToolingsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeProcessingResourceAndLinkInDB(op_toolings["ConsumedToolings"], op_to_wd_uids, "Tooling", "OperationToConsumableLink");
                                    
                                        var op_work_centers = me.FetchWorkCentersFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeProcessingResourceAndLinkInDB(op_work_centers["ConsumedWorkCenters"], op_to_wd_uids, "WorkCenter", "OperationToWorkCenterLink");
                                    
                                        var allocated_parts = me.FetchAllocatedPartsFromOperationIDs({
                                            "operationIds" : { "value" : op_oids },
                                            "processPlanNavigationCriteria": pp_nc,
                                            "relatedAssemblyNavigationCriteria": ra_nc
                                        });
                                        storeMaterialsInDB(allocated_parts["consumedParts"], op_to_wd_uids, ra_nc);
                                    };
                                    
                                    var updateExecutionStatus = function(workDefinitionUID, executionStatus) {
                                        logger.trace("IterativeConvertFromProcessPlanIDContinuation::updateExecutionStatus(" + workDefinitionUID + ", " + executionStatus + ")");
                                    
                                        var wd_exec_status_enums = Things[getProductionOrderUtilsThingName()].GetWorkDefinitionExecutionStatuses();
                                        var wd_exec_status_row = wd_exec_status_enums.Find({"Name" : executionStatus});
                                        if (wd_exec_status_row) {
                                            var wd_exec_status_uid = wd_exec_status_row["UID"];
                                            var work_def = {
                                                "UID" : workDefinitionUID,
                                                "ExecutionStatus" : wd_exec_status_uid
                                            };
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({ dataShapeName : "PTC.SCA.SCO.WorkDefinition"});
                                            infotable.AddRow(work_def);
                                    
                                            Things[getProductionOrderUtilsThingName()].UpdateWorkDefinitions({
                                                "WorkDefinitions": infotable
                                            });
                                    
                                            me.ConvertFromProcessPlanIDStatus(work_def);
                                        };
                                    };
                                    
                                    var wd_uid = continuation["wd_uid"];
                                    try {
                                        main(continuation);
                                        updateExecutionStatus(wd_uid, "BuildingSuccess");
                                    } catch (e) {
                                        updateExecutionStatus(wd_uid, "BuildingFailure");
                                        logger.error(e);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="MergeWDJsons">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.SCA.SCO.ProductionOrderUtils"].GetConfigurationTable({tableName: "GeneralSettings"}).getFirstRow().getStringValue("Value");
                                    };
                                    
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var merge = function(wdJson, oidPath, uids) {
                                        if (isNull(uids)) {
                                            return wdJson;
                                        }
                                    
                                        var wd_links = wdJson["__WorkDefinitionLinks"];
                                        if (isNull(wd_links)) {
                                            return wdJson;
                                        }
                                    
                                        for (var i = 0; i < wd_links.length; ++i) {
                                            var wd_link = wd_links[i];
                                            var oid = wd_link["__OID"];
                                            var oid_path = oidPath + "/" + oid;
                                    
                                            var wd_link_uids = uids[oid_path];
                                            if (isNull(wd_link_uids)) {
                                                // should not happen
                                                continue;
                                            }
                                    
                                            wd_link["UID"] = wd_link_uids["UID"];
                                            wd_link["ParentUID"] = wd_link_uids["ParentUID"];
                                            wd_link["ChildUID"] = wd_link_uids["ChildUID"];
                                    
                                            var wd = wd_link["__WorkDefinition"];
                                            wd["UID"] = wd_link["ChildUID"];
                                    
                                            merge(wd, oid_path, uids);
                                        }
                                    
                                        return wdJson;
                                    };
                                    
                                    var extractUIDs = function(wdJson, oidPath, uids) {
                                        if (isNullOrEmpty(wdJson)) {
                                            return;
                                        }
                                    
                                        var wd_links = wdJson["__WorkDefinitionLinks"];
                                        if (isNull(wd_links)) {
                                            return;
                                        }
                                    
                                        for (var i = 0; i < wd_links.length; ++i) {
                                            var wd_link = wd_links[i];
                                            var oid = wd_link["__OID"];
                                            var wd_link_uids = {
                                                "UID": wd_link["UID"],
                                                "ParentUID": wd_link["ParentUID"],
                                                "ChildUID": wd_link["ChildUID"]
                                            };
                                    
                                            var oid_path = oidPath + "/" + oid;
                                            uids[oid_path] = wd_link_uids;
                                    
                                            var wd = wd_link["__WorkDefinition"];
                                            extractUIDs(wd, oid_path, uids);
                                        }
                                    };
                                    
                                    var main = function(target, source) {
                                        var source_uids = {};
                                        extractUIDs(source, "", source_uids);
                                        var merged_wd_json = merge(target, "", source_uids);
                                    
                                        merged_wd_json["UID"] = source["UID"];
                                    
                                        return merged_wd_json;
                                    };
                                    
                                    var result = main(targetWDJson, sourceWDJson);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="StoreMDJson">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.SCA.SCO.ProductionOrderUtils"].GetConfigurationTable({tableName: "GeneralSettings"}).getFirstRow().getStringValue("Value");
                                    };
                                    
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var getNonHiddenProperties = function(obj) {
                                        var keys = [];
                                        for (var key in obj) {
                                            if (key.lastIndexOf("__", 0) !== -1) {
                                                continue;
                                            }
                                            keys.push(key);
                                        }
                                        return keys;
                                    };
                                    
                                    var cloneObjectStrippingHiddenProperties = function(obj) {
                                        var cloned = {};
                                        var non_hidden_properties = getNonHiddenProperties(obj);
                                        for (var i = 0; i < non_hidden_properties.length; ++i) {
                                            var key = non_hidden_properties[i];
                                            cloned[key] = obj[key];
                                        }
                                        return cloned;
                                    };
                                    
                                    var storeMaterialDefinitionLinkInDB = function(materialDefinitionLink, parentMDUID) {
                                        if (isNullOrEmpty(materialDefinitionLink)) {
                                            return undefined;
                                        }
                                    
                                        var child_md = materialDefinitionLink["__MaterialDefinition"];
                                        if (isNullOrEmpty(child_md)) {
                                            return undefined;
                                        }
                                    
                                        var stored_child_md = storeMaterialDefinitionInDB(child_md);
                                        materialDefinitionLink["__MaterialDefinition"] = stored_child_md;
                                        materialDefinitionLink["ParentUID"] = parentMDUID;
                                        materialDefinitionLink["ChildUID"] = stored_child_md["UID"];
                                    
                                        var uid = materialDefinitionLink["UID"];
                                        if (uid === undefined) {
                                            // materialDefinitionLink is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(materialDefinitionLink);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.MaterialDefinitionLink"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateMaterialDefinitionLinks({"MaterialDefinitionLinks": infotable});
                                            uid = created.rows[0]["UID"];
                                            materialDefinitionLink["UID"] = uid;
                                        }
                                    
                                        return materialDefinitionLink;
                                    };
                                    
                                    var storeMaterialDefinitionLinksInDB = function(materialDefinitionLinks, parentMDUID) {
                                        if (isNullOrEmpty(materialDefinitionLinks)) {
                                            return undefined;
                                        }
                                    
                                        var stored_md_links = [];
                                        for (var i = 0; i < materialDefinitionLinks.length; ++i) {
                                            var md_link = materialDefinitionLinks[i];
                                            var stored_md_link = storeMaterialDefinitionLinkInDB(md_link, parentMDUID);
                                            stored_md_links.push(stored_md_link);
                                        }
                                    
                                        return stored_md_links;
                                    };
                                    
                                    var storeMaterialDefinitionInDB = function(materialDefinition) {
                                        if (isNullOrEmpty(materialDefinition)) {
                                            return undefined;
                                        }
                                    
                                        var uid = materialDefinition["UID"];
                                        if (uid === undefined) {
                                            // materialDefinition is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(materialDefinition);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.MaterialDefinition"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateMaterialDefinitions({"MaterialDefinitions": infotable});
                                            uid = created.rows[0]["UID"];
                                            materialDefinition["UID"] = uid;
                                        }
                                    
                                        var md_links = materialDefinition["__MaterialDefinitionLinks"];
                                        if (!isNullOrEmpty(md_links)) {
                                            var stored_md_links = storeMaterialDefinitionLinksInDB(md_links, uid);
                                            materialDefinition["__MaterialDefinitionLinks"] = stored_md_links;
                                        }
                                    
                                        return materialDefinition;
                                    };
                                    
                                    var main = function(materialDefinition) {
                                        if (logger.traceEnabled) {
                                            logger.trace("StoreMDJson::main(" + materialDefinition + ")");
                                        }
                                    
                                        if (isNullOrEmpty(materialDefinition)) {
                                            return {};
                                        }
                                    
                                        var stored_md_json = storeMaterialDefinitionInDB(materialDefinition);
                                        return stored_md_json;
                                    };
                                    
                                    var result = main(mdJson);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="StoreWDJson">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.SCA.SCO.ProductionOrderUtils"].GetConfigurationTable({tableName: "GeneralSettings"}).getFirstRow().getStringValue("Value");
                                    };
                                    
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var getNonHiddenProperties = function(obj) {
                                        var keys = [];
                                        for (var key in obj) {
                                            if (key.lastIndexOf("__", 0) !== -1) {
                                                continue;
                                            }
                                            keys.push(key);
                                        }
                                        return keys;
                                    };
                                    
                                    var cloneObjectStrippingHiddenProperties = function(obj) {
                                        var cloned = {};
                                        var non_hidden_properties = getNonHiddenProperties(obj);
                                        for (var i = 0; i < non_hidden_properties.length; ++i) {
                                            var key = non_hidden_properties[i];
                                            cloned[key] = obj[key];
                                        }
                                        return cloned;
                                    };
                                    
                                    var getInternalMaterialUse = function(materialUse) {
                                        var materialUseNumber;
                                        switch (materialUse) {
                                            case "consumed":
                                                materialUseNumber = 1;
                                                break;
                                            case "destroyed":
                                                materialUseNumber = 2;
                                                break;
                                            case "produced":
                                                materialUseNumber = 3;
                                                break;
                                            case "disassembled":
                                                materialUseNumber = 4;
                                                break;
                                         }
                                         return materialUseNumber;
                                    };
                                    
                                    var storeWorkDefinitionIllustrationInDB = function(workDefinitionIllustration, wdUID) {
                                        if (isNullOrEmpty(workDefinitionIllustration)) {
                                            return undefined;
                                        }
                                    
                                        if (workDefinitionIllustration["__ShouldDownload"] === true) {
                                            // IllustrationURL will be downloaded in Phase IV, at which time WorkDefinitionIllustration entry will be stored
                                            return workDefinitionIllustration;
                                        }
                                    
                                        workDefinitionIllustration["WorkDefinitionUID"] = wdUID;
                                        var uid = workDefinitionIllustration["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionIllustration is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionIllustration);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionIllustration"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionIllustrations({"WorkDefinitionIllustrations": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionIllustration["UID"] = uid;
                                        }
                                    
                                        return workDefinitionIllustration;
                                    };
                                    
                                    var storeWorkDefinitionIllustrationsInDB = function(workDefinitionIllustrations, wdUID) {
                                        if (isNullOrEmpty(workDefinitionIllustrations)) {
                                            return undefined;
                                        }
                                    
                                        var stored_illustrations = [];
                                        for (var i = 0; i < workDefinitionIllustrations.length; ++i) {
                                            var illustration = workDefinitionIllustrations[i];
                                            var stored_illustration = storeWorkDefinitionIllustrationInDB(illustration, wdUID);
                                            stored_illustrations.push(stored_illustration);
                                        }
                                    
                                        return stored_illustrations;
                                    };
                                    
                                    var storeWorkDefinitionRelatedDocumentInDB = function(workDefinitionRelatedDocument, wdUID) {
                                        if (isNullOrEmpty(workDefinitionRelatedDocument)) {
                                            return undefined;
                                        }
                                    
                                        if (workDefinitionRelatedDocument["__ShouldDownload"] === true) {
                                            // IllustrationURL will be downloaded in Phase IV, at which time WorkDefinitionIllustration entry will be stored
                                            return workDefinitionRelatedDocument;
                                        }
                                    
                                        workDefinitionRelatedDocument["WorkDefinitionUID"] = wdUID;
                                    
                                        var uid = workDefinitionRelatedDocument["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionRelatedDocument is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionRelatedDocument);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionRelatedDocument"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionRelatedDocuments({"WorkDefinitionRelatedDocuments": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionRelatedDocument["UID"] = uid;
                                        }
                                    
                                        return workDefinitionRelatedDocument;
                                    };
                                    
                                    var storeWorkDefinitionRelatedDocumentsInDB = function(workDefinitionRelatedDocuments, wdUID) {
                                        if (isNullOrEmpty(workDefinitionRelatedDocuments)) {
                                            return undefined;
                                        }
                                    
                                        var stored_rel_docs = [];
                                        for (var i = 0; i < workDefinitionRelatedDocuments.length; ++i) {
                                            var rel_doc = workDefinitionRelatedDocuments[i];
                                            var stored_rel_doc = storeWorkDefinitionRelatedDocumentInDB(rel_doc, wdUID);
                                            stored_rel_docs.push(stored_rel_doc);
                                        }
                                    
                                        return stored_rel_docs;
                                    };
                                    
                                    var storeWorkDefinitionControlCharacteristicInDB = function(workDefinitionControlCharacteristic, wdUID) {
                                        if (isNullOrEmpty(workDefinitionControlCharacteristic)) {
                                            return undefined;
                                        }
                                    
                                        workDefinitionControlCharacteristic["WorkDefinitionUID"] = wdUID;
                                    
                                        var uid = workDefinitionControlCharacteristic["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionControlCharacteristic is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionControlCharacteristic);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionControlCharacteristic"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionControlCharacteristics({"WorkDefinitionControlCharacteristics": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionControlCharacteristic["UID"] = uid;
                                        }
                                    
                                        return workDefinitionControlCharacteristic;
                                    };
                                    
                                    var storeWorkDefinitionControlCharacteristicsInDB = function(workDefinitionControlCharacteristics, wdUID) {
                                        if (isNullOrEmpty(workDefinitionControlCharacteristics)) {
                                            return undefined;
                                        }
                                    
                                        var stored_ccs = [];
                                        for (var i = 0; i < workDefinitionControlCharacteristics.length; ++i) {
                                            var cc = workDefinitionControlCharacteristics[i];
                                            var stored_cc = storeWorkDefinitionControlCharacteristicInDB(cc, wdUID);
                                            stored_ccs.push(stored_cc);
                                        }
                                    
                                        return stored_ccs;
                                    };
                                    
                                    var storePersonnelClassInDB = function(personnelClass) {
                                        if (isNullOrEmpty(personnelClass)) {
                                            return undefined;
                                        }
                                    
                                        var uid = personnelClass["UID"];
                                        if (uid === undefined) {
                                            // personnelClass is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(personnelClass);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.PersonnelClass"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreatePersonnelClasses({"PersonnelClasses": infotable});
                                            uid = created.rows[0]["UID"];
                                            personnelClass["UID"] = uid;
                                        }
                                    
                                        return personnelClass;
                                    };
                                    
                                    var storeWorkDefinitionPersonnelSpecificationInDB = function(workDefinitionPersonnelSpecification, wdUID) {
                                        if (isNullOrEmpty(workDefinitionPersonnelSpecification)) {
                                            return undefined;
                                        }
                                    
                                        var pers_class = workDefinitionPersonnelSpecification["__PersonnelClass"];
                                        if (isNullOrEmpty(pers_class)) {
                                            return undefined;
                                        }
                                    
                                        var stored_pers_class = storePersonnelClassInDB(pers_class);
                                        workDefinitionPersonnelSpecification["__PersonnelClass"] = stored_pers_class;
                                        workDefinitionPersonnelSpecification["WorkDefinitionUID"] = wdUID;
                                        workDefinitionPersonnelSpecification["PersonnelClassUID"] = stored_pers_class["UID"];
                                    
                                        var uid = workDefinitionPersonnelSpecification["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionPersonnelSpecification is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionPersonnelSpecification);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionPersonnelSpecification"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionPersonnelSpecifications({"WorkDefinitionPersonnelSpecifications": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionPersonnelSpecification["UID"] = uid;
                                        }
                                    
                                        return workDefinitionPersonnelSpecification;
                                    };
                                    
                                    var storeWorkDefinitionPersonnelSpecificationsInDB = function(workDefinitionPersonnelSpecifications, wdUID) {
                                        if (isNullOrEmpty(workDefinitionPersonnelSpecifications)) {
                                            return undefined;
                                        }
                                    
                                        var stored_pers_specs = [];
                                        for (var i = 0; i < workDefinitionPersonnelSpecifications.length; ++i) {
                                            var pers_spec = workDefinitionPersonnelSpecifications[i];
                                            var stored_pers_spec = storeWorkDefinitionPersonnelSpecificationInDB(pers_spec, wdUID);
                                            stored_pers_specs.push(stored_pers_spec);
                                        }
                                    
                                        return stored_pers_specs;
                                    };
                                    
                                    var storeProcessingResourceClassInDB = function(processingResourceClass) {
                                        if (isNullOrEmpty(processingResourceClass)) {
                                            return undefined;
                                        }
                                    
                                        var uid = processingResourceClass["UID"];
                                        if (uid === undefined) {
                                            // processingResourceClass is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(processingResourceClass);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.ProcessingResourceClass"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateProcessingResourceClasses({"ProcessingResourceClasses": infotable});
                                            uid = created.rows[0]["UID"];
                                            processingResourceClass["UID"] = uid;
                                        }
                                    
                                        return processingResourceClass;
                                    };
                                    
                                    var storeWorkDefinitionProcessingResourceSpecificationInDB = function(workDefinitionProcessingResourceSpecification, wdUID) {
                                        if (isNullOrEmpty(workDefinitionProcessingResourceSpecification)) {
                                            return undefined;
                                        }
                                    
                                        var proc_res_class = workDefinitionProcessingResourceSpecification["__ProcessingResourceClass"];
                                        if (isNullOrEmpty(proc_res_class)) {
                                            return undefined;
                                        }
                                    
                                        var stored_proc_res_class = storeProcessingResourceClassInDB(proc_res_class);
                                        workDefinitionProcessingResourceSpecification["__ProcessingResourceClass"] = stored_proc_res_class;
                                        workDefinitionProcessingResourceSpecification["WorkDefinitionUID"] = wdUID;
                                        workDefinitionProcessingResourceSpecification["ProcessingResourceClassUID"] = stored_proc_res_class["UID"];
                                    
                                        var uid = workDefinitionProcessingResourceSpecification["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionProcessingResourceSpecification is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionProcessingResourceSpecification);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionProcessingResourceSpecification"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionProcessingResourceSpecifications({"WorkDefinitionProcessingResourceSpecifications": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionProcessingResourceSpecification["UID"] = uid;
                                        }
                                    
                                        return workDefinitionProcessingResourceSpecification;
                                    };
                                    
                                    var storeWorkDefinitionProcessingResourceSpecificationsInDB = function(workDefinitionProcessingResourceSpecifications, wdUID) {
                                        if (isNullOrEmpty(workDefinitionProcessingResourceSpecifications)) {
                                            return undefined;
                                        }
                                    
                                        var stored_res_specs = [];
                                        for (var i = 0; i < workDefinitionProcessingResourceSpecifications.length; ++i) {
                                            var res_spec = workDefinitionProcessingResourceSpecifications[i];
                                            var stored_res_spec = storeWorkDefinitionProcessingResourceSpecificationInDB(res_spec, wdUID);
                                            stored_res_specs.push(stored_res_spec);
                                        }
                                    
                                        return stored_res_specs;
                                    };
                                    
                                    var storeMaterialDefinitionInDB = function(materialDefinition) {
                                        if (isNullOrEmpty(materialDefinition)) {
                                            return undefined;
                                        }
                                    
                                        var uid = materialDefinition["UID"];
                                        if (uid === undefined) {
                                            // materialDefinition is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(materialDefinition);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.MaterialDefinition"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateMaterialDefinitions({"MaterialDefinitions": infotable});
                                            uid = created.rows[0]["UID"];
                                            materialDefinition["UID"] = uid;
                                        }
                                    
                                        return materialDefinition;
                                    };
                                    
                                    var storeWorkDefinitionMaterialSpecificationInstanceInDB = function(workDefinitionMaterialSpecificationInstance, wdmsUID) {
                                        if (isNullOrEmpty(workDefinitionMaterialSpecificationInstance)) {
                                            return undefined;
                                        }
                                    
                                        workDefinitionMaterialSpecificationInstance["WorkDefinitionMaterialSpecificationUID"] = wdmsUID;
                                    
                                        var uid = workDefinitionMaterialSpecificationInstance["UID"];
                                    
                                        if (uid === undefined) {
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionMaterialSpecificationInstance);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionMaterialSpecificationInstance"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionMaterialSpecificationInstances({"WorkDefinitionMaterialSpecificationInstances": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionMaterialSpecificationInstance["UID"] = uid;
                                        }
                                    
                                        return workDefinitionMaterialSpecificationInstance;
                                    };
                                    
                                    var storeWorkDefinitionMaterialSpecificationInstancesInDB = function(workDefinitionMaterialSpecificationInstances, wdmsUID) {
                                        if (isNullOrEmpty(workDefinitionMaterialSpecificationInstances)) {
                                            return undefined;
                                        }
                                    
                                        var stored_mat_spec_instances = [];
                                        for (var i = 0; i < workDefinitionMaterialSpecificationInstances.length; ++i) {
                                            var mat_spec_instance = workDefinitionMaterialSpecificationInstances[i];
                                            var stored_mat_spec_instance = storeWorkDefinitionMaterialSpecificationInstanceInDB(mat_spec_instance, wdmsUID);
                                            stored_mat_spec_instances.push(stored_mat_spec_instance);
                                        }
                                    
                                        return stored_mat_spec_instances;
                                    };
                                    
                                    var storeWorkDefinitionMaterialSpecificationInDB = function(workDefinitionMaterialSpecification, wdUID) {
                                        if (isNullOrEmpty(workDefinitionMaterialSpecification)) {
                                            return undefined;
                                        }
                                    
                                        var mat_def = workDefinitionMaterialSpecification["__MaterialDefinition"];
                                        if (isNullOrEmpty(mat_def)) {
                                            return undefined;
                                        }
                                    
                                        var stored_mat_def = storeMaterialDefinitionInDB(mat_def);
                                        workDefinitionMaterialSpecification["__MaterialDefinition"] = stored_mat_def;
                                        workDefinitionMaterialSpecification["WorkDefinitionUID"] = wdUID;
                                        workDefinitionMaterialSpecification["MaterialDefinitionUID"] = stored_mat_def["UID"];
                                    
                                        var uid = workDefinitionMaterialSpecification["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionLink is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionMaterialSpecification);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionMaterialSpecification"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionMaterialSpecifications({"WorkDefinitionMaterialSpecifications": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionMaterialSpecification["UID"] = uid;
                                    
                                            var workDefinitionMaterialSpecificationInstances = workDefinitionMaterialSpecification["__WorkDefinitionMaterialSpecificationInstances"];
                                            var stored_mat_spec_instances = storeWorkDefinitionMaterialSpecificationInstancesInDB(workDefinitionMaterialSpecificationInstances, uid);
                                    
                                            if (!isNullOrEmpty(stored_mat_spec_instances)) {
                                                workDefinitionMaterialSpecification["__WorkDefinitionMaterialSpecificationInstances"] = stored_mat_spec_instances;
                                            }
                                        }
                                    
                                        return workDefinitionMaterialSpecification;
                                    };
                                    
                                    var storeWorkDefinitionMaterialSpecificationsInDB = function(workDefinitionMaterialSpecifications, wdUID) {
                                        if (isNullOrEmpty(workDefinitionMaterialSpecifications)) {
                                            return undefined;
                                        }
                                    
                                        var stored_mat_specs = [];
                                        for (var i = 0; i < workDefinitionMaterialSpecifications.length; ++i) {
                                            var mat_spec = workDefinitionMaterialSpecifications[i];
                                            var stored_mat_spec = storeWorkDefinitionMaterialSpecificationInDB(mat_spec, wdUID);
                                            stored_mat_specs.push(stored_mat_spec);
                                        }
                                    
                                        return stored_mat_specs;
                                    };
                                    
                                    var storeWorkDefinitionLinkInDB = function(workDefinitionLink, parentWDUID) {
                                        if (isNullOrEmpty(workDefinitionLink)) {
                                            return undefined;
                                        }
                                    
                                        var child_wd = workDefinitionLink["__WorkDefinition"];
                                        if (isNullOrEmpty(child_wd)) {
                                            return undefined;
                                        }
                                    
                                        var stored_child_wd = storeWorkDefinitionInDB(child_wd);
                                        workDefinitionLink["__WorkDefinition"] = stored_child_wd;
                                        workDefinitionLink["ParentUID"] = parentWDUID;
                                        workDefinitionLink["ChildUID"] = stored_child_wd["UID"];
                                    
                                        var uid = workDefinitionLink["UID"];
                                        if (uid === undefined) {
                                            // workDefinitionLink is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinitionLink);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinitionLink"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitionLinks({"WorkDefinitionLinks": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinitionLink["UID"] = uid;
                                        }
                                    
                                        return workDefinitionLink;
                                    };
                                    
                                    var storeWorkDefinitionLinksInDB = function(workDefinitionLinks, parentWDUID) {
                                        if (isNullOrEmpty(workDefinitionLinks)) {
                                            return undefined;
                                        }
                                    
                                        var stored_wd_links = [];
                                        for (var i = 0; i < workDefinitionLinks.length; ++i) {
                                            var wd_link = workDefinitionLinks[i];
                                            var stored_wd_link = storeWorkDefinitionLinkInDB(wd_link, parentWDUID);
                                            stored_wd_links.push(stored_wd_link);
                                        }
                                    
                                        return stored_wd_links;
                                    };
                                    
                                    var storeWorkDefinitionInDB = function(workDefinition) {
                                        if (isNullOrEmpty(workDefinition)) {
                                            return undefined;
                                        }
                                    
                                        var uid = workDefinition["UID"];
                                        if (uid === undefined) {
                                            // wdJson is not persisted
                                            var row = cloneObjectStrippingHiddenProperties(workDefinition);
                                    
                                            var infotable = Things[getProductionOrderUtilsThingName()].CreateInfoTable({"dataShapeName": "PTC.SCA.SCO.WorkDefinition"});
                                            infotable.AddRow(row);
                                    
                                            var created = Things[getProductionOrderUtilsThingName()].CreateWorkDefinitions({"WorkDefinitions": infotable});
                                            uid = created.rows[0]["UID"];
                                            workDefinition["UID"] = uid;
                                        }
                                    
                                        var wd_links = workDefinition["__WorkDefinitionLinks"];
                                        if (!isNullOrEmpty(wd_links)) {
                                            var stored_wd_links = storeWorkDefinitionLinksInDB(wd_links, uid);
                                            workDefinition["__WorkDefinitionLinks"] = stored_wd_links;
                                        }
                                    
                                        var mat_specs = workDefinition["__WorkDefinitionMaterialSpecifications"];
                                        if (!isNullOrEmpty(mat_specs)) {
                                            var stored_mat_specs = storeWorkDefinitionMaterialSpecificationsInDB(mat_specs, uid);
                                            workDefinition["__WorkDefinitionMaterialSpecifications"] = stored_mat_specs;
                                        }
                                    
                                        var res_specs = workDefinition["__WorkDefinitionProcessingResourceSpecifications"];
                                        if (!isNullOrEmpty(res_specs)) {
                                            var stored_res_specs = storeWorkDefinitionProcessingResourceSpecificationsInDB(res_specs, uid);
                                            workDefinition["__WorkDefinitionProcessingResourceSpecifications"] = stored_res_specs;
                                        }
                                    
                                        var pers_specs = workDefinition["__WorkDefinitionPersonnelSpecifications"];
                                        if (!isNullOrEmpty(pers_specs)) {
                                            var stored_pers_specs = storeWorkDefinitionPersonnelSpecificationsInDB(pers_specs, uid);
                                            workDefinition["__WorkDefinitionPersonnelSpecifications"] = stored_pers_specs;
                                        }
                                    
                                        var ccs = workDefinition["__WorkDefinitionControlCharacteristics"];
                                        if (!isNullOrEmpty(ccs)) {
                                            var stored_ccs = storeWorkDefinitionControlCharacteristicsInDB(ccs, uid);
                                            workDefinition["__WorkDefinitionControlCharacteristics"] = stored_ccs;
                                        }
                                    
                                        var rel_docs = workDefinition["__WorkDefinitionRelatedDocuments"];
                                        if (!isNullOrEmpty(rel_docs)) {
                                            var stored_rel_docs = storeWorkDefinitionRelatedDocumentsInDB(rel_docs, uid);
                                            workDefinition["__WorkDefinitionRelatedDocuments"] = stored_rel_docs;
                                        }
                                    
                                        var illustrations = workDefinition["__WorkDefinitionIllustrations"];
                                        if (!isNullOrEmpty(illustrations)) {
                                            var stored_illustrations = storeWorkDefinitionIllustrationsInDB(illustrations, uid);
                                            workDefinition["__WorkDefinitionIllustrations"] = stored_illustrations;
                                        }
                                    
                                        return workDefinition;
                                    };
                                    
                                    var storeWDJsonInDB = function(workDefinition) {
                                        var stored_wd_json = storeWorkDefinitionInDB(workDefinition);
                                        return stored_wd_json;
                                    };
                                    
                                    var main = function(workDefinition) {
                                        if (logger.traceEnabled) {
                                            logger.trace("StoreWDJson::main(" + workDefinition + ")");
                                        }
                                    
                                        if (isNullOrEmpty(workDefinition)) {
                                            return {};
                                        }
                                    
                                        var stored_wd_json = storeWorkDefinitionInDB(workDefinition);
                                        return stored_wd_json;
                                    };
                                    
                                    var result = main(wdJson);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="TranslateODataBOMsToMDJsons">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.SCA.SCO.ProductionOrderUtils"].GetConfigurationTable({tableName: "GeneralSettings"}).getFirstRow().getStringValue("Value");
                                    };
                                    
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var getDefaultUnit = function(odata) {
                                        var default_unit = odata["DefaultUnit"];
                                        if (isNull(default_unit)) {
                                            return undefined;
                                        }
                                        return default_unit["Value"];
                                    };
                                    
                                    var getSource = function(odata) {
                                        var source = odata["Source"];
                                        if (isNull(source)) {
                                            return undefined;
                                        }
                                        return source["Value"];
                                    };
                                    
                                    var extractMaterialDefinition = function(bom) {
                                        if (isNullOrEmpty(bom)) {
                                            return undefined;
                                        }
                                    
                                        var part = bom["Part"];
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var md = {
                                            "ID": part["Number"],
                                            "Name": part["Name"],
                                            "Description": part["Description"],
                                            "DefaultUnit": getDefaultUnit(part),
                                            "Source": getSource(part),
                                            "Version": part["Version"],
                                            // append any Part Custom Attribute here, eg;
                                            // "CustomPartAttribute": part["CustomPartAttribute"],
                                            "__OID": part["ID"],
                                            "__MaterialDefinitionLinks": extractMaterialDefinitionLinks(bom)
                                        };
                                    
                                        return md;
                                    };
                                    
                                    var extractMaterialDefinitionLink = function(bom) {
                                        if (isNullOrEmpty(bom)) {
                                            return undefined;
                                        }
                                    
                                        var part = bom["Part"];
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var md_link = {
                                            // append any Part Usage Link Custom Attribute here, eg;
                                            // "CustomMaterialDefinitionLinkField": link["CustomAttribute"]
                                            "__MaterialDefinition": extractMaterialDefinition(bom)
                                        };
                                    
                                        return md_link;
                                    };
                                    
                                    var extractMaterialDefinitionLinks = function(bom) {
                                        if (isNullOrEmpty(bom)) {
                                            return undefined;
                                        }
                                    
                                        var components = bom["Components"];
                                        if (isNullOrEmpty(components)) {
                                            return undefined;
                                        }
                                    
                                        var md_links = [];
                                        for (var i = 0; i < components.length; ++i) {
                                            var component = components[i];
                                            var md_link = extractMaterialDefinitionLink(component);
                                            if (!isNullOrEmpty(md_link)) {
                                                md_links.push(md_link);
                                            }
                                        }
                                    
                                        return md_links;
                                    };
                                    
                                    var extractMDJson = function(bom) {
                                        if (isNullOrEmpty(bom)) {
                                            return undefined;
                                        }
                                    
                                        var part = bom["Part"];
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var md = {
                                            "ID": part["Number"],
                                            "Name": part["Name"],
                                            "__MaterialDefinitionLinks": extractMaterialDefinitionLinks(bom)
                                        };
                                    
                                        return md;
                                    };
                                    
                                    var main = function(boms) {
                                        var md_jsons = {};
                                        for (var part_oid in boms) {
                                            var bom = boms[part_oid];
                                            var md_json = extractMDJson(bom);
                                            md_jsons[part_oid] = md_json;
                                        }
                                        return md_jsons;
                                    };
                                    
                                    var result = main(boms);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="TranslateODataBOPToWDJson">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var getProductionOrderUtilsThingName = function() {
                                        return Things["PTC.SCA.SCO.ProductionOrderUtils"].GetConfigurationTable({tableName: "GeneralSettings"}).getFirstRow().getStringValue("Value");
                                    };
                                    
                                    var isNull = function(obj) {
                                        return obj === undefined || obj === null;
                                    };
                                    
                                    var isNullOrEmpty = function(obj) {
                                        if (isNull(obj)) {
                                            return true;
                                        }
                                        if (typeof(obj) === 'string') {
                                            return 0 === obj.length;
                                        }
                                        if (typeof(obj) === 'object') {
                                            if (typeof(obj.length) !== 'undefined') {
                                                // obj is an Array
                                                return 0 === obj.length;
                                            }
                                            if (obj['getClass'] !== undefined && obj['hashCode'] !== undefined && obj['equals'] !== undefined) {
                                                // obj is a Java null object
                                                return obj['equals'](null);
                                            } else {
                                                // obj is a JSON object, possibly empty
                                                for (var prop in obj) {
                                                    return false;
                                                }
                                                return true; // obj === {}
                                            }
                                        }
                                        return false;
                                    };
                                    
                                    var isString = function(s) {
                                        return typeof s === 'string' || s instanceof String;
                                    };
                                    
                                    var getStandardCCsCategory = function(oDataStandardCC) {
                                        var category = oDataStandardCC["Category"];
                                        if (category) {
                                            if (isString(category)) {
                                                return category; // WRS 1.4
                                            } else {
                                                var category_display = category["Display"];
                                                return category_display; // post (and incl.) WRS 1.5
                                            }
                                        }
                                        return undefined; // pre WRS 1.4
                                    };
                                    
                                    var getFilenameFromURL = function(url) {
                                        // remove everything after anchor character: #
                                        url = url.substring(0, (url.indexOf("#") == -1) ? url.length : url.indexOf("#"));
                                        // remove everything after query character: ?
                                        url = url.substring(0, (url.indexOf("?") == -1) ? url.length : url.indexOf("?"));
                                        // remove everything before proper-path
                                        url = url.substring(url.lastIndexOf("/") + 1, url.length);
                                        var decoded_url = decodeURI(url);
                                        return decoded_url;
                                    };
                                    
                                    var getSequenceNumber = function(operationHolderUsageLink) {
                                        var op_label = operationHolderUsageLink["OperationLabel"];
                                        if (isNullOrEmpty(op_label)) {
                                            op_label = operationHolderUsageLink["InsertionOperation"];
                                        }
                                    
                                        if (!isNullOrEmpty(op_label)) {
                                            var seq_num = parseInt(op_label, 10);
                                            if (!isNaN(seq_num)) {
                                                return seq_num;
                                            }
                                        }
                                    
                                        return undefined;
                                    };
                                    
                                    var getWorkType = function(operationHolder) {
                                        var category = operationHolder["Category"];
                                        switch (category) {
                                            case "production": return 1;
                                            case "maintenance": return 2;
                                            case "quality": return 3;
                                            case "inventory": return 4;
                                            case "mixed": return 4;
                                            default: return 1;
                                        }
                                    };
                                    
                                    var getDocumentType = function(filename) {
                                        return Things[getProductionOrderUtilsThingName()].GetFileType({
                                            "FileName": filename
                                        });
                                    };
                                    
                                    var getIllustrationType = function(filename) {
                                        return Things[getProductionOrderUtilsThingName()].GetFileType({
                                            "FileName": filename
                                        });
                                    };
                                    
                                    var getDescription = function(odata) {
                                        return odata["Description"];
                                    };
                                    
                                    var getQuantity = function(odata) {
                                        return odata["Quantity"];
                                    };
                                    
                                    var getQuantityUnitOfMeasure = function(odata) {
                                        var unit = odata["Unit"];
                                        if (isNull(unit)) {
                                            return undefined;
                                        }
                                        return unit["Value"];
                                    };
                                    
                                    var getPartAllocationQuantity = function(odata) {
                                        return odata["PartAllocationQuantity"];
                                    };
                                    
                                    var getPartAllocationQuantityUnitOfMeasure = function(odata) {
                                        return odata["PartAllocationUnit"];
                                    };
                                    
                                    var getOperatedOnPartAllocationQuantity = function(odata) {
                                        return odata["Quantity"];
                                    };
                                    
                                    var getOperatedOnPartAllocationQuantityUnitOfMeasure = function(odata) {
                                        return odata["Unit"]["Display"];
                                    };
                                    
                                    var getDefaultUnit = function(odata) {
                                        var default_unit = odata["DefaultUnit"];
                                        if (isNull(default_unit)) {
                                            return undefined;
                                        }
                                        return default_unit["Value"];
                                    };
                                    
                                    var getSource = function(odata) {
                                        var source = odata["Source"];
                                        if (isNull(source)) {
                                            return undefined;
                                        }
                                        return source["Value"];
                                    };
                                    
                                    
                                    var getMaterialUse = function(odata) {
                                        var allocation_type = odata["AllocationType"];
                                        if (isNull(allocation_type)) {
                                            return undefined;
                                        }
                                        var material_use = allocation_type["Value"];
                                        var material_use_enumeration = me.GetMaterialUseValue({
                                         materialUse: material_use /* STRING */
                                        });
                                    
                                        return material_use_enumeration;
                                    
                                    };
                                    
                                    var getComponentPath = function(odata) {
                                        return odata["UsageIdPath"];
                                    };
                                    
                                    var getOccurrencePath = function(partPathOccurrenceLinks) {
                                        if (isNullOrEmpty(partPathOccurrenceLinks)) {
                                            return undefined;
                                        }
                                        return partPathOccurrenceLinks[0]["OccUniqueIdentifierPath"];
                                    };
                                    
                                    var getOccurrencePathForPart = function(occurrencePathPrefix, partPathOCCLink) {
                                        if (isNullOrEmpty(partPathOCCLink)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        var unique_id = partPathOCCLink["OccUniqueIdentifierPath"];
                                        if (isNullOrEmpty(unique_id)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        // slice the leading forward slash off occUniqueIDPath as it is not used in the occurrence path id
                                        var id = unique_id.slice(1);
                                        // replace all remaining forward slashes with pipes
                                        id = id.replace(/\//g, "|");
                                    
                                        return occurrencePathPrefix + "@" + id;
                                    };
                                    
                                    var getOccurrencePathForOperatedOnPart = function(occurrencePathPrefix, opToOperatedOnPartLink) {
                                        if (isNullOrEmpty(opToOperatedOnPartLink)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        var unique_id = opToOperatedOnPartLink["UniqueIdentifier"];
                                        if (isNullOrEmpty(unique_id)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        return occurrencePathPrefix + "/MPMOperationToOperatedPartLink:" + unique_id;
                                    };
                                    
                                    var getOccurrencePathForOperationToPartLink = function(occurrencePathPrefix, opToPartLink) {
                                        if (isNullOrEmpty(opToPartLink)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        var unique_id = opToPartLink["UniqueIdentifier"];
                                        if (isNullOrEmpty(unique_id)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        return occurrencePathPrefix + "/MPMOperationToPartLink:" + unique_id;
                                    };
                                    
                                    var getOccurrencePathForOperationHolderUsageLink = function(occurrencePathPrefix, opHolderUsageLink) {
                                        if (isNullOrEmpty(opHolderUsageLink)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        var unique_id = opHolderUsageLink["UniqueIdentifier"];
                                        if (isNullOrEmpty(unique_id)) {
                                            return occurrencePathPrefix;
                                        }
                                    
                                        return occurrencePathPrefix + "/MPMOperationUsageLink:" + unique_id;
                                    };
                                    
                                    var extractFromAttachment = function(documents, document, attachment) {
                                        var content = attachment["Content"];
                                        if (!isNullOrEmpty(content)) {
                                            documents.push({
                                                "ID": document["Number"],
                                                "DocumentName": content["Label"],
                                                "DocumentURL": content["URL"],
                                                "Type": getDocumentType(content["Label"]),
                                                "__OID": document["ID"],
                                                "__ShouldDownload": true
                                                // append any Document Custom Attribute here, eg;
                                                // "CustomAttribute": document["CustomAttribute"]
                                            });
                                        }
                                    
                                        var ext_loc = attachment["ExternalLocation"];
                                        if (!isNull(ext_loc)) {
                                            documents.push({
                                                "ID": document["Number"],
                                                "DocumentName": attachment["DisplayName"],
                                                "DocumentURL": ext_loc,
                                                "Type": getDocumentType(attachment["DisplayName"]),
                                                "__OID": document["ID"],
                                                "__ShouldDownload": false
                                                // append any Document Custom Attribute here, eg;
                                                // "CustomAttribute": document["CustomAttribute"]
                                            });
                                        }
                                    
                                        var url_loc = attachment["UrlLocation"];
                                        if (!isNull(url_loc)) {
                                            documents.push({
                                                "ID": document["Number"],
                                                "DocumentName": attachment["DisplayName"],
                                                "DocumentURL": url_loc,
                                                "Type": getDocumentType(attachment["DisplayName"]),
                                                "__OID": document["ID"],
                                                "__ShouldDownload": false
                                                // append any Document Custom Attribute here, eg;
                                                // "CustomAttribute": document["CustomAttribute"]
                                            });
                                        }
                                    };
                                    
                                    var extractFromDocument = function(documents, document) {
                                        var primary_content = document["PrimaryContent"];
                                        if (!isNullOrEmpty(primary_content)) {
                                            extractFromAttachment(documents, document, primary_content);
                                        }
                                    
                                        var attachments = document["Attachments"];
                                        if (!isNullOrEmpty(attachments)) {
                                            for (var i = 0; i < attachments.length; ++i) {
                                                var attachment = attachments[i];
                                                extractFromAttachment(documents, document, attachment);
                                            }
                                        }
                                    };
                                    
                                    var extractWorkDefinitionRelatedDocuments = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        if (isNullOrEmpty(bop["DescribedByDocuments"]) &&
                                            isNullOrEmpty(bop["ReferenceDocuments"])) {
                                            return undefined;
                                        }
                                    
                                        var related_docs = [];
                                    
                                        var document_describe_links = bop["DescribedByDocuments"];
                                        if (!isNullOrEmpty(document_describe_links)) {
                                            for (var i = 0; i < document_describe_links.length; ++i) {
                                                var dlink = document_describe_links[i];
                                                var described_by = dlink["DescribedBy"];
                                                if (isNullOrEmpty(described_by)) {
                                                    continue;
                                                }
                                    
                                                extractFromDocument(related_docs, described_by);
                                            }
                                        }
                                    
                                        var document_reference_links = bop["ReferenceDocuments"];
                                        if (!isNullOrEmpty(document_reference_links)) {
                                            for (var j = 0; j < document_reference_links.length; ++j) {
                                                var rlink = document_reference_links[j];
                                                var references = rlink["References"];
                                                if (isNullOrEmpty(references)) {
                                                    continue;
                                                }
                                    
                                                extractFromDocument(related_docs, references);
                                            }
                                        }
                                    
                                        return related_docs;
                                    };
                                    
                                    
                                    var getPVZUrl = function(id) {
                                        var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var auth_type = Things[connector_thing_name].GetConfigurationTable({tableName: "GenericConnectorConnectionSettings"}).getFirstRow().getStringValue("AuthenticationType");
                                        var base_url = Things[connector_thing_name].GetConfigurationTable({tableName: "HTTPConnectorConnectionSettings"}).getFirstRow().getStringValue("BaseURL");
                                    
                                        // "/servlet/odata/v1"
                                        var odata_prefix = Things[connector_thing_name].GetConfigurationTable({tableName: "HTTPConnectorConnectionSettings"}).getFirstRow().getStringValue("RelativeUrl");
                                        var endpoint = "/v2/Visualization/Representations('" + id + "')/PTC.Visualization.GetPVZ(IncludeAnnotations=true)";
                                    
                                        var url = undefined;
                                        if (auth_type === 'Fixed') {
                                            // MediaEntity should be 'basic'
                                            url = base_url + odata_prefix + endpoint;
                                        } else if (auth_type === 'None') {
                                            // MediaEntity should be 'SessionUser'
                                            url = base_url + odata_prefix + endpoint;
                                        } else if (auth_type === 'SSO') {
                                            // MediaEntity should be 'SSO'
                                            url = base_url + odata_prefix + endpoint;
                                        }
                                        return url;
                                    };
                                    
                                    var extractWorkDefinitionIllustrations = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        if (isNullOrEmpty(bop["Representations"])) {
                                            return undefined;
                                        }
                                    
                                        var illustrations = [];
                                    
                                        var representations = bop["Representations"];
                                        if (!isNullOrEmpty(representations)) {
                                            for (var i = 0; i < representations.length; ++i) {
                                                var representation = representations[i];
                                    
                                                var is_default = representation["DefaultRepresentation"];
                                                if (is_default === false) {
                                                    continue;
                                                }
                                    
                                                {
                                                    var name = representation["Name"];
                                                    var filename = name + ".zip";
                                                    var url = getPVZUrl(representation["ID"]);
                                    
                                                    illustrations.push({
                                                        "IllustrationName": filename,
                                                        "IllustrationURL": url,
                                                        "Type": getIllustrationType(filename),
                                                        "__OID": representation["ID"],
                                                        "__GeneratedURL": true,
                                                        "__ShouldDownload": true
                                                    });
                                                }
                                    
                                                var additional_files = representation["AdditionalFiles"];
                                                if (!isNullOrEmpty(additional_files)) {
                                                    for (var i = 0; i < additional_files.length; ++i) {
                                                        var additional_file = additional_files[i];
                                                        illustrations.push({
                                                            "IllustrationName": additional_file["Label"],
                                                            "IllustrationURL": additional_file["URL"],
                                                            "Type": getIllustrationType(additional_file["Label"]),
                                                            "__OID": representation["ID"],
                                                            "__ShouldDownload": true
                                                        });
                                                    }
                                                }
                                    
                                                var twod_url = representation["TwoDThumbnailURL"];
                                                if (!isNullOrEmpty(twod_url)) {
                                                    illustrations.push({
                                                        "IllustrationName": representation["Name"],
                                                        "IllustrationURL": twod_url["URL"],
                                                        "Type": "THUMBNAIL",
                                                        "__OID": representation["ID"],
                                                        "__ShouldDownload": true
                                                    });
                                                }
                                            }
                                        }
                                    
                                        return illustrations;
                                    };
                                    
                                    
                                    
                                    var extractWorkDefinitionControlCharacteristics = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        if (isNullOrEmpty(bop["ConsumedStandardCCs"])) {
                                            return undefined;
                                        }
                                    
                                        var std_ccs = [];
                                    
                                        var consumed_std_ccs = bop["ConsumedStandardCCs"];
                                        for (var i = 0; i < consumed_std_ccs.length; ++i) {
                                            var consumed_std_cc = consumed_std_ccs[i];
                                            var std_cc = consumed_std_cc["StandardCC"];
                                            if (!isNullOrEmpty(std_cc)) {
                                                std_ccs.push({
                                                    "ID": std_cc["Number"],
                                                    "Name": std_cc["Name"],
                                                    "Category": getStandardCCsCategory(std_cc),
                                                    "Description": std_cc["Description"],
                                                    "NominalValue": std_cc["NominalValue"],
                                                    //"UnitOfMeasure": std_cc["???"],
                                                    "LowLimit": std_cc["LowerValue"],
                                                    "UpLimit": std_cc["UpperValue"]
                                                    // append any StandardCC Custom Attribute here, eg;
                                                    // "CustomProperty": std_cc["CustomAttribute"]
                                                });
                                            }
                                        }
                                    
                                        return std_ccs;
                                    };
                                    
                                    
                                    var extractProcessingResourceClassForProcessMaterial = function(processMaterial) {
                                        if (isNullOrEmpty(processMaterial)) {
                                            return undefined;
                                        }
                                    
                                        var prc = {
                                            "ID": processMaterial["Number"],
                                            "Name": processMaterial["Name"],
                                            "Description": processMaterial["Description"]
                                            // append any Process Material Custom Attribute here, eg;
                                            // "CustomField": processMaterial["CustomAttribute"]
                                        };
                                    
                                        return prc;
                                    };
                                    
                                    var extractProcessingResourceClassForTooling = function(tooling) {
                                        if (isNullOrEmpty(tooling)) {
                                            return undefined;
                                        }
                                    
                                        var prc = {
                                            "ID": tooling["Number"],
                                            "Name": tooling["Name"],
                                            "Description": tooling["Description"]
                                            // append any Tooling Custom Attribute here, eg;
                                            // "CustomField": tooling["CustomAttribute"]
                                        };
                                    
                                        return prc;
                                    };
                                    
                                    var extractProcessingResourceClassForWorkCenter = function(workCenter) {
                                        if (isNullOrEmpty(workCenter)) {
                                            return undefined;
                                        }
                                    
                                        var prc = {
                                            "ID": workCenter["Number"],
                                            "Name": workCenter["Name"],
                                            "Description": workCenter["Description"]
                                            // append any WorkCenter Custom Attribute here, eg;
                                            // "CustomField": workCenter["CustomAttribute"]
                                        };
                                    
                                        return prc;
                                    };
                                    
                                    var extractWorkDefinitionProcessingResourceSpecificationForProcessMaterial = function(consumedProcessMaterial) {
                                        if (isNullOrEmpty(consumedProcessMaterial)) {
                                            return undefined;
                                        }
                                    
                                        var process_material = consumedProcessMaterial["ProcessMaterial"];
                                        if (isNullOrEmpty(process_material)) {
                                            return undefined;
                                        }
                                    
                                        var op_to_consumable_link = consumedProcessMaterial["OperationToConsumableLink"];
                                    
                                        var wdprs = {
                                            "Description": getDescription(op_to_consumable_link),
                                            "Quantity": getQuantity(op_to_consumable_link),
                                            "QuantityUnitOfMeasure": getQuantityUnitOfMeasure(op_to_consumable_link),
                                            // append any Custom Attribute here, eg;
                                            // "CustomLinkAttribute": op_to_consumable_link["CustomLinkAttribute"]
                                            "__ProcessingResourceClass": extractProcessingResourceClassForProcessMaterial(process_material)
                                        };
                                    
                                        return wdprs;
                                    };
                                    
                                    var extractWorkDefinitionProcessingResourceSpecificationForTooling = function(consumedTooling) {
                                        if (isNullOrEmpty(consumedTooling)) {
                                            return undefined;
                                        }
                                    
                                        var tooling = consumedTooling["Tooling"];
                                        if (isNullOrEmpty(tooling)) {
                                            return undefined;
                                        }
                                    
                                        var op_to_consumable_link = consumedTooling["OperationToConsumableLink"];
                                    
                                        var wdprs = {
                                            "Description": getDescription(op_to_consumable_link),
                                            "Quantity": getQuantity(op_to_consumable_link),
                                            "QuantityUnitOfMeasure": getQuantityUnitOfMeasure(op_to_consumable_link),
                                            // append any Custom Attribute here, eg;
                                            // "CustomLinkAttribute": op_to_consumable_link["CustomLinkAttribute"]
                                            "__ProcessingResourceClass": extractProcessingResourceClassForTooling(tooling)
                                        };
                                    
                                        return wdprs;
                                    };
                                    
                                    var extractWorkDefinitionProcessingResourceSpecificationForWorkCenter = function(consumedWorkCenter) {
                                        if (isNullOrEmpty(consumedWorkCenter)) {
                                            return undefined;
                                        }
                                    
                                        var work_center = consumedWorkCenter["WorkCenter"];
                                        if (isNullOrEmpty(work_center)) {
                                            return undefined;
                                        }
                                    
                                        var op_to_wc_link = consumedWorkCenter["OperationToWorkCenterLink"];
                                    
                                        var wdprs = {
                                            "Description": getDescription(op_to_wc_link),
                                            "Quantity": getQuantity(op_to_wc_link),
                                            "QuantityUnitOfMeasure": getQuantityUnitOfMeasure(op_to_wc_link),
                                            // append any Custom Attribute here, eg;
                                            // "CustomLinkAttribute": op_to_wc_link["CustomLinkAttribute"]
                                            "__ProcessingResourceClass": extractProcessingResourceClassForWorkCenter(work_center)
                                        };
                                    
                                        return wdprs;
                                    };
                                    
                                    
                                    var extractWorkDefinitionProcessingResourceSpecifications = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        if (isNullOrEmpty(bop["ConsumedProcessMaterials"]) &&
                                            isNullOrEmpty(bop["ConsumedToolings"]) &&
                                            isNullOrEmpty(bop["ConsumedWorkCenters"])) {
                                            return undefined;
                                        }
                                    
                                        var wd_proc_res_specs = [];
                                    
                                        var consumed_process_materials = bop["ConsumedProcessMaterials"];
                                        if (!isNullOrEmpty(consumed_process_materials)) {
                                            for (var i = 0; i < consumed_process_materials.length; ++i) {
                                                var consumed_process_material = consumed_process_materials[i];
                                                var wd_proc_res_spec = extractWorkDefinitionProcessingResourceSpecificationForProcessMaterial(consumed_process_material);
                                                if (!isNullOrEmpty(wd_proc_res_spec)) {
                                                    wd_proc_res_specs.push(wd_proc_res_spec);
                                                }
                                            }
                                        }
                                    
                                        var consumed_toolings = bop["ConsumedToolings"];
                                        if (!isNullOrEmpty(consumed_toolings)) {
                                            for (var j = 0; j < consumed_toolings.length; ++j) {
                                                var consumed_tooling = consumed_toolings[j];
                                                var wd_proc_res_spec = extractWorkDefinitionProcessingResourceSpecificationForTooling(consumed_tooling);
                                                if (!isNullOrEmpty(wd_proc_res_spec)) {
                                                    wd_proc_res_specs.push(wd_proc_res_spec);
                                                }
                                            }
                                        }
                                    
                                        var consumed_workcenters = bop["ConsumedWorkCenters"];
                                        if (!isNullOrEmpty(consumed_workcenters)) {
                                            for (var k = 0; k < consumed_workcenters.length; ++k) {
                                                var consumed_workcenter = consumed_workcenters[k];
                                                var wd_proc_res_spec = extractWorkDefinitionProcessingResourceSpecificationForWorkCenter(consumed_workcenter);
                                                if (!isNullOrEmpty(wd_proc_res_spec)) {
                                                    wd_proc_res_specs.push(wd_proc_res_spec);
                                                }
                                            }
                                        }
                                    
                                        return wd_proc_res_specs;
                                    };
                                    
                                    var extractPersonnelClass = function(skill) {
                                        if (isNullOrEmpty(skill)) {
                                            return undefined;
                                        }
                                    
                                        var pc = {
                                            "ID": skill["Number"],
                                            "Name": skill["Name"],
                                            "Description": skill["Description"]
                                            // append any Part Custom Attribute here, eg;
                                            // "CustomSkillAttribute": skill["CustomSkillAttribute"]
                                        };
                                    
                                        return pc;
                                    };
                                    
                                    
                                    var extractWorkDefinitionPersonnelSpecification = function(consumedSkill) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var skill = consumedSkill["Skill"];
                                        if (isNullOrEmpty(skill)) {
                                            return undefined;
                                        }
                                    
                                        var op_to_consumable_link = consumedSkill["OperationToConsumableLink"];
                                    
                                        var wd_pers_spec = {
                                            "Description": getDescription(op_to_consumable_link),
                                            "Quantity": getQuantity(op_to_consumable_link),
                                            "QuantityUnitOfMeasure": getQuantityUnitOfMeasure(op_to_consumable_link),
                                            "__PersonnelClass": extractPersonnelClass(skill)
                                        };
                                    
                                        return wd_pers_spec;
                                    };
                                    
                                    var extractWorkDefinitionPersonnelSpecifications = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var consumed_skills = bop["ConsumedSkills"];
                                        if (isNullOrEmpty(consumed_skills)) {
                                            return undefined;
                                        }
                                    
                                        var wd_pers_classes = [];
                                    
                                        for (var i = 0; i < consumed_skills.length; ++i) {
                                            var consumed_skill = consumed_skills[i];
                                            var wd_pers_class = extractWorkDefinitionPersonnelSpecification(consumed_skill);
                                            if (!isNullOrEmpty(wd_pers_class)) {
                                                wd_pers_classes.push(wd_pers_class);
                                            }
                                        }
                                    
                                        return wd_pers_classes;
                                    };
                                    
                                    var extractMaterialDefinition = function(part) {
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var md = {
                                            "ID": part["Number"],
                                            "Name": part["Name"],
                                            "Description": part["Description"],
                                            "DefaultUnit": getDefaultUnit(part),
                                            "Source": getSource(part),
                                            "Version": part["Version"],
                                            // append any Part Custom Attribute here, eg;
                                            // "CustomPartAttribute": part["CustomPartAttribute"]
                                            "__OID": part["ID"]
                                        };
                                    
                                        return md;
                                    };
                                    
                                    var extractWorkDefinitionMaterialSpecificationInstanceForPart = function(partPathOCCLink, occurrencePathPrefix) {
                                        if (isNullOrEmpty(partPathOCCLink)) {
                                            return undefined;
                                        }
                                    
                                        var wd_mat_spec_instance = {
                                            "OccurrencePath": getOccurrencePathForPart(occurrencePathPrefix, partPathOCCLink)
                                        };
                                    
                                        return wd_mat_spec_instance;
                                    };
                                    
                                    var extractWorkDefinitionMaterialSpecificationInstancesForPart = function(partPathOCCLinks, occurrencePathPrefix) {
                                        if (isNullOrEmpty(partPathOCCLinks)) {
                                            return undefined;
                                        }
                                    
                                        var wd_mat_spec_instances = [];
                                    
                                        if (!isNullOrEmpty(partPathOCCLinks)) {
                                            for (var i = 0; i < partPathOCCLinks.length; ++i) {
                                                var part_path_occ_link = partPathOCCLinks[i];
                                                var wd_mat_spec_instance = extractWorkDefinitionMaterialSpecificationInstanceForPart(part_path_occ_link, occurrencePathPrefix);
                                                if (!isNullOrEmpty(wd_mat_spec_instance)) {
                                                    wd_mat_spec_instances.push(wd_mat_spec_instance);
                                                }
                                            }
                                        }
                                    
                                        return wd_mat_spec_instances;
                                    };
                                    
                                    var extractWorkDefinitionMaterialSpecificationForPart = function(consumedPart, occurrencePathPrefix) {
                                        if (isNullOrEmpty(consumedPart)) {
                                            return undefined;
                                        }
                                    
                                        var part = consumedPart["Part"];
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var op_to_part_link = consumedPart["OperationToPartLink"];
                                        var part_path_occ_links = consumedPart["PartPathOccurrenceLinks"];
                                    
                                        occurrencePathPrefix = getOccurrencePathForOperationToPartLink(occurrencePathPrefix, op_to_part_link);
                                    
                                        var wd_mat_spec = {
                                            "Description": getDescription(op_to_part_link),
                                            "MaterialUse": getMaterialUse(op_to_part_link),
                                            "Quantity": getPartAllocationQuantity(consumedPart),
                                            "QuantityUnitOfMeasure": getPartAllocationQuantityUnitOfMeasure(consumedPart),
                                            "ComponentPath": getComponentPath(op_to_part_link),
                                            // We cannot use this occurrence path format with current ThingView widget.  Commenting out to avoid the need for filtering later.
                                            //"OccurrencePath": occurrencePathPrefix,
                                            "__MaterialDefinition": extractMaterialDefinition(part)
                                        };
                                    
                                        if (!isNullOrEmpty(part_path_occ_links)) {
                                            wd_mat_spec.__WorkDefinitionMaterialSpecificationInstances = extractWorkDefinitionMaterialSpecificationInstancesForPart(part_path_occ_links, occurrencePathPrefix);
                                        }
                                    
                                        return wd_mat_spec;
                                    };
                                    
                                    var extractWorkDefinitionMaterialSpecificationForOperatedOnPart = function(consumedOperatedOnPart, occurrencePathPrefix) {
                                        if (isNullOrEmpty(consumedOperatedOnPart)) {
                                            return undefined;
                                        }
                                    
                                        var part = consumedOperatedOnPart["Part"];
                                        if (isNullOrEmpty(part)) {
                                            return undefined;
                                        }
                                    
                                        var wd_mat_spec;
                                        var op_to_operated_part_link = consumedOperatedOnPart["OperationToOperatedPartLink"];
                                        var operatedOnMaterialUse = me.GetMaterialUseValue({
                                        materialUse: "operatedOn" /* STRING */
                                        });
                                    
                                        wd_mat_spec = {
                                            "Description": getDescription(op_to_operated_part_link),
                                            "MaterialUse": operatedOnMaterialUse,
                                            "Quantity": getOperatedOnPartAllocationQuantity(op_to_operated_part_link),
                                            "QuantityUnitOfMeasure": getOperatedOnPartAllocationQuantityUnitOfMeasure(op_to_operated_part_link),
                                            "ComponentPath": getComponentPath(op_to_operated_part_link),
                                            "OccurrencePath": getOccurrencePathForOperatedOnPart(occurrencePathPrefix, op_to_operated_part_link),
                                            "__MaterialDefinition": extractMaterialDefinition(part)
                                        };
                                    
                                        return wd_mat_spec;
                                    };
                                    
                                    var extractWorkDefinitionMaterialSpecifications = function(bop, occurrencePathPrefix) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var consumed_parts = bop["ConsumedParts"];
                                        var operated_on_parts = bop["ConsumedOperatedOnParts"];
                                        if (isNullOrEmpty(consumed_parts) && isNullOrEmpty(operated_on_parts)) {
                                            return undefined;
                                        }
                                    
                                        var wd_mat_specs = [];
                                    
                                        if (!isNullOrEmpty(consumed_parts)) {
                                            for (var i = 0; i < consumed_parts.length; ++i) {
                                                var consumed_part = consumed_parts[i];
                                                var wd_mat_spec = extractWorkDefinitionMaterialSpecificationForPart(consumed_part, occurrencePathPrefix);
                                                if (!isNullOrEmpty(wd_mat_spec)) {
                                                    wd_mat_specs.push(wd_mat_spec);
                                                }
                                            }
                                        }
                                    
                                        if (!isNullOrEmpty(operated_on_parts)) {
                                            for (var i = 0; i < operated_on_parts.length; ++i) {
                                                var operated_on_part = operated_on_parts[i];
                                                var wd_mat_spec = extractWorkDefinitionMaterialSpecificationForOperatedOnPart(operated_on_part, occurrencePathPrefix);
                                                if (!isNullOrEmpty(wd_mat_spec)) {
                                                    wd_mat_specs.push(wd_mat_spec);
                                                }
                                            }
                                        }
                                    
                                        return wd_mat_specs;
                                    };
                                    
                                    var extractWorkDefinition = function(bop, occurrencePathPrefix) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var op_holder = bop["OperationHolder"];
                                        if (isNullOrEmpty(op_holder)) {
                                            return undefined;
                                        }
                                    
                                        var wd = {
                                            "ID": op_holder["Number"],
                                            "Name": op_holder["Name"],
                                            "SequenceNumber": getSequenceNumber(bop["OperationHolderUsageLink"]),
                                            "WorkType": getWorkType(op_holder),
                                            "Description": op_holder["Description"],
                                            "LongDescription": op_holder["LongDescription"],
                                            "Version": op_holder["Version"],
                                            // append any Custom Attribute here, eg;
                                            // "CustomAttribute": op_holder["CustomAttribute"]
                                            "__OID": op_holder["ID"],
                                            "__WorkDefinitionControlCharacteristics": extractWorkDefinitionControlCharacteristics(bop),
                                            "__WorkDefinitionIllustrations": extractWorkDefinitionIllustrations(bop),
                                            "__WorkDefinitionLinks": extractWorkDefinitionLinks(bop, occurrencePathPrefix),
                                            "__WorkDefinitionMaterialSpecifications": extractWorkDefinitionMaterialSpecifications(bop, occurrencePathPrefix),
                                            "__WorkDefinitionPersonnelSpecifications": extractWorkDefinitionPersonnelSpecifications(bop),
                                            "__WorkDefinitionProcessingResourceSpecifications": extractWorkDefinitionProcessingResourceSpecifications(bop),
                                            "__WorkDefinitionRelatedDocuments": extractWorkDefinitionRelatedDocuments(bop)
                                        };
                                        return wd;
                                    };
                                    
                                    var extractWorkDefinitionLink = function(bop, occurrencePathPrefix) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var op_holder = bop["OperationHolder"];
                                        if (isNullOrEmpty(op_holder)) {
                                            return undefined;
                                        }
                                    
                                        if (op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.operation.MPMOperation") == -1 &&
                                            op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.operation.MPMStandardOperation") == -1 &&
                                            op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.MPMProcessPlan") == -1) {
                                            // TODO: we should have a more robust method to determine if an Entity is a child of 'Operation' than to look at the ID.
                                            return undefined;
                                        }
                                    
                                        var op_holder_link = bop["OperationHolderUsageLink"];
                                    
                                        occurrencePathPrefix = getOccurrencePathForOperationHolderUsageLink(occurrencePathPrefix, op_holder_link);
                                    
                                        var wd_link = {
                                            "Description": op_holder_link["Description"],
                                            "__OID": op_holder_link["ID"],
                                            "__WorkDefinition": extractWorkDefinition(bop, occurrencePathPrefix)
                                        };
                                    
                                        return wd_link;
                                    };
                                    
                                    var extractWorkDefinitionLinks = function(bop, occurrencePathPrefix) {
                                        if (isNullOrEmpty(bop)) {
                                            return undefined;
                                        }
                                    
                                        var wd_links = undefined;
                                    
                                        var components = bop["Components"];
                                        if (!isNullOrEmpty(components)) {
                                            wd_links = [];
                                            for (var i = 0; i < components.length; ++i) {
                                                var component = components[i];
                                                var wd_link = extractWorkDefinitionLink(component, occurrencePathPrefix);
                                                if (!isNullOrEmpty(wd_link)) {
                                                    wd_links.push(wd_link);
                                                }
                                            }
                                        }
                                    
                                        return wd_links;
                                    };
                                    
                                    var extractWDJson = function(bop) {
                                        if (isNullOrEmpty(bop)) {
                                            return {};
                                        }
                                    
                                        // start with empty path prefix
                                        var occurrence_path_prefix = "";
                                    
                                        var wd = {
                                            "ID": bop["Number"],
                                            "Name": bop["Name"],
                                            "SequenceNumber": undefined,
                                            "WorkType": 1,
                                            "__OID": bop["OperationHolderId"],
                                            "__WorkDefinitionLinks": extractWorkDefinitionLinks(bop, occurrence_path_prefix),
                                            "__WorkDefinitionRelatedDocuments": extractWorkDefinitionRelatedDocuments(bop)
                                        };
                                    
                                        return wd;
                                    };
                                    
                                    var main = function(bop) {
                                        var wd_json = extractWDJson(bop);
                                        return wd_json;
                                    };
                                    
                                    var result = main(bop);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
