<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className=""
         description="The thing shape for Job Order Utils ThingShape {PTC.SCA.SCO.JobOrderUtilsThingShape}"
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:16.152+05:30"
         name="PTC.SCA.SCO.JobOrderUtilsThingShape"
         projectName=""
         tags="PTC:OA">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Build a display string based on filter information of a query"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetFilteredByString">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="QUERY"
                         description=""
                         name="jsonValue"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetJobOrder">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.JobOrder"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="UID"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetJobOrderMaterialRequirements">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.JobOrderMaterialRequirement"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.tagType="ModelTags"
                         baseType="NUMBER"
                         description=""
                         name="JobOrderUID"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetJobOrders">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.JobOrder"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description=""
                         name="filter"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="limit"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="offset"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetJobOrderSummaries">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.JobOrderSummary"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="QUERY"
                         description=""
                         name="filter"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="limit"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="offset"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetJobOrderSummary">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.JobOrderSummary"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="UID"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMaterialDefinition">
                    <ResultType
                     aspect.dataShape="PTC.SCA.SCO.MaterialDefinition"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.tagType="ModelTags"
                         baseType="NUMBER"
                         description=""
                         name="UID"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetPagingOffset">
                    <ResultType
                     baseType="INTEGER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="pageNumber"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="pageSize"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetProductionOrderManager">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Get the number of rows in infotable"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetRowCount">
                    <ResultType
                     baseType="INTEGER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="data"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Build a display string based on sorting information of a query"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSortedByString">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="QUERY"
                         description=""
                         name="jsonValue"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTokenForProperty">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="fieldName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTokenForPropertyAndValue">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="fieldName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="value"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="JobOrderStart">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="job order UID"
                         name="UID"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetFilteredByString">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var filters= jsonValue.filters;
                                    var typeMap = {
                                        EQ: getToken("equalTo"),
                                        NE: getToken("notEqualTo"),
                                        GT: getToken("greaterThan"),
                                        GE: getToken("greaterThanOrEqualTo"),
                                        LT: getToken("lessThan"),
                                        LE: getToken("lessThanOrEqualTo"),
                                        LIKE: getToken("PTC.SCA.SCO.Like")
                                    };
                                    
                                    var value = filters.value;
                                    
                                    if( value != null && value != ''){
                                        var key = "PTC.SCA.SCO." + filters.fieldName + filters.value;
                                        var params = {
                                            token: key /* STRING */
                                        };
                                        var tokenValue = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken(params);
                                        if(tokenValue != "???")
                                        {
                                            value = tokenValue
                                        }
                                    }
                                    
                                    result=getTokenForProperty(filters.fieldName)+" "+typeMap[filters.type]+" "+value;
                                    
                                    
                                    function getToken(fieldName){
                                        var params = {
                                            token: fieldName /* STRING */
                                        };
                                        return Resources["RuntimeLocalizationFunctions"].GetEffectiveToken(params);
                                    }
                                    
                                    function getTokenForProperty(fieldName){
                                        var params = {
                                            fieldName: fieldName /* STRING */
                                        };
                                        return me.GetTokenForProperty(params);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetJobOrder">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                        UID: UID, /* STRING */
                                        dataShapeName: "PTC.SCA.SCO.JobOrder"
                                    };
                                    // result: INFOTABLE dataShape: PTC.SCA.SCO.JobOrder
                                    var result = Things[me.GetProductionOrderManager()].GetJobOrder(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetJobOrderMaterialRequirements">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    params = {JobOrderUID: JobOrderUID};
                                    var result = Things[me.GetProductionOrderManager()].GetJobOrderMaterialRequirements(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetJobOrders">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                        filter: filter,
                                        offset: offset,
                                        limit: limit
                                    };
                                    // result: INFOTABLE dataShape: PTC.SCA.SCO.JobOrder
                                    var result = Things[me.GetProductionOrderManager()].GetJobOrders(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetJobOrderSummaries">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    logger.info("filter: " + filter);
                                    var params = {
                                        filter: filter /* JSON */,
                                        offset: offset,
                                        limit: limit
                                    };
                                    
                                    // result: INFOTABLE dataShape: "PTC.SCA.SCO.JobOrder"
                                    var jobOrders = me.GetJobOrders(params);
                                    params = {
                                        infoTableName : "InfoTable",
                                        dataShapeName : "PTC.SCA.SCO.JobOrderSummary"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTC.SCA.SCO.JobOrderSummary)
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                    var tableLength = jobOrders.rows.length;
                                    var detailMashupName = getDetailMashup("JobOrderDetailContainerMashup");
                                    
                                    for (var x = 0; x < tableLength; x++) {
                                        var row = jobOrders.rows[x];
                                    
                                        // PTC.SCA.SCO.JobOrderSummary entry object
                                        var newEntry = new Object();
                                        newEntry.jobOrderID = row.ID;
                                        newEntry.UID = row.UID;
                                        newEntry.priorityDisplayString = getLocalizedString("Priority",row.Priority);
                                        newEntry.dispatchStatusDisplayString = getLocalizedString("DispatchStatus",row.DispatchStatus);
                                        newEntry.productionOrderNumber = detailMashupName;
                                        newEntry.typeDisplayString = row.Description;
                                        newEntry.location = row.HierarchyScope;
                                        newEntry.workTypeDisplayString = getLocalizedString("WorkType",row.WorkType);
                                        newEntry.dispatchStatus = row.DispatchStatus;
                                        newEntry.actualStartTime=row.ActualStartTime;
                                        newEntry.actualEndTime=row.ActualEndTime;
                                        newEntry.plannedStartTime=row.PlannedStartTime;
                                        newEntry.plannedEndTime=row.PlannedEndTime;
                                    
                                        params = {
                                            JobOrderUID: row.UID
                                        };
                                        var material = getMaterialInfo(params);
                                    
                                        newEntry.materialDefinitionId=material.materialDefinitionID;
                                        newEntry.quantityRequired=material.quantityRequired;
                                        logger.info("material.materialDefinitionID: " + material.materialDefinitionID);
                                        logger.info("material.quantityRequired: " + material.quantityRequired);
                                        result.AddRow(newEntry);
                                    }
                                    
                                    function getMaterialInfo(params)
                                    {
                                        //Finding the Product used in the Job Order: In the JobOrderMaterialRequirement Table
                                        //where MaterialUse==Produced. PTC.SCA.SCO.MaterialUse Produced == 2.
                                        var material = {
                                            materialDefinitionID : "", quantityRequired : ""};
                                    
                                        var infoTable = me.GetJobOrderMaterialRequirements(params);
                                        var tableLength = infoTable.rows.length;
                                        logger.info("tableLength: " + tableLength);
                                        for (var i=0; i < tableLength; i++) {
                                            var row = infoTable.rows[i];
                                            var materialUse = row.MaterialUse;
                                            logger.error("MaterialUse: " + materialUse);
                                            if ( materialUse == 2 )
                                            {
                                                logger.info("MaterialUse Produced Found: " + row.MaterialUse);
                                                params = {
                                                    UID: row.MaterialDefinitionUID
                                                };
                                    
                                                material.quantityRequired=row.Quantity.toString() + " " + row.QuantityUnitOfMeasure.toString();
                                                var materialInfoTable = me.GetMaterialDefinition(params);
                                                var materialTableLength = materialInfoTable.rows.length;
                                                logger.info("materialTableLength: " + materialTableLength);
                                                for (var j=0; j < materialTableLength; j++) {
                                                    var materialRow = materialInfoTable.rows[j];
                                                    material.materialDefinitionID = materialRow.ID;
                                                }
                                                break;
                                            }
                                        }
                                        return material;
                                    }
                                    
                                    function getLocalizedString(fieldName,value) {
                                        var params = {
                                            fieldName: fieldName /* STRING */,
                                            value: value /* STRING */
                                        };
                                        // result: STRING
                                        return me.GetTokenForPropertyAndValue(params);
                                    }
                                    
                                    function getDetailMashup(launchPointDes){
                                        var params = {
                                            launchPointDescription: launchPointDes /* STRING */
                                        };
                                        return Things["PTC.Factory.LaunchPointConfigurationThing"].GetLaunchPointEntityName(params);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetJobOrderSummary">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var filter = {
                                        filters:{
                                            fieldName:"UID",
                                            type:"EQ",
                                            value:UID
                                        }
                                    };
                                    
                                    var params = {
                                        filter: filter /* JSON */
                                    };
                                    
                                    // result: INFOTABLE dataShape: "PTC.SCA.SCO.JobOrderSummary"
                                    var result = me.GetJobOrderSummaries(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMaterialDefinition">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    params = {UID: UID};
                                    var result = Things[me.GetProductionOrderManager()].GetMaterialDefinition(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetPagingOffset">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = 0;
                                    if(pageNumber>0){
                                        result = pageNumber* pageSize;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetProductionOrderManager">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Things["PTC.Factory.LaunchPointConfigurationThing"].GetProductionOrderManagerThingName();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetRowCount">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = data.rows.length;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSortedByString">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var sorts = jsonValue.sorts;
                                    result="";
                                    for(var i =0;i<sorts.length;i++){
                                        result = result + getTokenForProperty(sorts[i].fieldName) + ", ";
                                    }
                                    result = result.substring(0,result.length -2);
                                    
                                    function getTokenForProperty(fieldName){
                                        var params = {
                                            fieldName: fieldName /* STRING */
                                        };
                                        return me.GetTokenForProperty(params);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTokenForProperty">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var key = "PTC.SCA.SCO." + fieldName;
                                    var tokenString = key;
                                    var params = {
                                        token: tokenString /* STRING */
                                    };
                                    var result = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken(params);
                                    if(result == "???") {
                                        logger.error("Missing localization token: " + key);
                                        result = key + "???";
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTokenForPropertyAndValue">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var key = "PTC.SCA.SCO." + fieldName + value;
                                    var params = {
                                        token: key /* STRING */
                                    };
                                    var result = Resources["RuntimeLocalizationFunctions"].GetEffectiveToken(params);
                                    if(result == "???") {
                                        logger.error("Missing localization token: " + key);
                                        result = key + "???";
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="JobOrderStart">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var logMessage = "The job order of " + UID + " starts.";
                                    if (!UID || 0 === UID.length)
                                    {
                                        logMessage = "The job order UID is empty!.";
                                    }
                                    logger.info(logMessage);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
