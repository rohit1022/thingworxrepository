<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className=""
         description="Thing Shape that holds all necessary properties and services that retrieves processing resource information from MPMLink {PTC.SCA.SCO.WorkDefinitionConnectorThingShape}"
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-03-19T18:16:16.117+05:30"
         name="PTC.SCA.SCO.WorkDefinitionConnectorThingShape"
         projectName=""
         tags="PTC:OA">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="BatchFetchBOMsFromPartIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="partIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="BatchFetchBOPFromProcessPlanID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ExtractURLContentsFromDocuments">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="documentsByOperation"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="Fetch2DThumbnailsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchAllocatedPartsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED-OA9.0*** This service has been replaced by FetchAllocatedPartsFromOperationIDs and will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchAllocatedPartsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchBOMFromPartID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="partId"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED-OA9.0*** This service has been replaced by FetchBOMFromPartID and will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchBOMFromPartId">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="navigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="partId"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchBOPFromProcessPlanID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED-OA9.0*** This service has been replaced by FetchBOPFromProcessPlanID and will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchBOPFromProcessPlanId">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchBOPStructureFromProcessPlanID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDefaultRepresentationsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromEntityIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="entityIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromEntityIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="entityIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromProcessPlan">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="ppIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchDescribedByDocumentsFromProcessPlanIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="ppIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchIllustrationsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchPartsFromNumber">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="partNumber"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED-OA9.0*** This service has been replaced by FetchProcessMaterialsFromOperationIDs and will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchProcessMaterialsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchProcessMaterialsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchProcessPlansFromPartId">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="partId"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchProcessPlansFromProcessPlanNumber">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanNumber"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromEntityIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="entityIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromEntityIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="entityIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromProcessPlanIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="ppIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchReferenceDocumentsFromProcessPlanIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="navigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="ppIds"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED-OA9.0*** This service has been replaced by FetchResourcesFromOperationIDs and will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchResourcesFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="consumedResultKey"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="linkType"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="resourceType"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchResourcesFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="consumedResultKey"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="linkType"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="resourceType"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchSkillsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchSkillsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchStandardCCsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchStandardCCsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchToolingsFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchToolingsFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchWorkCentersFromOperationIDs">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FetchWorkCentersFromOperationIds">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description=""
                         name="operationIds"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="processPlanNavigationCriteriaId"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="relatedAssemblyNavigationCriteriaId"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetProcessPlanByID">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="processPlanId"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="processPlanNavigationCriteria"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description=""
                         name="relatedAssemblyNavigationCriteria"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="BatchFetchBOMsFromPartIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined) || (obj === null);
                                    };
                                    
                                    var fetchBOMs = function(partOIDs, navigationCriteria) {
                                        logger.trace("BatchFetchBOMsFromPartIds::fetchBOMs(" + partOIDs + ")");
                                    
                                        var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    
                                        var boms = {};
                                    
                                        var part_oids = partOIDs["value"];
                                        if (isNull(part_oids)) {
                                            return boms;
                                        }
                                    
                                        var route_payload;
                                        if (!isNull(navigationCriteria)) {
                                            route_payload = { "NavigationCriteria": navigationCriteria };
                                        }
                                    
                                        for (var i = 0; i < part_oids.length; ++i) {
                                            var part_oid = part_oids[i];
                                    
                                            var odata_response = Things[connector_thing_name].GetBOMWithInlineNavCriteria({
                                                "ID": part_oid,
                                                "NavigationCriteria": route_payload,
                                                $expand: "Part,Components($expand=Part,PartUse,Occurrences;$levels=max)"
                                            });
                                    
                                            if (isNull(odata_response)) {
                                                logger.warn("[BatchFetchBOMsFromPartIds] Couldn't retrieved from connector (ID:" + part_oid + ")");
                                                continue;
                                            }
                                    
                                            if (odata_response["Components"] === undefined) {
                                                logger.warn("[BatchFetchBOMsFromPartIds] BOM didn't contains 'Components' for (ID:" + part_oid + ")");
                                                continue;
                                            }
                                    
                                            if (odata_response["Components"].length === 0) {
                                                logger.trace("[BatchFetchBOMsFromPartIds] No BOM found for (ID:" + part_oid + ")");
                                                boms[part_oid] = {};
                                                continue;
                                            }
                                    
                                            boms[part_oid] = odata_response;
                                        }
                                    
                                        return boms;
                                    };
                                    
                                    /**
                                     * Inputs
                                     *     partIds: { "value": [ "<PartOID1>", "<PartOID2>", ... ]}
                                     *     navigationCriteria: { ...NavigationCriteria... }
                                     *
                                     * Returns
                                     *     {
                                     *         "PartOID1" : { ...BOM1... },
                                     *         "PartOID2" : { ...BOM2... },
                                     *         ...
                                     *     }
                                     */
                                    var result = fetchBOMs(partIds, navigationCriteria);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="BatchFetchBOPFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    
                                    var route_payload;
                                    if (!isNull(processPlanNavigationCriteria)) {
                                        route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                    }
                                    if (!isNull(relatedAssemblyNavigationCriteria)) {
                                        if (isNull(route_payload)) {
                                            route_payload = {};
                                        }
                                        route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                    }
                                    
                                    var odata_bop = Things[connector_thing_name].BatchGetBOPWithInlineNavCriteria({
                                        "ID": processPlanId,
                                        "processPlanNavigationCriteria": route_payload
                                    });
                                    
                                    var result = odata_bop;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ExtractURLContentsFromDocuments">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var extractURLContents = function(docsById) {
                                        if (logger.traceEnabled) {
                                            logger.trace("ExtractURLContentsFromDocuments::extractURLContents(" + JSON.stringify(docsById) + ")");
                                        }
                                    
                                        var contents = [];
                                    
                                        for (var i = 0; i < docsById.length; ++i) {
                                            var docs_for_an_entity = docsById[i];
                                            var entity_oid = docs_for_an_entity["oid"];
                                            var odata_docs = docs_for_an_entity["odata_docs"];
                                    
                                            for (var j = 0; j < odata_docs.length; ++j) {
                                                var odata_doc = odata_docs[j];
                                                var doc_oid = odata_doc["ID"];
                                                var doc_number = odata_doc["Number"];
                                    
                                                var odata_prim_content = odata_doc["PrimaryContent"];
                                                if (odata_prim_content !== undefined && odata_prim_content !== null) {
                                                    // Process: Primary Content
                                                    var odata_content = odata_prim_content["Content"];
                                                    if (odata_content !== undefined && odata_content !== null) {
                                                        // Primary Content created as "Local"
                                                        // "Content": { "URL": "...", "Label": "..." }
                                                        contents.push({ "entity_oid": entity_oid,
                                                                        "doc_oid": doc_oid,
                                                                        "doc_number": doc_number,
                                                                        "content": odata_content,
                                                                        "should_download": true });
                                                    }
                                    
                                                    var odata_ext_loc = odata_prim_content["ExternalLocation"];
                                                    if (odata_ext_loc !== undefined && odata_ext_loc !== null) {
                                                        // Primary Content created as "External Location"
                                                        // "DisplayName": "<some-label>"
                                                        // "ExternalLocation": "<some-notes>"
                                                        // FACTORY-17923: we will not attempt to download, instead storing URL and Label as-is
                                                        contents.push({ "entity_oid": entity_oid,
                                                                        "doc_oid": doc_oid,
                                                                        "doc_number": doc_number,
                                                                        "content": { "URL": odata_ext_loc, "Label": odata_prim_content["DisplayName"] },
                                                                        "should_download": false });
                                                    }
                                    
                                                    var odata_url_loc = odata_prim_content["UrlLocation"];
                                                    if (odata_url_loc !== undefined && odata_url_loc !== null) {
                                                        // Primary Content created as "URL"
                                                        // "DisplayName": "<some-label>"
                                                        // "UrlLocation": "<some-url>"
                                                        // FACTORY-17923: we will not attempt to download, instead storing URL and Label as-is
                                                        contents.push({ "entity_oid": entity_oid,
                                                                        "doc_oid": doc_oid,
                                                                        "doc_number": doc_number,
                                                                        "content": { "URL": odata_url_loc, "Label": odata_prim_content["DisplayName"] },
                                                                        "should_download": false });
                                                    }
                                                }
                                    
                                    
                                                var odata_attachments = odata_doc["Attachments"];
                                                if (odata_attachments !== undefined && odata_attachments !== null) {
                                                    // Process: Attachments
                                                    for (var k = 0; k < odata_attachments.length; ++k) {
                                                        var odata_attachment = odata_attachments[k];
                                    
                                                        var odata_content = odata_attachment["Content"];
                                                        if (odata_content !== undefined && odata_content !== null) {
                                                            // Attachment created as "Local"
                                                            // "Content": { "URL": "...", "Label": "..." }
                                                            contents.push({ "entity_oid": entity_oid,
                                                                            "doc_oid": doc_oid,
                                                                            "doc_number": doc_number,
                                                                            "content": odata_content,
                                                                            "should_download": true});
                                                        }
                                    
                                                        var odata_ext_loc = odata_attachment["ExternalLocation"];
                                                        if (odata_ext_loc !== undefined && odata_ext_loc !== null) {
                                                            // Attachment created as "External Location"
                                                            // "DisplayName": "<some-label>"
                                                            // "ExternalLocation": "<some-notes>"
                                                            // FACTORY-17923: we will not attempt to download, instead storing URL and Label as-is
                                                            contents.push({ "entity_oid": entity_oid,
                                                                            "doc_oid": doc_oid,
                                                                            "doc_number": doc_number,
                                                                            "content": { "URL": odata_ext_loc, "Label": odata_attachment["DisplayName"] },
                                                                            "should_download": false });
                                                        }
                                    
                                                        var odata_url_loc = odata_attachment["UrlLocation"];
                                                        if (odata_url_loc !== undefined && odata_url_loc !== null) {
                                                            // Attachmentt created as "URL"
                                                            // "DisplayName": "<some-label>"
                                                            // "UrlLocation": "<some-url>"
                                                            // FACTORY-17923: we will not attempt to download, instead storing URL and Label as-is
                                                            contents.push({ "entity_oid": entity_oid,
                                                                            "doc_oid": doc_oid,
                                                                            "doc_number": doc_number,
                                                                            "content": { "URL": odata_url_loc, "Label": odata_attachment["DisplayName"] },
                                                                            "should_download": false });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    
                                        return contents;
                                    };
                                    
                                    
                                    /**
                                     * Inputs
                                     *     documentsByOperation:
                                     *         { "value" : [ { "oid" : "<Operation OID>",
                                     *                         "odata_docs": [ <Windchill Document OData>, ... ] }
                                     *
                                     * Returns
                                     *     { "docs" : [ { "entity_oid": "<Entity OID>",
                                     *                    "doc_oid": <Document OID>",
                                     *                    "doc_number": "<Document Number>",
                                     *                    "content": { "URL": "url", "Label": "label" },
                                     *                    "should_download": true/false },
                                     *                  { ... },
                                     *                ]
                                     *     }
                                     */
                                    var result = { "docs": [] };
                                    
                                    var documents_by_ids = documentsByOperation["value"];
                                    result["docs"] = extractURLContents(documents_by_ids);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="Fetch2DThumbnailsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var extractURLContents = function(repsByOp) {
                                          if (logger.traceEnabled) {
                                              logger.trace("Extract2DThumbnailsFromRepresentations::extractURLContents(" + JSON.stringify(repsByOp) + ")");
                                          }
                                          var contents = [];
                                          for (var i = 0; i < repsByOp.length; ++i) {
                                              var reps_for_an_op = repsByOp[i];
                                              var entity_oid = reps_for_an_op["oid"];
                                              var odata_reps = reps_for_an_op["odata_default_representations"];
                                              for (var j = 0; j < odata_reps.length; ++j) {
                                                  var odata_rep = odata_reps[j];
                                                  var rep_oid = odata_rep["ID"];
                                                  var rep_number = odata_rep["Number"];
                                                  var name = odata_rep["Name"];
                                                  var twodthumbnail = odata_rep["TwoDThumbnailURL"];
                                    
                                                  if (twodthumbnail !== undefined && twodthumbnail !== null) {
                                                      // "Content": { "URL": "...", "Label": "..." }
                                                      contents.push({ "entity_oid": entity_oid,
                                                                     "doc_oid": rep_oid,
                                                                     "doc_number": rep_number,
                                                                     "content": twodthumbnail,
                                                                     "type":"THUMBNAIL",
                                                                     "should_download": true,
                                                                     "name": name });
                                                  }
                                              }
                                          }
                                          return contents;
                                    };
                                    
                                    
                                    /**
                                     * Inputs
                                     *     representationsByOperation:
                                     *         { "value" : [ { "oid" : "<Operation OID>",
                                     *                         "odata_default_representations": [ <Windchill representation OData>, ... ] }
                                     *
                                     * Returns
                                     *     { "docs" : [ { "entity_oid": "<Operation OID>",
                                     *                    "doc_oid": <Document OID>",
                                     *                    "doc_number": "<Document Number>",
                                     *                    "content": { "URL": "url", "Label": "label" },
                                     *                     "type": "THUMBNAIL",
                                     *                    "should_download": true/false },
                                     *                  { ... },
                                     *                ]
                                     *     }
                                     */
                                    var result = { "docs": [] };
                                    var representationsByOperation = me.FetchDefaultRepresentationsFromOperationIds({
                                        operationIds: operationIds
                                    });
                                    var reps_by_operation = representationsByOperation["defaultRepresentationsByOperation"];
                                    result["docs"] = extractURLContents(reps_by_operation);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchAllocatedPartsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var getValue = function(value, defaultValue) {
                                        var result = value;
                                        if (isNullOrEmpty(value)) {
                                            result = defaultValue;
                                        }
                                        return result;
                                    };
                                    
                                    var fetchAllocatedParts = function(oids, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchAllocatedPartsFromOperationIDs::fetchAllocatedParts(" + JSON.stringify(oids) +
                                                          ", " + processPlanNavigationCriteria +
                                                          ", " + relatedAssemblyNavigationCriteria + ")");
                                    
                                        }
                                    
                                        var route_payload;
                                        if (!isNull(processPlanNavigationCriteria)) {
                                            route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                        }
                                        if (!isNull(relatedAssemblyNavigationCriteria)) {
                                            if (isNull(route_payload)) {
                                                route_payload = {};
                                            }
                                            route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var expand = "ConsumedParts($expand=Part,OperationToPartLink,PartPathOccurrenceLinks)";
                                    
                                        var consumed_parts = [];
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response;
                                            try {
                                                odata_response = Things[connector_thing_name].GetConsumedWithInlineNavCriteria({
                                                    "ID": oid,
                                                    "processPlanNavigationCriteria": route_payload,
                                                    "$expand": expand
                                                });
                                            } catch (err) {
                                                logger.error("[FetchAllocatedPartsFromOperationIDs::fetchAllocatedParts] Error occured while consuming " + err);
                                            }
                                            if (odata_response === undefined || odata_response === null ) {
                                                continue;
                                            }
                                    
                                            var odata_parts = odata_response["ConsumedParts"];
                                            consumed_parts.push({ "oid": oid, "odata_consumedParts": odata_parts });
                                        }
                                    
                                        return consumed_parts;
                                    };
                                    
                                    var extractAllocatedParts = function(consumedPartsByOp) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchAllocatedPartsFromOperationIDs::extractAllocatedParts(" + JSON.stringify(consumedPartsByOp) + ")");
                                        }
                                    
                                        var allocated_parts = [];
                                    
                                        for (var i = 0; i < consumedPartsByOp.length; ++i) {
                                            var consumedParts_for_an_op = consumedPartsByOp[i];
                                            var entity_oid = consumedParts_for_an_op["oid"];
                                            var odata_consumedParts = consumedParts_for_an_op["odata_consumedParts"];
                                            for (var j = 0; j < odata_consumedParts.length; ++j) {
                                                var odata_consumedPart = odata_consumedParts[j];
                                    
                                                var odata_part = odata_consumedPart["Part"];
                                                if (odata_part === undefined || odata_part === null) {
                                                    continue;
                                                }
                                    
                                                var part_oid = odata_part["ID"];
                                                var part_number = odata_part["Number"];
                                                var part_name = odata_part["Name"];
                                                var part_source = odata_part["Source"]["Value"];
                                                var part_defaultUnit = odata_part["DefaultUnit"]["Value"];
                                                var part_version = odata_part["Version"];
                                                var description;
                                                var materialUse;
                                                var quantity;
                                                var quantity_uom;
                                                var occurrence_path;
                                                var component_path;
                                                var op_partLink = odata_consumedPart["OperationToPartLink"];
                                                if (op_partLink !== undefined && op_partLink !== null) {
                                                    description = op_partLink["Description"];
                                                    materialUse = op_partLink["AllocationType"]["Value"];
                                                    quantity = odata_consumedPart["PartAllocationQuantity"];
                                                    quantity_uom = odata_consumedPart["PartAllocationUnit"];
                                                    component_path = op_partLink["UsageIdPath"];
                                                }
                                    
                                                var op_occLinks = odata_consumedPart["PartPathOccurrenceLinks"];
                                                if (op_occLinks !== undefined && op_occLinks !== null && op_occLinks.length > 0) {
                                                    occurrence_path =  op_occLinks[0]["OccUniqueIdentifierPath"];
                                                }
                                    
                                                allocated_parts.push({ "entity_oid": entity_oid,
                                                                       "part_oid": part_oid,
                                                                       "part_number": part_number,
                                                                       "part_name": part_name,
                                                                       "part_source": part_source,
                                                                       "part_defaultUnit": part_defaultUnit,
                                                                       "part_version": part_version,
                                                                       "description": description,
                                                                       "materialUse": materialUse,
                                                                       "quantity": quantity,
                                                                       "quantityUnitOfMeasure": quantity_uom,
                                                                       "componentPath": component_path,
                                                                       "occurrencePath": occurrence_path});
                                                }
                                            }
                                    
                                        return allocated_parts;
                                    };
                                    
                                    /**
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "consumedParts" : [
                                     *           { "entity_oid": "<Operation OID>",
                                     *             "part_oid": <Part OID>",
                                     *             "part_number": "<Part Number>",
                                     *             "part_name": "<Part Name>",
                                     *             ... }
                                     *           { ... },
                                     *       ]
                                     *     }
                                     */
                                    var result = { "consumedParts": [] };
                                    
                                    var oids_array = operationIds["value"];
                                    var odata_consumedParts = fetchAllocatedParts(oids_array, processPlanNavigationCriteria, relatedAssemblyNavigationCriteria);
                                    if (odata_consumedParts.length > 0) {
                                        result["consumedParts"] = extractAllocatedParts(odata_consumedParts);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchAllocatedPartsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmptyString = function(str) {
                                        return isNull(str) || (str.trim() === "");
                                    };
                                    
                                    var pp_nc;
                                    if (!isNullOrEmptyString(processPlanNavigationCriteriaId)) {
                                        pp_nc = { "ID": processPlanNavigationCriteriaId };
                                    }
                                    var ra_nc;
                                    if (!isNullOrEmptyString(relatedAssemblyNavigationCriteriaId)) {
                                        ra_nc = { "ID": relatedAssemblyNavigationCriteriaId };
                                    }
                                    
                                    var result = me.FetchAllocatedPartsFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": pp_nc,
                                        "relatedAssemblyNavigationCriteria": ra_nc
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchBOMFromPartID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var fetchBOM = function(partOID, navigationCriteria) {
                                        logger.trace("FetchBOMFromPartID::fetchBOM(" + partOID + "," + navigationCriteria + ")");
                                    
                                        var route_payload;
                                        if (!isNull(navigationCriteria)) {
                                            route_payload = { "NavigationCriteria": navigationCriteria };
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_response = Things[connector_thing_name].GetBOMWithInlineNavCriteria({
                                             "ID": partOID,
                                             "NavigationCriteria": route_payload,
                                             "$expand": "Components($expand=Part,PartUse,Occurrences;$levels=max)"
                                        });
                                    
                                        if (odata_response["Components"] === undefined) {
                                            logger.warn("[FetchBOMFromPartID] Couldn't retrieved from connector");
                                            return null;
                                        }
                                    
                                        if (odata_response["Components"].length === 0) {
                                            logger.trace("[FetchBOMFromPartID] No BOM found");
                                            return [];
                                        }
                                    
                                        return odata_response["Components"];
                                    };
                                    
                                    var extractPart = function(odataPart) {
                                        if (odataPart === undefined) {
                                            logger.trace("FetchBOMFromPartID::extractPart: odataPart === undefined");
                                            return undefined;
                                        }
                                    
                                        logger.trace("FetchBOMFromPartID::extractPart: " + odataPart["ID"]);
                                    
                                        var part = {
                                            "part_oid": odataPart["ID"],
                                            "part_number": odataPart["Number"],
                                            "part_name": odataPart["Name"],
                                            "part_source": odataPart["Source"],
                                            "part_defaultUnit": odataPart["DefaultUnit"],
                                            "part_version": odataPart["Version"]
                                        };
                                        return part;
                                    };
                                    
                                    var extractComponents = function(components) {
                                        var results = [];
                                        if (components === undefined) {
                                            logger.trace("FetchBOMFromPartID::extractComponents: components === undefined");
                                            return results;
                                        }
                                    
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchBOMFromPartID::extractComponents(" + JSON.stringify(components) + ")");
                                        }
                                    
                                        for (var i = 0; i < components.length; ++i) {
                                            var component = components[i];
                                            var odata_part = component["Part"];
                                            results.push({ "Part": extractPart(component["Part"]),
                                                           "Components": extractComponents(component["Components"])});
                                         }
                                        return results;
                                    };
                                    
                                    /**
                                     * Inputs
                                     *     partId: "<Part OID>"
                                     *     navigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "Components" : [
                                     *           { "Part": {
                                     *                 "part_oid": "<Part OID>",
                                     *                 "part_number": "<Part Number>",
                                     *                 "part_name": "<Part Name>",
                                     *                 "part_source": "<Part Source>",
                                     *                 "part_defaultUnit": "<Part Default Unit>",
                                     *                 "part_version": "<Part Version>" },
                                     *             "Components": [ ... ]
                                     *           },
                                     *           { "Part": ..., "Components": [...] },
                                     *           ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "Components" : [] };
                                    
                                    var odata_bom = fetchBOM(partId, navigationCriteria);
                                    if (odata_bom !== undefined && odata_bom.length > 0) {
                                        result["Components"] = extractComponents(odata_bom);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchBOMFromPartId">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmptyString = function(str) {
                                        return isNull(str) || (str.trim() === "");
                                    };
                                    
                                    var nc;
                                    if (!isNullOrEmptyString(navigationCriteriaId)) {
                                        nc = { "ID": navigationCriteriaId };
                                    }
                                    
                                    var result = me.FetchBOMFromPartID({
                                        "partId": partId,
                                        "navigationCriteria": nc
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchBOPFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var translateBOP = function(root, oDataBOP) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchBOPFromProcessPlanID::translateBOP(" + JSON.stringify(root) + ", " + JSON.stringify(oDataBOP) + ")");
                                        }
                                    
                                        var simple_bop = { "iteration": root, "children": []};
                                        var child_odata_bops = oDataBOP["Components"];
                                        if (child_odata_bops === undefined) {
                                            return simple_bop;
                                        }
                                    
                                        for (var i = 0; i < child_odata_bops.length; ++i) {
                                            var child_odata_bop = child_odata_bops[i];
                                    
                                            var op_holder = child_odata_bop["OperationHolder"];
                                            if (op_holder === undefined) {
                                                // The Operation Master could not be resolved into an Iteration given the NCs
                                                continue;
                                            }
                                    
                                            if (op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.operation.MPMOperation") == -1 &&
                                                op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.operation.MPMStandardOperation") == -1 &&
                                                op_holder["ID"].indexOf("com.ptc.windchill.mpml.processplan.MPMProcessPlan") == -1) {
                                                // TODO: we should have a more robust method to determine if an Entity is a child of 'Operation' than to look at the ID.
                                                continue;
                                            }
                                    
                                            var op_holder_link = child_odata_bop["OperationHolderUsageLink"];
                                            var op_label = op_holder_link["OperationLabel"];
                                            if (op_label === undefined) {
                                                op_label = op_holder_link["InsertionOperation"];
                                            }
                                            var simple_child_bop = translateBOP(op_holder, child_odata_bop);
                                            simple_child_bop["iteration"]["OperationLabel"] = op_label;
                                            simple_bop["children"].push(simple_child_bop);
                                        }
                                    
                                        return simple_bop;
                                    };
                                    
                                    /**
                                     * Inputs
                                     *     processPlanId: "<Process Plan OID>"
                                     *     processPlanNavigationCriteria: "{ <Navigation Criteria> }"
                                     *     relatedAssemblyNavigationCriteria: "{ <Navigation Criteria> }"
                                     *
                                     * Returns a 'Simple BOP'
                                     *     { "iteration": {
                                     *           "att1": val1,
                                     *           "att2": val2,
                                     *           ...,
                                     *           "OperationLabel" : "the-label-to-the-parent-iteration"}
                                     *       "children": [
                                     *           { "iteration": ..., "children": [ ... ] },
                                     *           ...
                                     *       ]
                                     *     }
                                     */
                                    var process_plan = me.GetProcessPlanByID({
                                        "processPlanId": processPlanId,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria
                                    });
                                    
                                    var result = null;
                                    if (!isNull(process_plan)) {
                                        var route_payload;
                                        if (!isNull(processPlanNavigationCriteria)) {
                                            route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                        }
                                        if (!isNull(relatedAssemblyNavigationCriteria)) {
                                            if (isNull(route_payload)) {
                                                route_payload = {};
                                            }
                                            route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_bop = Things[connector_thing_name].GetBOPWithInlineNavCriteria({
                                            "ID": process_plan["ID"],
                                            "processPlanNavigationCriteria": route_payload
                                        });
                                        var simple_bop = translateBOP(process_plan, odata_bop);
                                        result = simple_bop;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchBOPFromProcessPlanId">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmptyString = function(str) {
                                        return isNull(str) || (str.trim() === "");
                                    };
                                    
                                    var pp_nc;
                                    if (!isNullOrEmptyString(processPlanNavigationCriteriaId)) {
                                        pp_nc = { "ID": processPlanNavigationCriteriaId };
                                    }
                                    var ra_nc;
                                    if (!isNullOrEmptyString(relatedAssemblyNavigationCriteriaId)) {
                                        ra_nc = { "ID": relatedAssemblyNavigationCriteriaId };
                                    }
                                    
                                    var result = me.FetchBOPFromProcessPlanID({
                                        "processPlanId": processPlanId,
                                        "processPlanNavigationCriteria": pp_nc,
                                        "relatedAssemblyNavigationCriteria": ra_nc,
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchBOPStructureFromProcessPlanID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    
                                    var route_payload;
                                    if (!isNull(processPlanNavigationCriteria)) {
                                        route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                    }
                                    if (!isNull(relatedAssemblyNavigationCriteria)) {
                                        if (isNull(route_payload)) {
                                            route_payload = {};
                                        }
                                        route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                    }
                                    
                                    var odata_bop = Things[connector_thing_name].GetBOPWithInlineNavCriteria({
                                        "ID": processPlanId,
                                        "processPlanNavigationCriteria": route_payload
                                    });
                                    
                                    var result = odata_bop;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDefaultRepresentationsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchDefaultRepresentations = function(oids) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchDefaultRepresentationsFromOperationIds::fetchDefaultRepresentations(" + JSON.stringify(oids) + ")");
                                        }    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var reps = [];
                                        
                                        if (oids === undefined) {
                                            return reps;
                                        }
                                        
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response = Things[connector_thing_name].GetRepresentationsByOperationID({
                                                "ID": oid
                                            });
                                    
                                            if (odata_response === undefined || odata_response === null) {
                                                continue;
                                            }
                                            var odata_links = odata_response["Representations"];
                                            if (odata_links === undefined) {
                                                continue;
                                            }
                                            
                                            // Extract "Representation" from the link payload
                                            var odata_reps = [];
                                            for (var j = 0; j < odata_links.length; ++j) {
                                                var odata_link = odata_links[j];
                                                var odata_rep = odata_link;
                                                //var odata_rep = odata_link["Representation"];
                                                if (odata_rep === undefined || odata_rep === null) {
                                                    continue;
                                                }
                                                var default_rep = odata_rep["DefaultRepresentation"];
                                                if (default_rep === false || default_rep === "false") {
                                                    continue;
                                                }
                                    
                                                odata_reps.push(odata_rep);
                                                break;
                                            }
                                    
                                            reps.push({ "oid": oid, "odata_default_representations": odata_reps });
                                        }
                                    
                                        return reps;
                                    };
                                    
                                    /*
                                     * Inputs
                                     * operationIds: { "value" : [ <OperationOID>, ... ] }
                                     * Returns a JSON object, defined as:
                                       Representation: { "entity_oid": "<Operation OID>",
                                                            "ID": <Document OID>",
                                                            "DefaultRepresentation": <true/false>,
                                                            "TwoDThumbnailURL": { "URL": "url", "Label": "label" } ,
                                                            "ThreeDThumbnailURL": { "URL": "url", "Label": "label" } }
                                       Content: { "oid": "<Operation OID", "odata_default_representations": [Representation,Representation,Representation]}
                                       Result: { "defaultRepresentationsByOperation" : [ Content, Content, ... ]
                                     */
                                    var result = { "defaultRepresentationsByOperation" : [] };
                                    
                                    var oids_array = operationIds["value"];
                                    result["defaultRepresentationsByOperation"] = fetchDefaultRepresentations(oids_array);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromEntityIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var getValue = function(value, defaultValue) {
                                        var res = value;
                                        if (isNull(value)) {
                                             res = defaultValue;
                                        }
                                        return res;
                                    };
                                    
                                    var fetchDescribedByDocuments = function(oids, navigationCriteria) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchDescribedByDocumentsFromEntityIDs::fetchDescribedByDocuments(" + JSON.stringify(oids) + ")");
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var docs = [];
                                    
                                        var route_payload;
                                        if (!isNull(navigationCriteria)) {
                                            route_payload = { "navigationCriteria": navigationCriteria };
                                        }
                                    
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response;
                                            try {
                                                odata_response = Things[connector_thing_name].GetDocumentsWithInlineNavCriteria({
                                                    "ID": oid,
                                                    "navigationCriteria": route_payload,
                                                    "$expand": "DescribedByDocuments($expand=DescribedBy($expand=PrimaryContent,Attachments),DocumentDescribeLink)"
                                                });
                                            } catch (err) {
                                                logger.error("FetchDescribedByDocumentsFromEntityIDs::fetchDescribedByDocuments, oid=" + oid + ", " + err);
                                            }
                                    
                                            if (odata_response === undefined || odata_response === null) {
                                                continue;
                                            }
                                    
                                            var described_by_docs = odata_response["DescribedByDocuments"];
                                            if (described_by_docs === undefined || described_by_docs === null || described_by_docs.length === 0) {
                                                continue;
                                            }
                                    
                                            // Extract "DescribedBy" from the link payload
                                            var odata_docs = [];
                                            for (var j = 0; j < described_by_docs.length; ++j) {
                                                var described_by_doc = described_by_docs[j];
                                    
                                                var odata_doc = described_by_doc["DescribedBy"];
                                                if (odata_doc === undefined || odata_doc === null) {
                                                    continue;
                                                }
                                    
                                                odata_docs.push(odata_doc);
                                            }
                                    
                                            docs.push({ "oid": oid, "odata_docs": odata_docs });
                                        }
                                    
                                        return docs;
                                    };
                                    
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<OperationOID>", ... ] }
                                      *    navigationCriteria: {}
                                     *
                                     * Returns
                                     *     { "docs" : [
                                     *           { "entity_oid": "<Operation OID>",
                                     *             "doc_oid": "<Document OID>",
                                     *             "doc_number": "<Document Number>",
                                     *             "content": { "URL": "url", "Label": "label" },
                                     *             "should_download": true/false },
                                     *           ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "docs" : [] };
                                    
                                    var ids_array = entityIds["value"];
                                    var odata_docs_by_entity = fetchDescribedByDocuments(ids_array, navigationCriteria);
                                    if (odata_docs_by_entity.length > 0) {
                                        result = me.ExtractURLContentsFromDocuments({"documentsByOperation" : { "value": odata_docs_by_entity } });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromEntityIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchDescribedByDocuments = function(oids) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchDescribedByDocumentsFromEntityIds::fetchDescribedByDocuments(" + JSON.stringify(oids) + ")");
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var docs = [];
                                    
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response = Things[connector_thing_name].GetDescribedByDocumentsByOperationID({
                                                "ID": oid
                                            });
                                    
                                            if (odata_response === undefined || odata_response === null) {
                                                continue;
                                            }
                                    
                                            var odata_links = odata_response["DocumentDescribeLinks"];
                                            if (odata_links === undefined) {
                                                continue;
                                            }
                                    
                                            // Extract "DescribedBy" from the link payload
                                            var odata_docs = [];
                                            for (var j = 0; j < odata_links.length; ++j) {
                                                var odata_link = odata_links[j];
                                    
                                                var odata_doc = odata_link["DescribedBy"];
                                                if (odata_doc === undefined || odata_doc === null) {
                                                    continue;
                                                }
                                    
                                                var latest_doc = odata_doc["Latest"];
                                                if (latest_doc === false || latest_doc === "false") {
                                                    continue;
                                                }
                                    
                                                odata_docs.push(odata_doc);
                                            }
                                    
                                            docs.push({ "oid": oid, "odata_docs": odata_docs });
                                        }
                                    
                                        return docs;
                                    };
                                    
                                    
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<OperationOID>", ... ] }
                                     *
                                     * Returns
                                     *     { "docs" : [
                                     *           { "entity_oid": "<Operation OID>",
                                     *             "doc_oid": "<Document OID>",
                                     *             "doc_number": "<Document Number>",
                                     *             "content": { "URL": "url", "Label": "label" },
                                     *             "should_download": true/false },
                                     *           ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "docs" : [] };
                                    
                                    var ids_array = entityIds["value"];
                                    var odata_docs_by_entity = fetchDescribedByDocuments(ids_array);
                                    if (odata_docs_by_entity.length > 0) {
                                        result = me.ExtractURLContentsFromDocuments({"documentsByOperation" : { "value": odata_docs_by_entity } });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchDescribedByDocumentsFromEntityIDs({
                                        "entityIds": operationIds,
                                        "navigationCriteria": navigationCriteria
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchDescribedByDocumentsFromEntityIds({
                                        entityIds:  operationIds/* JSON */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromProcessPlan">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchDescribedByDocumentsFromEntityIds({
                                        "entityIds": ppIds
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchDescribedByDocumentsFromProcessPlanIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchDescribedByDocumentsFromEntityIDs({
                                        "entityIds": ppIds,
                                        "navigationCriteria": navigationCriteria
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchIllustrationsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchDownloadUrls = function(oid) {
                                        logger.trace("FetchIllustrationsFromOperationIds::fetchDownloadUrls: " + oid);
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_response = Things[connector_thing_name].GetDownloadURLsById({
                                            ID: oid
                                        });
                                    
                                        if (odata_response === undefined || odata_response === null) {
                                            logger.warn("[FetchIllustrationsFromOperationIds:fetchDownloadUrls:1] Couldn't retrieve from " + oid);
                                            return null;
                                        }
                                    
                                        if (odata_response["value"] === undefined || odata_response["value"] === null) {
                                            logger.warn("[FetchIllustrationsFromOperationIds:fetchDownloadUrls:2] Couldn't retrieve from " + oid);
                                            return null;
                                        }
                                    
                                        return odata_response["value"];
                                    };
                                    
                                    var getFilenameFromURL = function(url) {
                                        // remove everything after anchor character: #
                                        url = url.substring(0, (url.indexOf("#") == -1) ? url.length : url.indexOf("#"));
                                        // remove everything after query character: ?
                                        url = url.substring(0, (url.indexOf("?") == -1) ? url.length : url.indexOf("?"));
                                        // remove everything before proper-path
                                        url = url.substring(url.lastIndexOf("/") + 1, url.length);
                                        var decoded_url = decodeURI(url);
                                        return decoded_url;
                                    };
                                    
                                    var fetchIllustrations = function(oids) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchIllustrationsFromOperationIds::fetchIllustrations(" + JSON.stringify(oids) + ")");
                                        }
                                    
                                        var docs = [];
                                    
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                            var download_urls = fetchDownloadUrls(oid);
                                            if (download_urls === null) {
                                                continue;
                                            }
                                    
                                            for (var j = 0; j < download_urls.length; ++j) {
                                                var download_url = download_urls[j];
                                                var filename = getFilenameFromURL(download_url);
                                                docs.push({ "entity_oid": oid, "content": { "URL": download_url, "Label": filename}, "should_download": true });
                                            }
                                        }
                                    
                                        return docs;
                                    };
                                    
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<OperationOID>", ... ] }
                                     *
                                     * Returns
                                     *     { "docs" : [
                                     *         { "entity_oid": "<Operation OID>",
                                     *           "doc_oid": "<Document OID>",
                                     *           "doc_number": "<Document Number>",
                                     *           "content": { "URL": "url", "Label": "label" }
                                     *           "should_download": true/false },
                                     *         ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "docs" : [] };
                                    
                                    var oids_array = operationIds["value"];
                                    result["docs"] = fetchIllustrations(oids_array);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchPartsFromNumber">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchParts = function(partNumber) {
                                        logger.trace("FetchPartsFromNumber::fetchParts: " + partNumber);
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_response = Things[connector_thing_name].GetMaterials({
                                            "$filter": "Number eq '" + partNumber + "'"
                                        });
                                    
                                        if (odata_response["value"] === undefined || odata_response["value"] === null) {
                                            logger.warn("[FetchPartsFromPartNumber:fetchParts] Error while retrieving Part with Number " + partNumber);
                                            return null;
                                        }
                                    
                                        if (odata_response["value"].length === 0) {
                                            logger.trace("[FetchPartsFromPartNumber:fetchParts] No associated Process Plans found for OID: " + partNumber);
                                            return [];
                                        }
                                    
                                        return odata_response["value"];
                                    };
                                    
                                    
                                    /*
                                     * Inputs
                                     *     partNumber: "<Part Number>"
                                     *
                                     * Returns OData Part Entity payload
                                     *     { "ID": "<Part OID>",
                                     *       "Name": "<Part Name>",
                                     *       "Number": "<Part Number>",
                                     *       ...
                                     *     }
                                     */
                                    var result = fetchParts(partNumber);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchProcessMaterialsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *     relatedAssemblyNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *
                                     * Returns
                                     *     { "ConsumedProcessMaterials": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "ProcessMaterial": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIds({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteriaId": processPlanNavigationCriteriaId,
                                        "relatedAssemblyNavigationCriteriaId": relatedAssemblyNavigationCriteriaId,
                                        "resourceType": "ProcessMaterial",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedProcessMaterials"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchProcessMaterialsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "ConsumedProcessMaterials": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "ProcessMaterial": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                        "resourceType": "ProcessMaterial",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedProcessMaterials"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchProcessPlansFromPartId">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchProcessPlans = function(partOID) {
                                        logger.trace("FetchProcessPlansFromPartId::fetchProcessPlans: " + partOID);
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_response = Things[connector_thing_name].GetLatestProcessPlans({
                                            ID: partOID
                                        });
                                    
                                        if (odata_response["value"] === undefined || odata_response["value"] === null) {
                                            logger.warn("[FetchProcessPlansFromPartId:fetchProcessPlans] Error while retrieving Process Plans for Part OID " + partOID);
                                            return null;
                                        }
                                    
                                        if (odata_response["value"].length === 0) {
                                            logger.trace("[FetchProcessPlansFromPartId:fetchProcessPlans] No associated Process Plans found for OID: " + partOID);
                                            return [];
                                        }
                                    
                                        return odata_response["value"];
                                    };
                                    
                                    /*
                                     * Inputs
                                     *     partId: "<Part OID>"
                                     *
                                     * Returns OData Part Entity payload
                                     *     { "ID": "<Part OID>",
                                     *       "Name": "<Part Name>",
                                     *       "Number": "<Part Number>",
                                     *       ...
                                     *     }
                                     */
                                    var result = fetchProcessPlans(partId);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchProcessPlansFromProcessPlanNumber">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchProcessPlans = function(ppNumber) {
                                        logger.trace("FetchProcessPlansFromProcessPlanNumber::fetchProcessPlans: " + ppNumber);
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var odata_response = Things[connector_thing_name].GetProcessPlans({
                                            "$filter": "Number eq '" + ppNumber + "'"
                                        });
                                    
                                        if (odata_response["value"] === undefined || odata_response["value"] === null) {
                                            logger.error("[FetchProcessPlansFromProcessPlanNumber:fetchProcessPlan] Error while retrieving Process Plans for Number " + ppNumber);
                                            return null;
                                        }
                                    
                                        if (odata_response["value"].length === 0) {
                                            logger.trace("[FetchProcessPlansFromProcessPlanNumber:fetchProcessPlan] No Process Plans found with Number " + ppNumber);
                                            return [];
                                        }
                                    
                                        return odata_response["value"];
                                    };
                                    
                                    /*
                                     * Inputs
                                     *     processPlanNumber: "<Process Plan Number>"
                                     *
                                     * Returns OData Process Plan Entity payload
                                     *     { "ID": "<Process Plan OID>",
                                     *       "Name": "<Process Plan Name>",
                                     *       "Number": "<Process Plan Number>",
                                     *       ...
                                     *     }
                                     */
                                    var result = fetchProcessPlans(processPlanNumber);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromEntityIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var getValue = function(value, defaultValue) {
                                        var res = value;
                                        if (isNullOrEmpty(value)) {
                                             res = defaultValue;
                                        }
                                        return res;
                                    };
                                    
                                    var fetchReferenceDocuments = function(oids, navigationCriteria) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchReferenceDocumentsFromEntityIDs::fetchReferenceDocuments(" + JSON.stringify(oids) + ")");
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var docs = [];
                                    
                                        var route_payload;
                                        if (!isNull(navigationCriteria)) {
                                            route_payload = { "navigationCriteria": navigationCriteria };
                                        }
                                    
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response;
                                            try {
                                                odata_response = Things[connector_thing_name].GetDocumentsWithInlineNavCriteria({
                                                    "ID": oid,
                                                    "navigationCriteria": route_payload,
                                                    "$expand": "ReferenceDocuments($expand=References($expand=PrimaryContent,Attachments),DocumentReferenceLink)"
                                                });
                                            } catch (err) {
                                                logger.error("FetchReferenceDocumentsFromEntityIDs::fetchReferenceDocuments, oid=" + oid + ", " + err);
                                            }
                                    
                                            if (odata_response === undefined || odata_response === null) {
                                                continue;
                                            }
                                    
                                            var reference_docs = odata_response["ReferenceDocuments"];
                                            if (reference_docs === undefined || reference_docs === null || reference_docs.length === 0) {
                                                continue;
                                            }
                                    
                                            // Extract "References" from the link payload
                                            var odata_docs = [];
                                            for (var j = 0; j < reference_docs.length; ++j) {
                                                var reference_doc = reference_docs[j];
                                    
                                                var odata_doc = reference_doc["References"];
                                                if (odata_doc === undefined || odata_doc === null) {
                                                    continue;
                                                }
                                    
                                                odata_docs.push(odata_doc);
                                            }
                                    
                                            docs.push({ "oid": oid, "odata_docs": odata_docs });
                                        }
                                    
                                        return docs;
                                    };
                                    
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<OperationOID>", ... ] }
                                      *    navigationCriteria: {}
                                     *
                                     * Returns
                                     *     { "docs" : [
                                     *           { "entity_oid": "<Operation OID>",
                                     *             "doc_oid": "<Document OID>",
                                     *             "doc_number": "<Document Number>",
                                     *             "content": { "URL": "url", "Label": "label" },
                                     *             "should_download": true/false },
                                     *           ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "docs" : [] };
                                    
                                    var oids_array = entityIds["value"];
                                    var odata_docs_by_entity = fetchReferenceDocuments(oids_array, navigationCriteria);
                                    if (odata_docs_by_entity.length > 0) {
                                        result = me.ExtractURLContentsFromDocuments({ "documentsByOperation": { "value": odata_docs_by_entity } });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromEntityIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fetchReferenceDocuments = function(oids) {
                                        if (logger.traceEnabled) {
                                            logger.trace("FetchReferenceDocumentsFromEntityIds::fetchReferenceDocuments(" + JSON.stringify(oids) + ")");
                                        }
                                    
                                        var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                        var docs = [];
                                    
                                        for (var i = 0; i < oids.length; ++i) {
                                            var oid = oids[i];
                                    
                                            var odata_response = Things[connector_thing_name].GetReferencedDocumentsByOperationID({
                                                "ID": oid
                                            });
                                    
                                            if (odata_response === undefined || odata_response === null) {
                                                continue;
                                            }
                                    
                                            var odata_links = odata_response["DocumentReferenceLinks"];
                                            if (odata_links === undefined) {
                                                continue;
                                            }
                                    
                                            // Extract "References" from the link payload
                                            var odata_docs = [];
                                            for (var j = 0; j < odata_links.length; ++j) {
                                                var odata_link = odata_links[j];
                                    
                                                var odata_doc = odata_link["References"];
                                                if (odata_doc === undefined || odata_doc === null) {
                                                    continue;
                                                }
                                    
                                                odata_docs.push(odata_doc);
                                            }
                                    
                                            docs.push({ "oid": oid, "odata_docs": odata_docs });
                                        }
                                    
                                        return docs;
                                    };
                                    
                                    
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ <Operation OID>, ... ] }
                                     *
                                     * Returns
                                     *     { "docs" : [
                                     *           { "entity_oid": "<Operation OID>",
                                     *             "doc_oid": <Document OID>",
                                     *             "doc_number": "<Document Number>",
                                     *             "content": { "URL": "url", "Label": "label" },
                                     *             "should_download": true/false },
                                     *             ...
                                     *       ]
                                     *     }
                                     */
                                    var result = { "docs" : [] };
                                    
                                    var oids_array = entityIds["value"];
                                    var odata_docs_by_entity = fetchReferenceDocuments(oids_array);
                                    if (odata_docs_by_entity.length > 0) {
                                        result = me.ExtractURLContentsFromDocuments({"documentsByOperation" : { "value": odata_docs_by_entity } });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchReferenceDocumentsFromEntityIds({
                                        "entityIds": operationIds
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchReferenceDocumentsFromEntityIDs({
                                        "entityIds": operationIds,
                                        "navigationCriteria": navigationCriteria
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromProcessPlanIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchReferenceDocumentsFromEntityIds({
                                        "entityIds": ppIds
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchReferenceDocumentsFromProcessPlanIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = me.FetchReferenceDocumentsFromEntityIDs({
                                        "entityIds": ppIds,
                                        "navigationCriteria": navigationCriteria
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchResourcesFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmptyString = function(str) {
                                        return isNull(str) || (str.trim() === "");
                                    };
                                    
                                    var pp_nc;
                                    if (!isNullOrEmptyString(processPlanNavigationCriteriaId)) {
                                        pp_nc = { "ID": processPlanNavigationCriteriaId };
                                    }
                                    var ra_nc;
                                    if (!isNullOrEmptyString(relatedAssemblyNavigationCriteriaId)) {
                                        ra_nc = { "ID": relatedAssemblyNavigationCriteriaId };
                                    }
                                    
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": pp_nc,
                                        "relatedAssemblyNavigationCriteria": ra_nc,
                                        "resourceType": resourceType,
                                        "linkType": linkType,
                                        "consumedResultKey": consumedResultKey
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchResourcesFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var connector_thing_name = me.GetConfigurationTable({tableName: "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var isNullOrEmpty = function(str) {
                                        return isNull(str) || (str === "");
                                    };
                                    
                                    var getValue = function(value, defaultValue) {
                                        var res = value;
                                        if (isNullOrEmpty(value)) {
                                             res = defaultValue;
                                        }
                                        return res;
                                    };
                                    
                                    var resources = [];
                                    var oids_array = operationIds["value"];
                                    
                                    var route_payload;
                                    if (!isNull(processPlanNavigationCriteria)) {
                                        route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                    }
                                    if (!isNull(relatedAssemblyNavigationCriteria)) {
                                        if (isNull(route_payload)) {
                                            route_payload = {};
                                        }
                                        route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                    }
                                    
                                    for (var i = 0; i < oids_array.length; ++i) {
                                        var oid = oids_array[i];
                                        var odata_response;
                                        try {
                                            /**
                                             * oid: operation oid
                                             * processPlanNavigationCriteria: process plan navigation criteria. Default is blank
                                             * relatedAssemblyNavigationCriteria: related assembly navigation criteria. Default is blank
                                             * consumedResultKey: Either "ConsumedSkills", "ConsumedProcessMaterials", "ConsumedStandardCCs", "ConsumedToolings", "ConsumedWorkCenters",
                                             *         or any key that is applicable to "$expand" criteria of "GetConsumedWithInlineNavCriteria" route service.
                                             * resourceType: Either "Skill", "ProcessMaterial", "Tooling", "WorkCenter",
                                             *         or any type that is applicable to "$expand" criteria of "GetConsumedWithInlineNavCriteria" route service.
                                             * linkType: Either "OperationToConsumableLink", "OperationToWorkCenterLink"
                                             *         or any link that is applicable to "$expand" criteria of "GetConsumedWithInlineNavCriteria" route service.
                                             */
                                            odata_response = Things[connector_thing_name].GetConsumedWithInlineNavCriteria({
                                                "ID": oid,
                                                "processPlanNavigationCriteria": route_payload,
                                                "$expand": consumedResultKey + "($expand=" + resourceType + "," + linkType + ")"
                                            });
                                        } catch (err) {
                                        }
                                    
                                        if (odata_response === undefined || odata_response === null) {
                                            continue;
                                        }
                                    
                                        var odata_resources = odata_response[consumedResultKey];
                                        if (odata_resources === undefined || odata_resources === null || odata_resources.length === 0) {
                                            continue;
                                        }
                                    
                                        var consumed_resources_links = [];
                                        for (var j = 0; j < odata_resources.length; j++) {
                                            var odataResources = odata_resources[j];
                                            var res = odataResources[resourceType];
                                            if (res === undefined || res === null) {
                                                // The resource was filtered out by the navigation criteria, skipping it.
                                                continue;
                                            }
                                    
                                            var operation_to_consumable_link = odataResources[linkType];
                                    
                                            var entry = {};
                                            entry[resourceType] = res;
                                            entry[linkType] = operation_to_consumable_link;
                                    
                                            consumed_resources_links.push(entry);
                                        }
                                    
                                        resources.push({ "operationOid": oid, "ConsumedResourcesAndLinks": consumed_resources_links });
                                    }
                                    
                                    var result = {};
                                    result[consumedResultKey] = resources;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchSkillsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *     relatedAssemblyNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *
                                     * Returns
                                     *     { "ConsumedSkills": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "Skill": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIds({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteriaId": processPlanNavigationCriteriaId,
                                        "relatedAssemblyNavigationCriteriaId": relatedAssemblyNavigationCriteriaId,
                                        "resourceType": "Skill",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedSkills"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchSkillsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "ConsumedSkills": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "Skill": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                        "resourceType": "Skill",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedSkills"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchStandardCCsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "ConsumedStandardCCs": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "StandardCC": { ... },
                                     *                 "OperationToStandardCCLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                        "resourceType": "StandardCC",
                                        "linkType": "OperationToStandardCCLink",
                                        "consumedResultKey": "ConsumedStandardCCs"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchStandardCCsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *     relatedAssemblyNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *
                                     * Returns
                                     *     { "ConsumedStandardCCs": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "StandardCC": { ... },
                                     *                 "OperationToStandardCCLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIds({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteriaId": processPlanNavigationCriteriaId,
                                        "relatedAssemblyNavigationCriteriaId": relatedAssemblyNavigationCriteriaId,
                                        "resourceType": "StandardCC",
                                        "linkType": "OperationToStandardCCLink",
                                        "consumedResultKey": "ConsumedStandardCCs"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchToolingsFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *     relatedAssemblyNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *
                                     * Returns
                                     *     { "ConsumedToolings": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "Tooling": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIds({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteriaId": processPlanNavigationCriteriaId,
                                        "relatedAssemblyNavigationCriteriaId": relatedAssemblyNavigationCriteriaId,
                                        "resourceType": "Tooling",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedToolings"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchToolingsFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "ConsumedToolings": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "Tooling": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                        "resourceType": "Tooling",
                                        "linkType": "OperationToConsumableLink",
                                        "consumedResultKey": "ConsumedToolings"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchWorkCentersFromOperationIDs">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteria: { <Navigation Criteria> }
                                     *     relatedAssemblyNavigationCriteria: { <Navigation Criteria> }
                                     *
                                     * Returns
                                     *     { "ConsumedWorkCenters": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "WorkCenter": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIDs({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteria": processPlanNavigationCriteria,
                                        "relatedAssemblyNavigationCriteria": relatedAssemblyNavigationCriteria,
                                        "resourceType": "WorkCenter",
                                        "linkType": "OperationToWorkCenterLink",
                                        "consumedResultKey": "ConsumedWorkCenters"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FetchWorkCentersFromOperationIds">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /*
                                     * Inputs
                                     *     operationIds: { "value" : [ "<Operation OID>", ... ] }
                                     *     processPlanNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *     relatedAssemblyNavigationCriteriaId: "<Navigation Criteria OID>"
                                     *
                                     * Returns
                                     *     { "ConsumedWorkCenters": [
                                     *         { "operationOid": "<Operation OID>",
                                     *           "ConsumedResourcesAndLinks": [
                                     *               { "WorkCenter": { ... },
                                     *                 "OperationToConsumableLink": { ... }
                                     *           ]
                                     *         }, ...
                                     *       ]
                                     *     }
                                     */
                                    var result = me.FetchResourcesFromOperationIds({
                                        "operationIds": operationIds,
                                        "processPlanNavigationCriteriaId": processPlanNavigationCriteriaId,
                                        "relatedAssemblyNavigationCriteriaId": relatedAssemblyNavigationCriteriaId,
                                        "resourceType": "WorkCenter",
                                        "linkType": "OperationToWorkCenterLink",
                                        "consumedResultKey": "ConsumedWorkCenters"
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetProcessPlanByID">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var isNull = function(obj) {
                                        return (obj === undefined || obj === null);
                                    };
                                    
                                    var route_payload;
                                    if (!isNull(processPlanNavigationCriteria)) {
                                        route_payload = { "processPlanNavigationCriteria": processPlanNavigationCriteria };
                                    }
                                    if (!isNull(relatedAssemblyNavigationCriteria)) {
                                        if (isNull(route_payload)) {
                                            route_payload = {};
                                        }
                                        route_payload["relatedAssemblyNavigationCriteria"] = relatedAssemblyNavigationCriteria;
                                    }
                                    
                                    var connector_thing_name = me.GetConfigurationTable({"tableName": "ConverterConfiguration"}).getFirstRow().get("Connector");
                                    var odata = Things[connector_thing_name].GetBOPWithInlineNavCriteria({
                                        "ID": processPlanId,
                                        "processPlanNavigationCriteria": route_payload,
                                        "$expand": "OperationHolder"
                                    });
                                    
                                    var result = null;
                                    if (!isNull(odata) && !isNull(odata["OperationHolder"])) {
                                        result = odata["OperationHolder"];
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
